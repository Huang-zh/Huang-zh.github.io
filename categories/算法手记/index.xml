<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法手记 on 此间的少年</title>
    <link>https://Huang-zh.github.io/categories/%E7%AE%97%E6%B3%95%E6%89%8B%E8%AE%B0/</link>
    <description>Recent content in 算法手记 on 此间的少年</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 19 Sep 2023 21:41:08 +0800</lastBuildDate><atom:link href="https://Huang-zh.github.io/categories/%E7%AE%97%E6%B3%95%E6%89%8B%E8%AE%B0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LeetCode算法手记：26.删除有序数组中的重复项</title>
      <link>https://Huang-zh.github.io/posts/leetcode26/</link>
      <pubDate>Tue, 19 Sep 2023 21:41:08 +0800</pubDate>
      
      <guid>https://Huang-zh.github.io/posts/leetcode26/</guid>
      <description>给你一个有序数组 nums ，请你原地删除重复出现的元素，使每个元素只出现一次 ，返回删除后数组的新长度。 不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。 说明： 为什么返回数值是整数，但输出的答案是数组呢? 请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。 示例 1： 输入：nums = [1,1,2] 输出：2, nums = [1,2] 解释：函数应该返回新的长度2，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。 示例 2： 输入：nums = [0,0,1,1,1,2,2,3,3,4] 输出：5, nums = [0,1,2,3,4] 解释：函数应该返回新的长度 5，并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。 提示： 0 &amp;lt;= nums.length &amp;lt;= 3*104 -104 &amp;lt;= nums[i] &amp;lt;= 104 nums已按升序排列 思路 定义快慢指针，在快指针从前向后遍历的过程中，如果遇到新的值和当前慢指针的值不同，则慢指针向后递进一格并替换慢指针当前的值为快指针的值，这样就能跳过重复的元素，最后返回慢指针指向的下标+1（从0开始）就能得到正确的答案。
思路递推 以示例二中的 nums = [0,0,1,1,1,2,2,3,3,4]进行递推：
  定义慢指针i，快指针j，初始i = 0，j = 0。</description>
    </item>
    
    <item>
      <title>LeetCode算法手记：1.两数之和</title>
      <link>https://Huang-zh.github.io/posts/leetcode1/</link>
      <pubDate>Tue, 19 Sep 2023 21:27:18 +0800</pubDate>
      
      <guid>https://Huang-zh.github.io/posts/leetcode1/</guid>
      <description>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出和为目标值 target 的那两个整数，并返回它们的数组下标。 你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。你可以按任意顺序返回答案。 示例 1： 输入：nums = [2,7,11,15], target = 9 输出：[0,1] 解释：因为 nums[0] + nums[1] == 9，返回 [0,1] 。 示例 2： 输入：nums = [3,2,4]，target = 6 输出：[1,2] 示例 3： 输入：nums = [3,3]，target = 6 输出：[0,1] 提示： 2 &amp;lt;= nums.length &amp;lt;= 104 -109 &amp;lt;= nums[i] &amp;lt;= 109 -109 &amp;lt;= target &amp;lt;= 109 只会存在一个有效答案  梦开始的地方。
 思路 既然存在nums[i]和nums[j](0 &amp;lt;= i &amp;lt; j &amp;lt; nums.length)，使得nums[i]与nums[j]的和为target。那么可以在遍历nums的过程中，使用字典记录当前target-nums[j]（即nums[i]）的值和对应的下标，那么，在后续遍历至nums[j]的过程中，自然能够通过target-nums[j]获得nums[i]所对应的下标。
思路递推 以实例一中的nums = [2,7,11,15], target = 9为例：</description>
    </item>
    
    <item>
      <title>LeetCode算法手记：986.区间列表的交集</title>
      <link>https://Huang-zh.github.io/posts/leetcode986/</link>
      <pubDate>Sun, 17 Sep 2023 12:10:26 +0800</pubDate>
      
      <guid>https://Huang-zh.github.io/posts/leetcode986/</guid>
      <description>给定两个由一些闭区间组成的列表，firstList 和 secondList ，其中 firstList[i] = [start i, end i] 而 secondList[j] = [start j, end j] 。 每个区间列表都是成对不相交的，并且已经排序 。返回这两个区间列表的交集 。 形式上，闭区间 [a, b]（其中 a &amp;lt;= b）表示实数 x 的集合，而 a &amp;lt;= x &amp;lt;= b 。 两个闭区间的交集是一组实数，要么为空集，要么为闭区间。例如，[1, 3] 和 [2, 4] 的交集为 [2, 3] 。 示例 1： 输入：firstList = [[0,2],[5,10],[13,23],[24,25]], secondList = [[1,5],[8,12],[15,24],[25,26]] 输出：[[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]] 示例 2： 输入：firstList = [[1,3],[5,9]], secondList = [ ] 输出：[ ] 示例 3： 输入：firstList = [], secondList = [[4,8],[10,12]] 输出：[ ] 示例 4： 输入：firstList = [[1,7]], secondList = [[3,10]] 输出：[[3,7]] 提示： 0 &amp;lt;= firstList.</description>
    </item>
    
    <item>
      <title>LeetCode算法手记：1781.所有子字符串美丽值之和</title>
      <link>https://Huang-zh.github.io/posts/leetcode1781/</link>
      <pubDate>Sat, 16 Sep 2023 21:33:23 +0800</pubDate>
      
      <guid>https://Huang-zh.github.io/posts/leetcode1781/</guid>
      <description>一个字符串的美丽值定义为：出现频率最高字符与出现频率最低字符的出现次数之差。 比方说，“abaacc” 的美丽值为 3 - 1 = 2 。 给你一个字符串 s ，请你返回它所有子字符串的美丽值之和。 示例 1： 输入：s = “aabcb” 输出：5 解释：美丽值不为零的字符串包括 [“aab”,“aabc”,“aabcb”,“abcb”,“bcb”] ，每一个字符串的美丽值都为 1。 示例 2： 输入：s = “aabcbaa” 输出：17 提示： 1 &amp;lt;= s.length &amp;lt;= 500 s 只包含小写英文字母。 思路 通过双指针i，j进行双层循环，能够获得字符串s所有的子字符串。
在每一次第二层循环之前，初始化一个长度为26的数组frequency，记录s[i]-s[j]组成的字符串中各字符出现的频率。
同时维护一个maxNum用于记录当前s[i]-s[j]组成的字符串中最高的字符出现频率。
在每一次子字符串获得后，获取s[i]-s[j]组成的字符串中最低的字符出现频率minNum。将maxNum和minNum的差值累加，最后得到result。
思路递推 以实例一中s=&amp;ldquo;aabcb&amp;quot;为例：
 初始i = 0,j = 0。 初始化frequency数组，同时当前子字符串为&amp;quot;a&amp;rdquo;。 s[j] = &amp;lsquo;a&amp;rsquo;，frequency[s[j] - &amp;lsquo;a&amp;rsquo;] = frequency[0] = 1，maxNum = 1(a)，minNum = 1(a)，差值为0，result += 0，此时result = 0。 i = 0,j = 1。 当前子字符串为&amp;quot;aa&amp;quot;。 s[j] = &amp;lsquo;a&amp;rsquo;，frequency[s[j] - &amp;lsquo;a&amp;rsquo;] = frequency[0] = 2，maxNum = 2(a)，minNum = 2(a)，差值为0，result += 0，此时result = 0。 i = 0,j = 2。 当前子字符串为&amp;quot;aab&amp;quot;。 s[j] = &amp;lsquo;b&amp;rsquo;，frequency[s[j] - &amp;lsquo;a&amp;rsquo;] = frequency[1] = 1，maxNum = 2(a)，minNum = 1(b)，差值为1，result += 1，此时result = 1。 i = 0,j = 3。 当前子字符串为&amp;quot;aabc&amp;quot;。 s[j] = &amp;lsquo;c&amp;rsquo;，frequency[s[j] - &amp;lsquo;a&amp;rsquo;] = frequency[2] = 1，maxNum = 2(a)，minNum = 1(b/c)，差值为1，result += 1，此时result = 2.</description>
    </item>
    
    <item>
      <title>LeetCode算法手记：1764.通过连接另一个数组的子数组得到一个数组</title>
      <link>https://Huang-zh.github.io/posts/leetcode1764/</link>
      <pubDate>Sat, 16 Sep 2023 20:35:38 +0800</pubDate>
      
      <guid>https://Huang-zh.github.io/posts/leetcode1764/</guid>
      <description>给你一个长度为 n 的二维整数数组 groups，同时给你一个整数数组 nums 。 你是否可以从 nums 中选出 n 个不相交的子数组，使得第 i 个子数组与 groups[i] （下标从 0 开始）完全相同，且如果 i &amp;gt; 0 ，那么第 (i-1) 个子数组在 nums 中出现的位置在第 i 个子数组前面。（也就是说，这些子数组在 nums 中出现的顺序需要与 groups 顺序相同） 如果你可以找出这样的 n 个子数组，请你返回 true，否则返回 false。 如果不存在下标为 k 的元素 nums[k] 属于不止一个子数组，就称这些子数组是不相交的。子数组指的是原数组中连续元素组成的一个序列。 示例 1： 输入：groups = [[1,-1,-1],[3,-2,0]], nums = [1,-1,0,1,-1,-1,3,-2,0] 输出：true 解释：你可以分别在 nums 中选出第 0 个子数组 [1,-1,-1] 和第 1 个子数组 [3,-2,0] 。 这两个子数组是不相交的，因为它们没有任何共同的元素。 示例 2： 输入：groups = [[10,-2],[1,2,3,4]], nums = [1,2,3,4,10,-2] 输出：false 解释：选择子数组 [1,2,3,4] 和 [10,-2] 是不正确的，因为它们出现的顺序与 groups 中顺序不同。[10,-2] 必须出现在 [1,2,3,4] 之前。 示例 3： 输入：groups = [[1,2,3],[3,4]], nums = [7,7,1,2,3,4,7,7] 输出：false 解释：选择子数组 [1,2,3] 和 [3,4,] 是不正确的，因为它们不是不相交子数组。它们有一个共同的元素 nums[4] （下标从 0 开始）。 提示： groups.</description>
    </item>
    
    <item>
      <title>LeetCode算法手记：807.情感丰富的文字</title>
      <link>https://Huang-zh.github.io/posts/leetcode807/</link>
      <pubDate>Mon, 11 Sep 2023 22:12:46 +0800</pubDate>
      
      <guid>https://Huang-zh.github.io/posts/leetcode807/</guid>
      <description>有时候人们会用重复写一些字母来表示额外的感受，比如 “hello” -&amp;gt; “heeellooo”, “hi” -&amp;gt; “hiii”。我们将相邻字母都相同的一串字符定义为相同字母组，例如：“h”, “eee”, “ll”, “ooo” 对于一个给定的字符串 S ，如果另一个单词能够通过将一些字母组扩张从而使其和 S 相同，我们将这个单词定义为可扩张的（stretchy）。扩张操作定义如下：选择一个字母组（包含字母 c ），然后往其中添加相同的字母 c 使其长度达到 3 或以上 例如，以 “hello” 为例，我们可以对字母组 “o” 扩张得到 “hellooo”，但是无法以同样的方法得到 “helloo” 因为字母组 “oo” 长度小于 3。此外，我们可以进行另一种扩张 “ll” -&amp;gt; “lllll” 以获得 “helllllooo”。如果 S = “helllllooo”，那么查询词 “hello” 是可扩张的，因为可以对它执行这两种扩张操作使得 query = “hello” -&amp;gt; “hellooo” -&amp;gt; “helllllooo” = 输入一组查询单词，输出其中可扩张的单词数量 示例 输入 S = “heeellooo” words = [“hello”, “hi”, “helo”] 输出： 解释 我们能通过扩张 “hello” 的 “e” 和 “o” 来得到 “heeellooo” 我们不能通过扩张 “helo” 来得到 “heeellooo” 因为 “ll” 的长度小于 3 提示 0 &amp;lt;= len(S) &amp;lt;= 100 0 &amp;lt;= len(words) &amp;lt;= 100 0 &amp;lt;= len(words[i]) &amp;lt;= 100 S 和所有在 words 中的单词都只由小写字母组成 思路 如果s能由word扩展而来，则遵守以下的判断原则：</description>
    </item>
    
    <item>
      <title>LeetCode算法手记：792.匹配子序列的单词数</title>
      <link>https://Huang-zh.github.io/posts/leetcode792/</link>
      <pubDate>Sat, 09 Sep 2023 21:02:25 +0800</pubDate>
      
      <guid>https://Huang-zh.github.io/posts/leetcode792/</guid>
      <description>给定字符串 s 和字符串数组 words, 返回 words[i] 中是 s 的子序列的单词个数。 字符串的子序列是从原始字符串中生成的新字符串，可以从中删去一些字符(可以是 none)，而不改变其余字符的相对顺序。 例如， “ace” 是 “abcde” 的子序列。 示例 1： 输入: s = “abcde”, words = [“a”,“bb”,“acd”,“ace”] 输出: 3 解释: 有三个是 s 的子序列的单词: “a”, “acd”, “ace”。 示例 2： 输入: s = “dsahjpjauf”, words = [“ahjpjau”,“ja”,“ahbwzgqnuk”,“tnmlanowax”] 输出: 2 提示： 1 &amp;lt;= s.length &amp;lt;= 5 * 104 1 &amp;lt;= words.length &amp;lt;= 5000 1 &amp;lt;= words[i].length &amp;lt;= 50 words[i]和 s 都只由小写字母组成。 思路 对于字符串s和字符串t，若s为t的子序列，则需要满足以下几点：
 s中的所有字符的相对顺序，必须和这些字符在t中出现的相对顺序保持一致，例如s为ace，t为abcde，则s为t的子序列，此时a、c、e三个字符在两个字符串中出现的相对顺序保持一致，t可以通过删除b和d两个字符来得到s。 若s由一个或多个相同字符组成，那么该字符在s中出现的次数必然小于等于t中该字符出现的次数，例如字符串a、aa、aaa均为字符串aabade的子序列，但aaaa不是字符串aabade的子序列。  那么，维护一个数组，记录下原字符串t中每一个字符t[i]出现的位置i，然后对于要判断子序列的样本s，遍历s的每个字符，判断以下几点：</description>
    </item>
    
    <item>
      <title>LeetCode算法手记：777.在LR字符串中交换相邻字符</title>
      <link>https://Huang-zh.github.io/posts/leetcode777/</link>
      <pubDate>Thu, 07 Sep 2023 19:02:25 +0800</pubDate>
      
      <guid>https://Huang-zh.github.io/posts/leetcode777/</guid>
      <description>在一个由 ‘L’ , ‘R’ 和 ‘X’ 三个字符组成的字符串（例如&amp;#34;RXXLRXRXL&amp;#34;）中进行移动操作。 一次移动操作指用一个 “LX” 替换一个 “XL”，或者用一个 “XR” 替换一个 “RX”。 现给定起始字符串 start 和结束字符串 end，请编写代码，当且仅当存在一系列移动操作使得 start 可以转换成 end 时， 返回 True。 输入：start = &amp;#34;RXXLRXRXL&amp;#34;, end = &amp;#34;XRLXXRRLX&amp;#34; 输出：True 解释： 我们可以通过以下几步将 start 转换成 end： RXXLRXRXL -&amp;gt; XRXLRXRXL -&amp;gt; XRLXRXRXL -&amp;gt; XRLXXRRXL -&amp;gt; XRLXXRRLX 提示： 1 &amp;lt;= len(start) = len(end) &amp;lt;= 10000。 start 和 end 中的字符串仅限于’L’, ‘R’和’X’。 思路 如果一个start可以完成到end的转换，那么，两个字符串中L和R的相对位置一定会保持一致。
可以在start和end上分别各自定义指针i和j，跳过X直到第一个L或者R出现，此时判断s[i]和s[j]是否相等，如果不相等则不满足相对顺序，无法完成转换。
XL被LX替换，RX被XR替换，则意味着：
 如果能完成转换，最终end中第N个L的下标，只能小于或等于start中第N个L的下标，即L只允许左移或原地停留。 如果能完成转换，最终end中第M个R的下标，只能大于或等于start中第M个R的下标，即R只允许右移或原地停留。  思路递推 以题目中的start = &amp;ldquo;RXXLRXRXL&amp;rdquo;, end = &amp;ldquo;XRLXXRRLX&amp;quot;为例：</description>
    </item>
    
    <item>
      <title>LeetCode算法手记：658.找到 K 个最接近的元素</title>
      <link>https://Huang-zh.github.io/posts/leetcode658/</link>
      <pubDate>Tue, 05 Sep 2023 21:16:44 +0800</pubDate>
      
      <guid>https://Huang-zh.github.io/posts/leetcode658/</guid>
      <description>给定一个排序好的数组 arr ，两个整数 k 和 x ，从数组中找到最靠近 x（两数之差最小）的 k 个数。返回的结果必须要是按升序排好的。
整数 a 比整数 b 更接近 x 需要满足：
  |a - x| &amp;lt; |b - x| 或者
  |a - x| == |b - x| 且 a &amp;lt; b
  示例 1：
输入：arr = [1,2,3,4,5], k = 4, x = 3
输出：[1,2,3,4]
示例 2：
输入：arr = [1,2,3,4,5], k = 4, x = -1
输出：[1,2,3,4]
提示：
1 &amp;lt;= k &amp;lt;= arr.</description>
    </item>
    
  </channel>
</rss>
