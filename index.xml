<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>此间的少年</title>
    <link>https://Huang-zh.github.io/</link>
    <description>Recent content on 此间的少年</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 29 Aug 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://Huang-zh.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>在泉州</title>
      <link>https://Huang-zh.github.io/posts/20240829/</link>
      <pubDate>Thu, 29 Aug 2024 00:00:00 +0000</pubDate>
      
      <guid>https://Huang-zh.github.io/posts/20240829/</guid>
      <description>整理相册的时候，突然看到一组照片，是2023年春节，自己独自在泉州的时候记录下的风景。
那么，我决定在2024年的8月份，尝试用一种回忆的叙事方式，把镜头拉回在泉州流浪的日子里。
东街路口 我的第一站，从泉州站直接乘坐的士到达东街，它位于泉州的老城区，和游客打卡地西街相连，但鲜有游客会在东街上漫无目的地游荡。
那天下午，从浙江穿越到这座闽南的城市之后，在路口抬起头，便看到了趴在天上的云朵，有一种久违的松弛感，让前一日还在卖命工作的我感到无比的释然。我对自己说，这几天便让自己在这座城市里好好的流浪。
东街楼宇 这里的楼宇，透露着强烈的岭南风格，红砖和下午四点的阳光相交辉映，有一种红尘滚滚的美。
它们所呈现的，不是那种江南水乡小镇上统一规划并修缮后的工业古态，而是真实的、令人觉得质朴而恰到好处的，脚踏实地的古早味。
那些本地的市民，骑着小电驴每日穿梭在这样一片建筑群里，想必也很惬意吧。
红砖房 站在一幢不起眼的两层小楼前，抬头观察了好久，一切都是如此的和谐。
开元寺西塔 终究是逛到了西街，逛到了开元寺，充满历史的西塔，在过去好长一段时间内被不断修缮和重建，得以保留今日的面貌。
西街的爬山虎 开元寺外，有一幢满是爬山虎的奶茶店，点缀在成片的红砖里，很吸睛。不喝奶茶只留影... 暗夜织上天空 逛着逛着，夜色便接踵而至，在西街的某处，举起手机咔嚓一下，留住这一刻，这稀疏平常的傍晚和寻常巷陌。 候阿婆 去最有名的店铺：候阿婆烧肉粽，点了一个瑶柱干贝肉粽，一碗肉燕，很爱吃这家的粽子，但就是有点难消化... 一个人的club 到了晚上八点多，年关将至，路过一家小酒馆，名字已经记不清，只记得我进去玩了玩老板那把陈旧的吉他（烧火棍的质量...），听众是墙上水缸里的🐟。 点了一杯长岛冰茶，准备喝到微醺，此时店里只有我一个顾客。 事实上，整晚只有我一个顾客。也是，年三十的晚上，谁会一个人在酒吧喝酒呢😄。
夜街 九点过，泉州这座古城的大部分建筑进入沉睡，唯有西街上还是灯火通明，游客络绎不绝。 其实并没有什么好逛的，开满了小吃店，各种食物混杂的味道反而让我不适应。
于是便找了一处人少的楼顶，吹吹风。腊月里的闽南，晚风却相对温和，气温维持在十几度，湿度适中，作为一个浙江人，很是羡慕这样的气候条件。
天主堂 东街上的天主堂，此时已经亮起外立面上的霓虹灯。在一片宁静的夜色中，凝望着不远处西街的繁华，它是东街这片为数不多的，能在夜晚吸引游客来驻足片刻的建筑了。
巷尾 我还在继续往不远处漫游，但是已经离开热闹的西街很久。
深深的巷子里，有两个小孩在放烟花，爽朗的笑声伴随着他们的身影一直往远处飘去。此时可能因为酒劲上头，给我一种怎么追都追不上的感觉。
停下脚步，望着他们的背影在烟雾中隐去，却觉得这般光怪陆离的景象，有种似曾相识的感觉。
旧馆驿 酒劲愈发的上头，于是便在这小巷里坐下，夜色静默，红砖静默，小巷深处传来几声犬吠。我的呼吸声越来越重🤧。
瞄了一眼边上这户人家的门牌，这条巷子的名称叫做：旧馆驿。这名字一看就是有故事的，所以上网搜了一下，原来它曾经也是泉州城内很热闹的地段。
元代时期，由于泉州对外交通贸易十分发达，官员、中外商人往来频繁，为了给来泉者提供服务，巷内设有一座专供过往官员或信使更换马匹的馆舍，故名馆驿。明代，馆驿迁往西街头北侧（今泉州影剧院附近）的“驿内巷”。在清代，此巷属万厚铺古榕里，时人讹称为“牛仔驿”。
经过了几个朝代，时光精雕细琢之后，沉睡在21世纪。实在是佩服泉州市容管理的水平和格局，这些古建筑、古名能够得以保留，也仰仗他们的决策。泉州这座城市申遗成功，也确实实至名归。
崇武海边 第二天睡到日晒三竿，醒来后在地图上寻找感兴趣的目的地，想着来一场随性一点的hanging around。
发现大陆的一角有一座古城名叫崇武，是明朝为抵御倭寇入侵所建的一座石头城，离市区两小时车程。于是毅然决定简单吃个午饭，乘坐大巴前往。谁知到达后，古城早已不存在，仅留有城墙，经修缮之后面貌尚可。
遂开始在海边漫无目的游荡，只记得那个下午，躺在礁石上，听着海浪拍打礁石的声音，看着波光粼粼的海面，吹着咸咸的海风，我的内心是无比的放松🏝&amp;hellip;..
躺着... 抛下了所有的烦恼，思绪伴随着远处的海天一线，越飘越远～
西街钟楼 时间过得很快，在海边度过了一个非常闲适的下午。回到市区已是傍晚时分，老钟楼亮起，听人说，它将会在那晚敲响2023年的等一声钟声。陆陆续续的人路过，纷纷围着钟楼打卡纪念。
由于我第三天准备去爬清源山，所以便放弃了和大家一起等待新年的钟声🕛。
第三天，一大早便起床，整装待发前往清源山。
清源山位于丰泽区，从我住的酒店能够乘坐公交，半小时便能到达。它与泉州市山城相依，在山顶能够俯瞰刺桐城全貌。
老君岩 山脚下的老君岩，是大家的打卡地。清源山海拔虽然不算高，但500米的海拔还是让不少人选择在山脚下徘徊。可那群人不包括我，我选择在正月初二，开始我2023的第一次爬山。
毕竟，我相信更好的风光始终要在高处才能欣赏。
装起来了 爬升的过程整体简单，都是石板路台阶。不知不觉便热起来了，脱掉我的始祖鸟外套，来一张背影。
俯瞰刺桐城 这个高度已经可以俯瞰泉州面貌了，我住的酒店，就在不远处那一大片湖的边上。非常推荐，泉州中心假日酒店🏨。
此外何求 继续爬升，路过一座山门，像是一位老友给我留下的灵魂拷问，让我陷入深深的沉思💭。
在这山林之间，鸟鸣声不绝于耳，树木的芬芳让我沉醉，得如此美景，使我从容淡定，此外何求？
百丈坪 终于到达百丈坪，留念一张，这个角度看去，云朵比市区要近，视野逐渐被雾气所笼罩，略显朦胧。
时光列车仍在往回穿梭，未完待续&amp;hellip;&amp;hellip;</description>
    </item>
    
    <item>
      <title>自在如风</title>
      <link>https://Huang-zh.github.io/posts/20240827/</link>
      <pubDate>Tue, 27 Aug 2024 00:00:00 +0000</pubDate>
      
      <guid>https://Huang-zh.github.io/posts/20240827/</guid>
      <description>自在如风这个词，是从我的爱人那里第一次听说的。
遇见她之后，生活也添了些色彩，我开始去了解很多从前没尝试过的事物。
做陶艺，吃舒芙蕾，涉足这座城市里尚未到达过的地方。。。
我开始慢慢的意识到，生活和工作分开的意义，是为了能让自己活得更像一个正常人。
过去没日没夜的加班，为工作倾尽所有貌似并没有带给我什么，反而让我的激情日渐消磨，同时增长了一身肥膘。
现在，当下，我认为我的一生不应该如此。
我们的社会规则，导致了普通人只能活在高压下。同样的，对一个人的评判体系也非常单一，大家都在为了自己的生计而奔波，疲于奔命。
但，尊严是自己给的，学会主宰自己的时间，才是为自己而活。
有时候停下来，聆听自己的内心的真实想法，认真的审视一下当下的处境是否是自己一直向往并追寻的？。
我认为适时的关注内心，这是一种不错的选择，能让自己更有原则的去做任何事情，更加遵循那个真实的自己。
自在如风，就是要做自己的风，吹起自己的梦。</description>
    </item>
    
    <item>
      <title>我的篮球</title>
      <link>https://Huang-zh.github.io/posts/20240819/</link>
      <pubDate>Mon, 19 Aug 2024 00:00:00 +0000</pubDate>
      
      <guid>https://Huang-zh.github.io/posts/20240819/</guid>
      <description>我有一颗篮球，静静的蜷缩在阳台的角落上很久，落了很厚很厚的灰。
我没有心思擦拭它，即使近日里我曾想过去拍拍它，就像我曾经隔三差五那样。
但无比繁琐的工作，却像枷锁一般牢牢的扣住我，耗光了我所有的精力。
我的篮球对我说，你不能再这样下去了。
我对自己说，我不能再这样下去了。
没错，我不能再这样下去了。</description>
    </item>
    
    <item>
      <title>立秋日记</title>
      <link>https://Huang-zh.github.io/posts/20240808/</link>
      <pubDate>Thu, 08 Aug 2024 00:00:00 +0000</pubDate>
      
      <guid>https://Huang-zh.github.io/posts/20240808/</guid>
      <description>甲辰龙年，七月初五，立秋已过。
今年我身处的环境异常寒冷，和当下白日里超过四十摄氏度的气温大相径庭。
眼下的光景，正直盛夏，路上的蝉鸣不绝于耳，它们在这个夏天无疑会燃尽自己的生命。
午间我和同事常常经过的那条河边小路，树木总是郁郁葱葱，两旁齐腰高的野草还在野蛮生长，蓝天白云，光影斑驳。
一片充满活力的景象，正直当打之年。
可是却在这个时节，一次降薪，一场裁员，很多人被迫离开了公司，甚至提前结束了自己的职业生涯。
或许，他们曾经也是初入社会饱含梦想的少年，也在漫长的职业生涯中习得了不少的技能。
到达这一步，这样一个水平，毋庸置疑的，需要长年累月的积累。
可时代的一粒灰，落在任何普通人的头上，都成了一座难以逾越的大山。
我记得前些日子的早会，刚和一位同事沟通完工作上的细节。而午休结束时，他的位置已经被搬空，空旷的像这个人从来没有出现过&amp;hellip;
这是梦想与现实的割裂，是这个大环境的悲哀。身处这样的时代，个体除了随波逐流，已然没有太多的选择余地。
进入下行周期，一切都在往谷底俯冲，那么就好好锻炼，好好生活。
这个世界仍然充满美好的风景，值得我们去涉足，去追逐。</description>
    </item>
    
    <item>
      <title>一些思绪</title>
      <link>https://Huang-zh.github.io/posts/20240612/</link>
      <pubDate>Wed, 12 Jun 2024 00:00:00 +0000</pubDate>
      
      <guid>https://Huang-zh.github.io/posts/20240612/</guid>
      <description>时间来到了2024年，甲辰龙年，正直初夏，芒种才过，雨水很多。
今年他的吉他更加陈旧了，弦枕处的裂痕更深了，那是时间流逝的痕迹。
像是一位老朋友，经历了很多岁月，熟悉的不能再熟悉。
掐指一算，这把琴已经相伴他左右十个年头，如弹指一挥间，书上说的白驹过隙大抵就是如此。
斑驳的护板，锈迹斑斑的品丝，以及褪去颜色的商标。始终不舍得更换任意一个零部件。
无数个深夜，拨动琴弦的时候，无数杂糅的感觉就涌上心头。
那是彼时为梦想付出的努力，为挫折而发泄的负面情绪。
那些无人问津的夜晚，在清亮的月光下倾诉着去成长。

无他，今夜脑子里闪过很多记忆里的画面。跑马灯一般放映着过去的时光，光怪陆离，璀璨耀眼。
所以就在这个夏夜，蝉鸣到来之际，记录一点自己杂乱无章的思绪。吹散在躁动的晚风里。</description>
    </item>
    
    <item>
      <title>LeetCode算法手记：26.删除有序数组中的重复项</title>
      <link>https://Huang-zh.github.io/posts/leetcode26/</link>
      <pubDate>Tue, 19 Sep 2023 21:41:08 +0800</pubDate>
      
      <guid>https://Huang-zh.github.io/posts/leetcode26/</guid>
      <description>给你一个有序数组 nums ，请你原地删除重复出现的元素，使每个元素只出现一次 ，返回删除后数组的新长度。 不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。 说明： 为什么返回数值是整数，但输出的答案是数组呢? 请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。 示例 1： 输入：nums = [1,1,2] 输出：2, nums = [1,2] 解释：函数应该返回新的长度2，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。 示例 2： 输入：nums = [0,0,1,1,1,2,2,3,3,4] 输出：5, nums = [0,1,2,3,4] 解释：函数应该返回新的长度 5，并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。 提示： 0 &amp;lt;= nums.length &amp;lt;= 3*104 -104 &amp;lt;= nums[i] &amp;lt;= 104 nums已按升序排列 思路 定义快慢指针，在快指针从前向后遍历的过程中，如果遇到新的值和当前慢指针的值不同，则慢指针向后递进一格并替换慢指针当前的值为快指针的值，这样就能跳过重复的元素，最后返回慢指针指向的下标+1（从0开始）就能得到正确的答案。
思路递推 以示例二中的 nums = [0,0,1,1,1,2,2,3,3,4]进行递推：
  定义慢指针i，快指针j，初始i = 0，j = 0。</description>
    </item>
    
    <item>
      <title>LeetCode算法手记：1.两数之和</title>
      <link>https://Huang-zh.github.io/posts/leetcode1/</link>
      <pubDate>Tue, 19 Sep 2023 21:27:18 +0800</pubDate>
      
      <guid>https://Huang-zh.github.io/posts/leetcode1/</guid>
      <description>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出和为目标值 target 的那两个整数，并返回它们的数组下标。 你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。你可以按任意顺序返回答案。 示例 1： 输入：nums = [2,7,11,15], target = 9 输出：[0,1] 解释：因为 nums[0] + nums[1] == 9，返回 [0,1] 。 示例 2： 输入：nums = [3,2,4]，target = 6 输出：[1,2] 示例 3： 输入：nums = [3,3]，target = 6 输出：[0,1] 提示： 2 &amp;lt;= nums.length &amp;lt;= 104 -109 &amp;lt;= nums[i] &amp;lt;= 109 -109 &amp;lt;= target &amp;lt;= 109 只会存在一个有效答案  梦开始的地方。
 思路 既然存在nums[i]和nums[j](0 &amp;lt;= i &amp;lt; j &amp;lt; nums.length)，使得nums[i]与nums[j]的和为target。那么可以在遍历nums的过程中，使用字典记录当前target-nums[j]（即nums[i]）的值和对应的下标，那么，在后续遍历至nums[j]的过程中，自然能够通过target-nums[j]获得nums[i]所对应的下标。
思路递推 以实例一中的nums = [2,7,11,15], target = 9为例：</description>
    </item>
    
    <item>
      <title>LeetCode算法手记：986.区间列表的交集</title>
      <link>https://Huang-zh.github.io/posts/leetcode986/</link>
      <pubDate>Sun, 17 Sep 2023 12:10:26 +0800</pubDate>
      
      <guid>https://Huang-zh.github.io/posts/leetcode986/</guid>
      <description>给定两个由一些闭区间组成的列表，firstList 和 secondList ，其中 firstList[i] = [start i, end i] 而 secondList[j] = [start j, end j] 。 每个区间列表都是成对不相交的，并且已经排序 。返回这两个区间列表的交集 。 形式上，闭区间 [a, b]（其中 a &amp;lt;= b）表示实数 x 的集合，而 a &amp;lt;= x &amp;lt;= b 。 两个闭区间的交集是一组实数，要么为空集，要么为闭区间。例如，[1, 3] 和 [2, 4] 的交集为 [2, 3] 。 示例 1： 输入：firstList = [[0,2],[5,10],[13,23],[24,25]], secondList = [[1,5],[8,12],[15,24],[25,26]] 输出：[[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]] 示例 2： 输入：firstList = [[1,3],[5,9]], secondList = [ ] 输出：[ ] 示例 3： 输入：firstList = [], secondList = [[4,8],[10,12]] 输出：[ ] 示例 4： 输入：firstList = [[1,7]], secondList = [[3,10]] 输出：[[3,7]] 提示： 0 &amp;lt;= firstList.</description>
    </item>
    
    <item>
      <title>LeetCode算法手记：1781.所有子字符串美丽值之和</title>
      <link>https://Huang-zh.github.io/posts/leetcode1781/</link>
      <pubDate>Sat, 16 Sep 2023 21:33:23 +0800</pubDate>
      
      <guid>https://Huang-zh.github.io/posts/leetcode1781/</guid>
      <description>一个字符串的美丽值定义为：出现频率最高字符与出现频率最低字符的出现次数之差。 比方说，“abaacc” 的美丽值为 3 - 1 = 2 。 给你一个字符串 s ，请你返回它所有子字符串的美丽值之和。 示例 1： 输入：s = “aabcb” 输出：5 解释：美丽值不为零的字符串包括 [“aab”,“aabc”,“aabcb”,“abcb”,“bcb”] ，每一个字符串的美丽值都为 1。 示例 2： 输入：s = “aabcbaa” 输出：17 提示： 1 &amp;lt;= s.length &amp;lt;= 500 s 只包含小写英文字母。 思路 通过双指针i，j进行双层循环，能够获得字符串s所有的子字符串。
在每一次第二层循环之前，初始化一个长度为26的数组frequency，记录s[i]-s[j]组成的字符串中各字符出现的频率。
同时维护一个maxNum用于记录当前s[i]-s[j]组成的字符串中最高的字符出现频率。
在每一次子字符串获得后，获取s[i]-s[j]组成的字符串中最低的字符出现频率minNum。将maxNum和minNum的差值累加，最后得到result。
思路递推 以实例一中s=&amp;ldquo;aabcb&amp;quot;为例：
 初始i = 0,j = 0。 初始化frequency数组，同时当前子字符串为&amp;quot;a&amp;rdquo;。 s[j] = &amp;lsquo;a&amp;rsquo;，frequency[s[j] - &amp;lsquo;a&amp;rsquo;] = frequency[0] = 1，maxNum = 1(a)，minNum = 1(a)，差值为0，result += 0，此时result = 0。 i = 0,j = 1。 当前子字符串为&amp;quot;aa&amp;quot;。 s[j] = &amp;lsquo;a&amp;rsquo;，frequency[s[j] - &amp;lsquo;a&amp;rsquo;] = frequency[0] = 2，maxNum = 2(a)，minNum = 2(a)，差值为0，result += 0，此时result = 0。 i = 0,j = 2。 当前子字符串为&amp;quot;aab&amp;quot;。 s[j] = &amp;lsquo;b&amp;rsquo;，frequency[s[j] - &amp;lsquo;a&amp;rsquo;] = frequency[1] = 1，maxNum = 2(a)，minNum = 1(b)，差值为1，result += 1，此时result = 1。 i = 0,j = 3。 当前子字符串为&amp;quot;aabc&amp;quot;。 s[j] = &amp;lsquo;c&amp;rsquo;，frequency[s[j] - &amp;lsquo;a&amp;rsquo;] = frequency[2] = 1，maxNum = 2(a)，minNum = 1(b/c)，差值为1，result += 1，此时result = 2.</description>
    </item>
    
    <item>
      <title>LeetCode算法手记：1764.通过连接另一个数组的子数组得到一个数组</title>
      <link>https://Huang-zh.github.io/posts/leetcode1764/</link>
      <pubDate>Sat, 16 Sep 2023 20:35:38 +0800</pubDate>
      
      <guid>https://Huang-zh.github.io/posts/leetcode1764/</guid>
      <description>给你一个长度为 n 的二维整数数组 groups，同时给你一个整数数组 nums 。 你是否可以从 nums 中选出 n 个不相交的子数组，使得第 i 个子数组与 groups[i] （下标从 0 开始）完全相同，且如果 i &amp;gt; 0 ，那么第 (i-1) 个子数组在 nums 中出现的位置在第 i 个子数组前面。（也就是说，这些子数组在 nums 中出现的顺序需要与 groups 顺序相同） 如果你可以找出这样的 n 个子数组，请你返回 true，否则返回 false。 如果不存在下标为 k 的元素 nums[k] 属于不止一个子数组，就称这些子数组是不相交的。子数组指的是原数组中连续元素组成的一个序列。 示例 1： 输入：groups = [[1,-1,-1],[3,-2,0]], nums = [1,-1,0,1,-1,-1,3,-2,0] 输出：true 解释：你可以分别在 nums 中选出第 0 个子数组 [1,-1,-1] 和第 1 个子数组 [3,-2,0] 。 这两个子数组是不相交的，因为它们没有任何共同的元素。 示例 2： 输入：groups = [[10,-2],[1,2,3,4]], nums = [1,2,3,4,10,-2] 输出：false 解释：选择子数组 [1,2,3,4] 和 [10,-2] 是不正确的，因为它们出现的顺序与 groups 中顺序不同。[10,-2] 必须出现在 [1,2,3,4] 之前。 示例 3： 输入：groups = [[1,2,3],[3,4]], nums = [7,7,1,2,3,4,7,7] 输出：false 解释：选择子数组 [1,2,3] 和 [3,4,] 是不正确的，因为它们不是不相交子数组。它们有一个共同的元素 nums[4] （下标从 0 开始）。 提示： groups.</description>
    </item>
    
    <item>
      <title>LeetCode算法手记：807.情感丰富的文字</title>
      <link>https://Huang-zh.github.io/posts/leetcode807/</link>
      <pubDate>Mon, 11 Sep 2023 22:12:46 +0800</pubDate>
      
      <guid>https://Huang-zh.github.io/posts/leetcode807/</guid>
      <description>有时候人们会用重复写一些字母来表示额外的感受，比如 “hello” -&amp;gt; “heeellooo”, “hi” -&amp;gt; “hiii”。我们将相邻字母都相同的一串字符定义为相同字母组，例如：“h”, “eee”, “ll”, “ooo” 对于一个给定的字符串 S ，如果另一个单词能够通过将一些字母组扩张从而使其和 S 相同，我们将这个单词定义为可扩张的（stretchy）。扩张操作定义如下：选择一个字母组（包含字母 c ），然后往其中添加相同的字母 c 使其长度达到 3 或以上 例如，以 “hello” 为例，我们可以对字母组 “o” 扩张得到 “hellooo”，但是无法以同样的方法得到 “helloo” 因为字母组 “oo” 长度小于 3。此外，我们可以进行另一种扩张 “ll” -&amp;gt; “lllll” 以获得 “helllllooo”。如果 S = “helllllooo”，那么查询词 “hello” 是可扩张的，因为可以对它执行这两种扩张操作使得 query = “hello” -&amp;gt; “hellooo” -&amp;gt; “helllllooo” = 输入一组查询单词，输出其中可扩张的单词数量 示例 输入 S = “heeellooo” words = [“hello”, “hi”, “helo”] 输出： 解释 我们能通过扩张 “hello” 的 “e” 和 “o” 来得到 “heeellooo” 我们不能通过扩张 “helo” 来得到 “heeellooo” 因为 “ll” 的长度小于 3 提示 0 &amp;lt;= len(S) &amp;lt;= 100 0 &amp;lt;= len(words) &amp;lt;= 100 0 &amp;lt;= len(words[i]) &amp;lt;= 100 S 和所有在 words 中的单词都只由小写字母组成 思路 如果s能由word扩展而来，则遵守以下的判断原则：</description>
    </item>
    
    <item>
      <title>LeetCode算法手记：792.匹配子序列的单词数</title>
      <link>https://Huang-zh.github.io/posts/leetcode792/</link>
      <pubDate>Sat, 09 Sep 2023 21:02:25 +0800</pubDate>
      
      <guid>https://Huang-zh.github.io/posts/leetcode792/</guid>
      <description>给定字符串 s 和字符串数组 words, 返回 words[i] 中是 s 的子序列的单词个数。 字符串的子序列是从原始字符串中生成的新字符串，可以从中删去一些字符(可以是 none)，而不改变其余字符的相对顺序。 例如， “ace” 是 “abcde” 的子序列。 示例 1： 输入: s = “abcde”, words = [“a”,“bb”,“acd”,“ace”] 输出: 3 解释: 有三个是 s 的子序列的单词: “a”, “acd”, “ace”。 示例 2： 输入: s = “dsahjpjauf”, words = [“ahjpjau”,“ja”,“ahbwzgqnuk”,“tnmlanowax”] 输出: 2 提示： 1 &amp;lt;= s.length &amp;lt;= 5 * 104 1 &amp;lt;= words.length &amp;lt;= 5000 1 &amp;lt;= words[i].length &amp;lt;= 50 words[i]和 s 都只由小写字母组成。 思路 对于字符串s和字符串t，若s为t的子序列，则需要满足以下几点：
 s中的所有字符的相对顺序，必须和这些字符在t中出现的相对顺序保持一致，例如s为ace，t为abcde，则s为t的子序列，此时a、c、e三个字符在两个字符串中出现的相对顺序保持一致，t可以通过删除b和d两个字符来得到s。 若s由一个或多个相同字符组成，那么该字符在s中出现的次数必然小于等于t中该字符出现的次数，例如字符串a、aa、aaa均为字符串aabade的子序列，但aaaa不是字符串aabade的子序列。  那么，维护一个数组，记录下原字符串t中每一个字符t[i]出现的位置i，然后对于要判断子序列的样本s，遍历s的每个字符，判断以下几点：</description>
    </item>
    
    <item>
      <title>LeetCode算法手记：777.在LR字符串中交换相邻字符</title>
      <link>https://Huang-zh.github.io/posts/leetcode777/</link>
      <pubDate>Thu, 07 Sep 2023 19:02:25 +0800</pubDate>
      
      <guid>https://Huang-zh.github.io/posts/leetcode777/</guid>
      <description>在一个由 ‘L’ , ‘R’ 和 ‘X’ 三个字符组成的字符串（例如&amp;#34;RXXLRXRXL&amp;#34;）中进行移动操作。 一次移动操作指用一个 “LX” 替换一个 “XL”，或者用一个 “XR” 替换一个 “RX”。 现给定起始字符串 start 和结束字符串 end，请编写代码，当且仅当存在一系列移动操作使得 start 可以转换成 end 时， 返回 True。 输入：start = &amp;#34;RXXLRXRXL&amp;#34;, end = &amp;#34;XRLXXRRLX&amp;#34; 输出：True 解释： 我们可以通过以下几步将 start 转换成 end： RXXLRXRXL -&amp;gt; XRXLRXRXL -&amp;gt; XRLXRXRXL -&amp;gt; XRLXXRRXL -&amp;gt; XRLXXRRLX 提示： 1 &amp;lt;= len(start) = len(end) &amp;lt;= 10000。 start 和 end 中的字符串仅限于’L’, ‘R’和’X’。 思路 如果一个start可以完成到end的转换，那么，两个字符串中L和R的相对位置一定会保持一致。
可以在start和end上分别各自定义指针i和j，跳过X直到第一个L或者R出现，此时判断s[i]和s[j]是否相等，如果不相等则不满足相对顺序，无法完成转换。
XL被LX替换，RX被XR替换，则意味着：
 如果能完成转换，最终end中第N个L的下标，只能小于或等于start中第N个L的下标，即L只允许左移或原地停留。 如果能完成转换，最终end中第M个R的下标，只能大于或等于start中第M个R的下标，即R只允许右移或原地停留。  思路递推 以题目中的start = &amp;ldquo;RXXLRXRXL&amp;rdquo;, end = &amp;ldquo;XRLXXRRLX&amp;quot;为例：</description>
    </item>
    
    <item>
      <title>LeetCode算法手记：658.找到 K 个最接近的元素</title>
      <link>https://Huang-zh.github.io/posts/leetcode658/</link>
      <pubDate>Tue, 05 Sep 2023 21:16:44 +0800</pubDate>
      
      <guid>https://Huang-zh.github.io/posts/leetcode658/</guid>
      <description>给定一个排序好的数组 arr ，两个整数 k 和 x ，从数组中找到最靠近 x（两数之差最小）的 k 个数。返回的结果必须要是按升序排好的。
整数 a 比整数 b 更接近 x 需要满足：
  |a - x| &amp;lt; |b - x| 或者
  |a - x| == |b - x| 且 a &amp;lt; b
  示例 1：
输入：arr = [1,2,3,4,5], k = 4, x = 3
输出：[1,2,3,4]
示例 2：
输入：arr = [1,2,3,4,5], k = 4, x = -1
输出：[1,2,3,4]
提示：
1 &amp;lt;= k &amp;lt;= arr.</description>
    </item>
    
    <item>
      <title>Redis存储原理剖析&lt;三&gt;：key的惰性删除--异步删除策略</title>
      <link>https://Huang-zh.github.io/posts/redis3/</link>
      <pubDate>Fri, 01 Sep 2023 10:10:44 +0800</pubDate>
      
      <guid>https://Huang-zh.github.io/posts/redis3/</guid>
      <description>前面我们介绍了key在惰性删除时同步删除过程的实现，具体可见：
 Redis存储原理剖析&amp;lt;二&amp;gt;：key的惰性删除&amp;ndash;同步删除策略  本篇文章，我们将继续探索惰性删除时，key的异步删除过程的实现。
6.1.2 异步删除 直接看异步删除的代码：
#define LAZYFREE_THRESHOLD 64 int dbAsyncDelete(redisDb *db, robj *key) { // 第一步，进行expireDict的删除，仍旧保留dataDict中的dictEntry  if (dictSize(db-&amp;gt;expires) &amp;gt; 0) dictDelete(db-&amp;gt;expires,key-&amp;gt;ptr); // 第二步，进行unlink操作，只是简单的把dataDict内部hash桶里的链表解链  // 内部调用的dictGenericDelete函数在同步删除代码中分析过，区别是此处nofree传入的值为1，即不进行内存释放  dictEntry *de = dictUnlink(db-&amp;gt;dict,key-&amp;gt;ptr); if (de) { robj *val = dictGetVal(de); // 计算当前释放value内存需要的开销，根据value的类型会得到不同的开销  size_t free_effort = lazyfreeGetFreeEffort(val); // 第三步，如果开销过大，并且当前引用计数为1，添加任务调度进行异步释放value  if (free_effort &amp;gt; LAZYFREE_THRESHOLD &amp;amp;&amp;amp; val-&amp;gt;refcount == 1) { atomicIncr(lazyfree_objects,1); bioCreateBackgroundJob(BIO_LAZY_FREE,val,NULL,NULL); dictSetVal(db-&amp;gt;dict,de,NULL); } } // 如果此时dictEntry仍未被释放/或是开销不大，触发兜底机制，直接调用dictFreeUnlinkedEntry进行key和value以及dictEntry的释放  // dictFreeUnlinkedEntry内部仍旧调用dictFreeKey，dictFreeVal，zfree，在同步删除中已经分析过  if (de) { dictFreeUnlinkedEntry(db-&amp;gt;dict,de); //集群模式下，寻找对应的slot进行remove操作  if (server.</description>
    </item>
    
    <item>
      <title>Redis存储原理剖析&lt;二&gt;：key的惰性删除--同步删除策略</title>
      <link>https://Huang-zh.github.io/posts/redis2/</link>
      <pubDate>Tue, 29 Aug 2023 19:10:44 +0800</pubDate>
      
      <guid>https://Huang-zh.github.io/posts/redis2/</guid>
      <description>6. key删除策略 redis中，对于过期key的淘汰机制，可以分为以下两种：
 定期删除：一种主动删除策略，定期去轮询存储了key的过期时间的字典。 惰性删除：在寻找/写入dictEntry的时候判断是否过期，属于被动删除策略。  6.1 惰性删除 惰性删除的代码，入口在db.c中的expireIfNeeded，该方法由执行查找命令或写入命令的方法调用，在执行真正的命令之前，做key的删除判断以及删除操作：
int expireIfNeeded(redisDb *db, robj *key) { //设定了过期时间且未过期的key会在这一步直接返回  if (!keyIsExpired(db,key)) return 0; //当前redis节点过期了，但是存在master节点。  //意味着当前属于slave节点，返回1，由master执行删除后同步至slave  if (server.masterhost != NULL) return 1; //过期key的数量+1  server.stat_expiredkeys++; //把过期的key的消息传播到slave，同时将该key的删除命令写入到aof文件  propagateExpire(db,key,server.lazyfree_lazy_expire); //通知监听了该key的客户端，通知key的过期事件  notifyKeyspaceEvent(NOTIFY_EXPIRED, &amp;#34;expired&amp;#34;,key,db-&amp;gt;id); //根据设定的删除方式，决定采用同步删除还是异步删除  return server.lazyfree_lazy_expire ? dbAsyncDelete(db,key) : dbSyncDelete(db,key); } int keyIsExpired(redisDb *db, robj *key) { //获得设定的过期时间戳  mstime_t when = getExpire(db,key); mstime_t now; //如果时间戳小于0，说明没有设置过期时间  if (when &amp;lt; 0) return 0; //loading状态下不允许进行过期判断  if (server.</description>
    </item>
    
    <item>
      <title>Redis存储原理剖析&lt;一&gt;：存储模型和基础命令解析</title>
      <link>https://Huang-zh.github.io/posts/redis1/</link>
      <pubDate>Fri, 25 Aug 2023 22:10:44 +0800</pubDate>
      
      <guid>https://Huang-zh.github.io/posts/redis1/</guid>
      <description>1. 前言  2022年，是充满挑战性的一年。
这一年，我选择离开了自己熟悉的信息化领域，把精力投向了互联网金融。
在22年的后半程，鉴于平台和团队所带来的效应，个人也在高频交易业务领域吸收了足够多的知识。过程中，认知的颠覆和自我的怀疑常常是共存。
所幸这些经历最后都能够作为养分，支撑我一步步走到当下。
这个系列的文章，初稿实际上在22年的年底就已经完成。但碍于平日里事务繁忙兼琐事繁多，使得日子一再蹉跎，一直推迟到23年过半，才开始尝试去重新梳理其中的些许细节，并准备将它发表在博客里。
初稿原本诞生于22年在高频交易系统的技术选型、架构搭建和研发过程中。当时和团队里优秀的工程师们对redis尝试不断地深入探索，试图吸收其在架构设计方面的优点，并思考对于交易业务领域可以如何进行二次开发以达到发挥极致性能的目的，从而形成了这份初稿。当然，由于保密机制，文档中原先存在的定制化方案和敏感信息已去除，但对redis架构有兴趣的朋友，仍然可以通过这个系列洞悉redis在设计方面的优点。
过程中难免会因为篇幅原因删除细枝末节的代码，这也是为更好的去掌握主流程，让整个文档脉络更清晰而做的取舍。若对内容有异议，可通过邮箱联系我。
 huangzh 2023.08.25    阅读本文档存在一些门槛，不建议新手直接阅读，建议大家先掌握以下必要的技能：  良好的c语言基础。 掌握多路复用编程网络模型。 对操作系统中io的认知。 学习并调试过其他常用中间件代码的经验。 耐心。   redis的存储模型，是典型的hash存储。即一个key对应一个或多个值，这在redis支持的数据类型有着明确的体现，redis一共支持五种类型的数据结构存储：
 string hash（又称为set） list zset zlist  从广义上来看，这五种类型数据的存储都可以用key-value形式去实现，无非是value所对应的值的形式有所不同。
 2. hash存储引擎 提到redis，不得不先提及hash存储引擎的概念，一个典型的hash存储引擎原理如下图所示：
这种基于hash的存储方式，与传统关系性数据库有着非常大的区别。
在内存中通过一定的hash算法均匀的散列key值，使不同的key均匀的散落在hashtable的不同栏位。
由于相同的key可能对应不同的value，因此hashtable每个栏位实际上采用挂载链表的形式存储每一个value节点。
每个value节点中，包含三个最重要的元素：
 position：value的起始位置 size：value对应的长度 fileid：value存储的文件标识符  当然，节点中当然可以包含其他额外的值，不同软件有着自己的额外添加的元素。
但是，不约而外的，通过这三个必要的元素，可以找到key对应的value究竟存储于哪个文件，以及value在该文件中对应的起始位置和长度。
通过这种方式，实际上可以很方便的查找key-value元素。同时，这种方式将hashtable中每个栏位的写入由随机写（hash值随机）转变为顺序写（每个栏位的数据只需要顺序往该栏位对应的文件中添加即可，通过节点链表顺序连接），大大提高了写入的效率。
同时，使用hash存储引擎还存在以下特点：
 时间复杂度o(1)。 满足“=”，“IN”条件查询。 不支持范围查询，比如between关键字。 不支持order by关键字排序。   3. redis数据模型 我们在描述一种存储类型的中间件时，无论它是缓存类的存储，亦或是传统写入磁盘的关系性数据库存储，都存在它们各自最基础也是最核心的数据存储模型，这里我个人习惯把它叫做数据模型，基于数据模型才能实现上层复杂的结构存储。
redis的数据模型，可以把它看成字典，一种基于key-value存储的数据结构，底层由数组实现的基于hashtable的拉链法存储。
以下是从redis源码中提取的四种以此从外到内的核心数据模型，其中redisDb为最外层，抽丝剥茧之后，不难发现真正的数据存储于底层的dictEntry：
typedef struct redisDb { dict *dict; /* The keyspace for this DB */ dict *expires; /* Timeout of keys with a timeout set */ dict *blocking_keys; /* Keys with clients waiting for data (BLPOP)*/ dict *ready_keys; /* Blocked keys that received a PUSH */ dict *watched_keys; /* WATCHED keys for MULTI/EXEC CAS */ int id; /* Database ID */ long long avg_ttl; /* Average TTL, just for stats */ list *defrag_later; /* List of key names to attempt to defrag one by one, gradually.</description>
    </item>
    
    <item>
      <title>浮生如梦</title>
      <link>https://Huang-zh.github.io/posts/firstpost/</link>
      <pubDate>Thu, 24 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://Huang-zh.github.io/posts/firstpost/</guid>
      <description>午月间
安逸的人
情不禁的人
得意的人
忘形的人
悻悻而归的人
痴心的人
醉醺醺的人
神隐的人
驾五色龙船的人
将信疑的人
无我的人
喜乐的人
奔波游离的人
失约的人
摇摇晃的人
妙悟的人
var config = { startOnLoad:true, theme:&#39;neutral&#39;, align:&#39;left&#39; }; mermaid.initialize(config);  pie title French Words I Know &#34;Merde&#34; : 50 &#34;Oui&#34; : 35 &#34;Alors&#34; : 10 &#34;Non&#34; : 5  -- </description>
    </item>
    
    <item>
      <title>简介</title>
      <link>https://Huang-zh.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Huang-zh.github.io/about/</guid>
      <description>一想全是问题，一做全是答案。
  -- &amp;ensp; 关于我  1997年，处女座，祖籍浙江温州，现坐标浙江杭州。 互联网金融民工，从事领域：高频交易、融资融券、统一账户、交易风控。 业余时间打篮球，玩吉他，爬山&amp;hellip; 重度咖啡瘾患者。  2023 年度计划  ✅西湖群山穿越⛰️ ✅独自旅行🚄 ✅公司级优秀员工🏆 ✅涨薪💰  2024 年度计划  🟢和爱人去一次千岛湖⛱ 🟢减脂🏀 🟢买车🚗 🟢&amp;hellip;  常用好物 👨‍💻  📱：iPhone 13 Pro 💻：MacBook Pro M1 🎧：AirPods Pro 🎸：Fender Player Series Stratocaster、Fender Acoustic CD140SCE、YAMAHA JR2S 👟：Air Jordan 1 Retro Black Toe
建站鸣谢 🙏  Alibaba Cloud ☁️ Hugo Blog Github Pages Visual Studio Code IntelliJ IDEA、IntelliJ DataGrip 路过图床  和我联系 📧  huangzhenghao831@163.</description>
    </item>
    
  </channel>
</rss>
