<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>此间的少年</title>
    <link>https://Huang-zh.github.io/</link>
    <description>Recent content on 此间的少年</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 16 Sep 2023 21:33:23 +0800</lastBuildDate><atom:link href="https://Huang-zh.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LeetCode算法手记：1781.所有子字符串美丽值之和</title>
      <link>https://Huang-zh.github.io/posts/leetcode1781/</link>
      <pubDate>Sat, 16 Sep 2023 21:33:23 +0800</pubDate>
      
      <guid>https://Huang-zh.github.io/posts/leetcode1781/</guid>
      <description>一个字符串的美丽值定义为：出现频率最高字符与出现频率最低字符的出现次数之差。 比方说，“abaacc” 的美丽值为 3 - 1 = 2 。 给你一个字符串 s ，请你返回它所有子字符串的美丽值之和。 示例 1： 输入：s = “aabcb” 输出：5 解释：美丽值不为零的字符串包括 [“aab”,“aabc”,“aabcb”,“abcb”,“bcb”] ，每一个字符串的美丽值都为 1。 示例 2： 输入：s = “aabcbaa” 输出：17 提示： 1 &amp;lt;= s.length &amp;lt;= 500 s 只包含小写英文字母。 思路 通过双指针i，j进行双层循环，能够获得字符串s所有的子字符串。
在每一次第二层循环之前，初始化一个长度为26的数组frequency，记录s[i]-s[j]组成的字符串中各字符出现的频率。
同时维护一个maxNum用于记录当前s[i]-s[j]组成的字符串中最高的字符出现频率。
在每一次子字符串获得后，获取s[i]-s[j]组成的字符串中最低的字符出现频率minNum。将maxNum和minNum的差值累加，最后得到result。
思路递推 以实例一中s=&amp;ldquo;aabcb&amp;quot;为例：
 初始i = 0,j = 0。 初始化frequency数组，同时当前子字符串为&amp;quot;a&amp;rdquo;。 s[j] = &amp;lsquo;a&amp;rsquo;，frequency[s[j] - &amp;lsquo;a&amp;rsquo;] = frequency[0] = 1，maxNum = 1(a)，minNum = 1(a)，差值为0，result += 0，此时result = 0。 i = 0,j = 1。 当前子字符串为&amp;quot;aa&amp;quot;。 s[j] = &amp;lsquo;a&amp;rsquo;，frequency[s[j] - &amp;lsquo;a&amp;rsquo;] = frequency[0] = 2，maxNum = 2(a)，minNum = 2(a)，差值为0，result += 0，此时result = 0。 i = 0,j = 2。 当前子字符串为&amp;quot;aab&amp;quot;。 s[j] = &amp;lsquo;b&amp;rsquo;，frequency[s[j] - &amp;lsquo;a&amp;rsquo;] = frequency[1] = 1，maxNum = 2(a)，minNum = 1(b)，差值为1，result += 1，此时result = 1。 i = 0,j = 3。 当前子字符串为&amp;quot;aabc&amp;quot;。 s[j] = &amp;lsquo;c&amp;rsquo;，frequency[s[j] - &amp;lsquo;a&amp;rsquo;] = frequency[2] = 1，maxNum = 2(a)，minNum = 1(b/c)，差值为1，result += 1，此时result = 2.</description>
    </item>
    
    <item>
      <title>LeetCode算法手记：1764.通过连接另一个数组的子数组得到一个数组</title>
      <link>https://Huang-zh.github.io/posts/leetcode1764/</link>
      <pubDate>Sat, 16 Sep 2023 20:35:38 +0800</pubDate>
      
      <guid>https://Huang-zh.github.io/posts/leetcode1764/</guid>
      <description>给你一个长度为 n 的二维整数数组 groups，同时给你一个整数数组 nums 。 你是否可以从 nums 中选出 n 个不相交的子数组，使得第 i 个子数组与 groups[i] （下标从 0 开始）完全相同，且如果 i &amp;gt; 0 ，那么第 (i-1) 个子数组在 nums 中出现的位置在第 i 个子数组前面。（也就是说，这些子数组在 nums 中出现的顺序需要与 groups 顺序相同） 如果你可以找出这样的 n 个子数组，请你返回 true，否则返回 false。 如果不存在下标为 k 的元素 nums[k] 属于不止一个子数组，就称这些子数组是不相交的。子数组指的是原数组中连续元素组成的一个序列。 示例 1： 输入：groups = [[1,-1,-1],[3,-2,0]], nums = [1,-1,0,1,-1,-1,3,-2,0] 输出：true 解释：你可以分别在 nums 中选出第 0 个子数组 [1,-1,-1] 和第 1 个子数组 [3,-2,0] 。 这两个子数组是不相交的，因为它们没有任何共同的元素。 示例 2： 输入：groups = [[10,-2],[1,2,3,4]], nums = [1,2,3,4,10,-2] 输出：false 解释：选择子数组 [1,2,3,4] 和 [10,-2] 是不正确的，因为它们出现的顺序与 groups 中顺序不同。[10,-2] 必须出现在 [1,2,3,4] 之前。 示例 3： 输入：groups = [[1,2,3],[3,4]], nums = [7,7,1,2,3,4,7,7] 输出：false 解释：选择子数组 [1,2,3] 和 [3,4,] 是不正确的，因为它们不是不相交子数组。它们有一个共同的元素 nums[4] （下标从 0 开始）。 提示： groups.</description>
    </item>
    
    <item>
      <title>LeetCode算法手记：807.情感丰富的文字</title>
      <link>https://Huang-zh.github.io/posts/leetcode807/</link>
      <pubDate>Mon, 11 Sep 2023 22:12:46 +0800</pubDate>
      
      <guid>https://Huang-zh.github.io/posts/leetcode807/</guid>
      <description>有时候人们会用重复写一些字母来表示额外的感受，比如 “hello” -&amp;gt; “heeellooo”, “hi” -&amp;gt; “hiii”。我们将相邻字母都相同的一串字符定义为相同字母组，例如：“h”, “eee”, “ll”, “ooo” 对于一个给定的字符串 S ，如果另一个单词能够通过将一些字母组扩张从而使其和 S 相同，我们将这个单词定义为可扩张的（stretchy）。扩张操作定义如下：选择一个字母组（包含字母 c ），然后往其中添加相同的字母 c 使其长度达到 3 或以上 例如，以 “hello” 为例，我们可以对字母组 “o” 扩张得到 “hellooo”，但是无法以同样的方法得到 “helloo” 因为字母组 “oo” 长度小于 3。此外，我们可以进行另一种扩张 “ll” -&amp;gt; “lllll” 以获得 “helllllooo”。如果 S = “helllllooo”，那么查询词 “hello” 是可扩张的，因为可以对它执行这两种扩张操作使得 query = “hello” -&amp;gt; “hellooo” -&amp;gt; “helllllooo” = 输入一组查询单词，输出其中可扩张的单词数量 示例 输入 S = “heeellooo” words = [“hello”, “hi”, “helo”] 输出： 解释 我们能通过扩张 “hello” 的 “e” 和 “o” 来得到 “heeellooo” 我们不能通过扩张 “helo” 来得到 “heeellooo” 因为 “ll” 的长度小于 3 提示 0 &amp;lt;= len(S) &amp;lt;= 100 0 &amp;lt;= len(words) &amp;lt;= 100 0 &amp;lt;= len(words[i]) &amp;lt;= 100 S 和所有在 words 中的单词都只由小写字母组成 思路 如果s能由word扩展而来，则遵守以下的判断原则：</description>
    </item>
    
    <item>
      <title>LeetCode算法手记：792.匹配子序列的单词数</title>
      <link>https://Huang-zh.github.io/posts/leetcode792/</link>
      <pubDate>Sat, 09 Sep 2023 21:02:25 +0800</pubDate>
      
      <guid>https://Huang-zh.github.io/posts/leetcode792/</guid>
      <description>给定字符串 s 和字符串数组 words, 返回 words[i] 中是 s 的子序列的单词个数。 字符串的子序列是从原始字符串中生成的新字符串，可以从中删去一些字符(可以是 none)，而不改变其余字符的相对顺序。 例如， “ace” 是 “abcde” 的子序列。 示例 1： 输入: s = “abcde”, words = [“a”,“bb”,“acd”,“ace”] 输出: 3 解释: 有三个是 s 的子序列的单词: “a”, “acd”, “ace”。 示例 2： 输入: s = “dsahjpjauf”, words = [“ahjpjau”,“ja”,“ahbwzgqnuk”,“tnmlanowax”] 输出: 2 提示： 1 &amp;lt;= s.length &amp;lt;= 5 * 104 1 &amp;lt;= words.length &amp;lt;= 5000 1 &amp;lt;= words[i].length &amp;lt;= 50 words[i]和 s 都只由小写字母组成。 思路 对于字符串s和字符串t，若s为t的子序列，则需要满足以下几点：
 s中的所有字符的相对顺序，必须和这些字符在t中出现的相对顺序保持一致，例如s为ace，t为abcde，则s为t的子序列，此时a、c、e三个字符在两个字符串中出现的相对顺序保持一致，t可以通过删除b和d两个字符来得到s。 若s由一个或多个相同字符组成，那么该字符在s中出现的次数必然小于等于t中该字符出现的次数，例如字符串a、aa、aaa均为字符串aabade的子序列，但aaaa不是字符串aabade的子序列。  那么，维护一个数组，记录下原字符串t中每一个字符t[i]出现的位置i，然后对于要判断子序列的样本s，遍历s的每个字符，判断以下几点：</description>
    </item>
    
    <item>
      <title>LeetCode算法手记：777.在LR字符串中交换相邻字符</title>
      <link>https://Huang-zh.github.io/posts/leetcode777/</link>
      <pubDate>Thu, 07 Sep 2023 19:02:25 +0800</pubDate>
      
      <guid>https://Huang-zh.github.io/posts/leetcode777/</guid>
      <description>在一个由 ‘L’ , ‘R’ 和 ‘X’ 三个字符组成的字符串（例如&amp;#34;RXXLRXRXL&amp;#34;）中进行移动操作。 一次移动操作指用一个 “LX” 替换一个 “XL”，或者用一个 “XR” 替换一个 “RX”。 现给定起始字符串 start 和结束字符串 end，请编写代码，当且仅当存在一系列移动操作使得 start 可以转换成 end 时， 返回 True。 输入：start = &amp;#34;RXXLRXRXL&amp;#34;, end = &amp;#34;XRLXXRRLX&amp;#34; 输出：True 解释： 我们可以通过以下几步将 start 转换成 end： RXXLRXRXL -&amp;gt; XRXLRXRXL -&amp;gt; XRLXRXRXL -&amp;gt; XRLXXRRXL -&amp;gt; XRLXXRRLX 提示： 1 &amp;lt;= len(start) = len(end) &amp;lt;= 10000。 start 和 end 中的字符串仅限于’L’, ‘R’和’X’。 思路 如果一个start可以完成到end的转换，那么，两个字符串中L和R的相对位置一定会保持一致。
可以在start和end上分别各自定义指针i和j，跳过X直到第一个L或者R出现，此时判断s[i]和s[j]是否相等，如果不相等则不满足相对顺序，无法完成转换。
XL被LX替换，RX被XR替换，则意味着：
 如果能完成转换，最终end中第N个L的下标，只能小于或等于start中第N个L的下标，即L只允许左移或原地停留。 如果能完成转换，最终end中第M个R的下标，只能大于或等于start中第M个R的下标，即R只允许右移或原地停留。  思路递推 以题目中的start = &amp;ldquo;RXXLRXRXL&amp;rdquo;, end = &amp;ldquo;XRLXXRRLX&amp;quot;为例：</description>
    </item>
    
    <item>
      <title>LeetCode算法手记：658.找到 K 个最接近的元素</title>
      <link>https://Huang-zh.github.io/posts/leetcode658/</link>
      <pubDate>Tue, 05 Sep 2023 21:16:44 +0800</pubDate>
      
      <guid>https://Huang-zh.github.io/posts/leetcode658/</guid>
      <description>给定一个排序好的数组 arr ，两个整数 k 和 x ，从数组中找到最靠近 x（两数之差最小）的 k 个数。返回的结果必须要是按升序排好的。
整数 a 比整数 b 更接近 x 需要满足：
  |a - x| &amp;lt; |b - x| 或者
  |a - x| == |b - x| 且 a &amp;lt; b
  示例 1：
输入：arr = [1,2,3,4,5], k = 4, x = 3
输出：[1,2,3,4]
示例 2：
输入：arr = [1,2,3,4,5], k = 4, x = -1
输出：[1,2,3,4]
提示：
1 &amp;lt;= k &amp;lt;= arr.</description>
    </item>
    
    <item>
      <title>Redis存储原理剖析&lt;三&gt;：key的惰性删除--异步删除策略</title>
      <link>https://Huang-zh.github.io/posts/redis3/</link>
      <pubDate>Fri, 01 Sep 2023 10:10:44 +0800</pubDate>
      
      <guid>https://Huang-zh.github.io/posts/redis3/</guid>
      <description>前面我们介绍了key在惰性删除时同步删除过程的实现，具体可见：
 Redis存储原理剖析&amp;lt;二&amp;gt;：key的惰性删除&amp;ndash;同步删除策略  本篇文章，我们将继续探索惰性删除时，key的异步删除过程的实现。
6.1.2 异步删除 直接看异步删除的代码：
#define LAZYFREE_THRESHOLD 64 int dbAsyncDelete(redisDb *db, robj *key) { // 第一步，进行expireDict的删除，仍旧保留dataDict中的dictEntry  if (dictSize(db-&amp;gt;expires) &amp;gt; 0) dictDelete(db-&amp;gt;expires,key-&amp;gt;ptr); // 第二步，进行unlink操作，只是简单的把dataDict内部hash桶里的链表解链  // 内部调用的dictGenericDelete函数在同步删除代码中分析过，区别是此处nofree传入的值为1，即不进行内存释放  dictEntry *de = dictUnlink(db-&amp;gt;dict,key-&amp;gt;ptr); if (de) { robj *val = dictGetVal(de); // 计算当前释放value内存需要的开销，根据value的类型会得到不同的开销  size_t free_effort = lazyfreeGetFreeEffort(val); // 第三步，如果开销过大，并且当前引用计数为1，添加任务调度进行异步释放value  if (free_effort &amp;gt; LAZYFREE_THRESHOLD &amp;amp;&amp;amp; val-&amp;gt;refcount == 1) { atomicIncr(lazyfree_objects,1); bioCreateBackgroundJob(BIO_LAZY_FREE,val,NULL,NULL); dictSetVal(db-&amp;gt;dict,de,NULL); } } // 如果此时dictEntry仍未被释放/或是开销不大，触发兜底机制，直接调用dictFreeUnlinkedEntry进行key和value以及dictEntry的释放  // dictFreeUnlinkedEntry内部仍旧调用dictFreeKey，dictFreeVal，zfree，在同步删除中已经分析过  if (de) { dictFreeUnlinkedEntry(db-&amp;gt;dict,de); //集群模式下，寻找对应的slot进行remove操作  if (server.</description>
    </item>
    
    <item>
      <title>Redis存储原理剖析&lt;二&gt;：key的惰性删除--同步删除策略</title>
      <link>https://Huang-zh.github.io/posts/redis2/</link>
      <pubDate>Tue, 29 Aug 2023 19:10:44 +0800</pubDate>
      
      <guid>https://Huang-zh.github.io/posts/redis2/</guid>
      <description>6. key删除策略 redis中，对于过期key的淘汰机制，可以分为以下两种：
 定期删除：一种主动删除策略，定期去轮询存储了key的过期时间的字典。 惰性删除：在寻找/写入dictEntry的时候判断是否过期，属于被动删除策略。  6.1 惰性删除 惰性删除的代码，入口在db.c中的expireIfNeeded，该方法由执行查找命令或写入命令的方法调用，在执行真正的命令之前，做key的删除判断以及删除操作：
int expireIfNeeded(redisDb *db, robj *key) { //设定了过期时间且未过期的key会在这一步直接返回  if (!keyIsExpired(db,key)) return 0; //当前redis节点过期了，但是存在master节点。  //意味着当前属于slave节点，返回1，由master执行删除后同步至slave  if (server.masterhost != NULL) return 1; //过期key的数量+1  server.stat_expiredkeys++; //把过期的key的消息传播到slave，同时将该key的删除命令写入到aof文件  propagateExpire(db,key,server.lazyfree_lazy_expire); //通知监听了该key的客户端，通知key的过期事件  notifyKeyspaceEvent(NOTIFY_EXPIRED, &amp;#34;expired&amp;#34;,key,db-&amp;gt;id); //根据设定的删除方式，决定采用同步删除还是异步删除  return server.lazyfree_lazy_expire ? dbAsyncDelete(db,key) : dbSyncDelete(db,key); } int keyIsExpired(redisDb *db, robj *key) { //获得设定的过期时间戳  mstime_t when = getExpire(db,key); mstime_t now; //如果时间戳小于0，说明没有设置过期时间  if (when &amp;lt; 0) return 0; //loading状态下不允许进行过期判断  if (server.</description>
    </item>
    
    <item>
      <title>Redis存储原理剖析&lt;一&gt;：存储模型和基础命令解析</title>
      <link>https://Huang-zh.github.io/posts/redis1/</link>
      <pubDate>Fri, 25 Aug 2023 22:10:44 +0800</pubDate>
      
      <guid>https://Huang-zh.github.io/posts/redis1/</guid>
      <description>1. 前言  2022年，是充满挑战性的一年。
这一年，我选择离开了自己熟悉的信息化领域，把精力投向了互联网金融。
在22年的后半程，鉴于平台和团队所带来的效应，个人也在高频交易业务领域吸收了足够多的知识。过程中，认知的颠覆和自我的怀疑常常是共存。
所幸这些经历最后都能够作为养分，支撑我一步步走到当下。
这个系列的文章，初稿实际上在22年的年底就已经完成。但碍于平日里事务繁忙兼琐事繁多，使得日子一再蹉跎，一直推迟到23年过半，才开始尝试去重新梳理其中的些许细节，并准备将它发表在博客里。
初稿原本诞生于22年在高频交易系统的技术选型、架构搭建和研发过程中。当时和团队里优秀的工程师们对redis尝试不断地深入探索，试图吸收其在架构设计方面的优点，并思考对于交易业务领域可以如何进行二次开发以达到发挥极致性能的目的，从而形成了这份初稿。当然，由于保密机制，文档中原先存在的定制化方案和敏感信息已去除，但对redis架构有兴趣的朋友，仍然可以通过这个系列洞悉redis在设计方面的优点。
过程中难免会因为篇幅原因删除细枝末节的代码，这也是为更好的去掌握主流程，让整个文档脉络更清晰而做的取舍。若对内容有异议，可通过邮箱联系我。
 huangzh 2023.08.25    阅读本文档存在一些门槛，不建议新手直接阅读，建议大家先掌握以下必要的技能：  良好的c语言基础。 掌握多路复用编程网络模型。 对操作系统中io的认知。 学习并调试过其他常用中间件代码的经验。 耐心。   redis的存储模型，是典型的hash存储。即一个key对应一个或多个值，这在redis支持的数据类型有着明确的体现，redis一共支持五种类型的数据结构存储：
 string hash（又称为set） list zset zlist  从广义上来看，这五种类型数据的存储都可以用key-value形式去实现，无非是value所对应的值的形式有所不同。
 2. hash存储引擎 提到redis，不得不先提及hash存储引擎的概念，一个典型的hash存储引擎原理如下图所示：
这种基于hash的存储方式，与传统关系性数据库有着非常大的区别。
在内存中通过一定的hash算法均匀的散列key值，使不同的key均匀的散落在hashtable的不同栏位。
由于相同的key可能对应不同的value，因此hashtable每个栏位实际上采用挂载链表的形式存储每一个value节点。
每个value节点中，包含三个最重要的元素：
 position：value的起始位置 size：value对应的长度 fileid：value存储的文件标识符  当然，节点中当然可以包含其他额外的值，不同软件有着自己的额外添加的元素。
但是，不约而外的，通过这三个必要的元素，可以找到key对应的value究竟存储于哪个文件，以及value在该文件中对应的起始位置和长度。
通过这种方式，实际上可以很方便的查找key-value元素。同时，这种方式将hashtable中每个栏位的写入由随机写（hash值随机）转变为顺序写（每个栏位的数据只需要顺序往该栏位对应的文件中添加即可，通过节点链表顺序连接），大大提高了写入的效率。
同时，使用hash存储引擎还存在以下特点：
 时间复杂度o(1)。 满足“=”，“IN”条件查询。 不支持范围查询，比如between关键字。 不支持order by关键字排序。   3. redis数据模型 我们在描述一种存储类型的中间件时，无论它是缓存类的存储，亦或是传统写入磁盘的关系性数据库存储，都存在它们各自最基础也是最核心的数据存储模型，这里我个人习惯把它叫做数据模型，基于数据模型才能实现上层复杂的结构存储。
redis的数据模型，可以把它看成字典，一种基于key-value存储的数据结构，底层由数组实现的基于hashtable的拉链法存储。
以下是从redis源码中提取的四种以此从外到内的核心数据模型，其中redisDb为最外层，抽丝剥茧之后，不难发现真正的数据存储于底层的dictEntry：
typedef struct redisDb { dict *dict; /* The keyspace for this DB */ dict *expires; /* Timeout of keys with a timeout set */ dict *blocking_keys; /* Keys with clients waiting for data (BLPOP)*/ dict *ready_keys; /* Blocked keys that received a PUSH */ dict *watched_keys; /* WATCHED keys for MULTI/EXEC CAS */ int id; /* Database ID */ long long avg_ttl; /* Average TTL, just for stats */ list *defrag_later; /* List of key names to attempt to defrag one by one, gradually.</description>
    </item>
    
    <item>
      <title>浮生如梦</title>
      <link>https://Huang-zh.github.io/posts/firstpost/</link>
      <pubDate>Thu, 24 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://Huang-zh.github.io/posts/firstpost/</guid>
      <description>午月间
安逸的人
情不禁的人
得意的人
忘形的人
悻悻而归的人
痴心的人
醉醺醺的人
神隐的人
驾五色龙船的人
将信疑的人
无我的人
喜乐的人
奔波游离的人
失约的人
摇摇晃的人
妙悟的人</description>
    </item>
    
    <item>
      <title>简介</title>
      <link>https://Huang-zh.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Huang-zh.github.io/about/</guid>
      <description>关于我  祖籍浙江温州，定居浙江杭州。 程序员，互联网金融行业，对高频交易有略微经验。 偶尔打打篮球，玩玩吉他，入门水平^_^ 不玩抖音快手，不玩王者荣耀。  和我联系：  huangzhenghao831@163.com  </description>
    </item>
    
  </channel>
</rss>
