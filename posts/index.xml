<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on 此间的少年</title>
        <link>https://Huang-zh.github.io/posts/</link>
        <description>Recent content in Posts on 此间的少年</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Mon, 04 Nov 2024 00:00:00 +0000</lastBuildDate>
        <atom:link href="https://Huang-zh.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>月光 moonlight</title>
            <link>https://Huang-zh.github.io/posts/moonlight/</link>
            <pubDate>Mon, 04 Nov 2024 00:00:00 +0000</pubDate>
            
            <guid>https://Huang-zh.github.io/posts/moonlight/</guid>
            <description>写代码时，习惯让歌单随机播放。 这一晚播放到这首月光 Moonlight feat. Mahya。 伴奏用钢琴和 blues 吉他伴以轻快的点缀，专辑封面是忧郁的深蓝。 低潮部分 Lu1 娓娓道来</description>
            <content type="html"><![CDATA[<p>写代码时，习惯让歌单随机播放。</p>
<p>这一晚播放到这首月光 Moonlight feat. Mahya。</p>
<p>伴奏用钢琴和 blues 吉他伴以轻快的点缀，专辑封面是忧郁的深蓝。</p>
<p>低潮部分 Lu1 娓娓道来的独白，高潮部分 Mahya 曼妙的吟唱，可太戳中我心窝了。</p>
<p>原来，用说唱 ➕ Pop 的形式，也能演绎出绝美的月光🌕。</p>
<p>原来，艺术真的不分小众与否，也从来不区分所呈现的形式。</p>
<p>在美妙的节奏中，感受着一种之前从未细致体验过的氛围，整首歌呈现出来的，除了静谧的月色，还有背后蠢蠢欲动的莫名情愫。</p>
<p>在这短暂而充满回味的一瞬，记录下此刻的想法。</p>
<p>今夜月色正好，夜色令人沉醉。</p>
]]></content>
        </item>
        
        <item>
            <title> 交易系统系统间数据交互格式设计</title>
            <link>https://Huang-zh.github.io/posts/native-trade-system-data-message-design/</link>
            <pubDate>Thu, 03 Oct 2024 00:00:00 +0000</pubDate>
            
            <guid>https://Huang-zh.github.io/posts/native-trade-system-data-message-design/</guid>
            <description>背景 交易系统的特点，除了高吞吐量、高并发之外，往往对延迟有着非常敏感的要求，业界话术：高抖动敏感。 但是时延并不是针对所有业务，比如交易系统涉</description>
            <content type="html"><![CDATA[<h4 id="背景">背景</h4>
<p>交易系统的特点，除了高吞吐量、高并发之外，往往对延迟有着非常敏感的要求，业界话术：<strong style="color:red">高抖动敏感。</strong></p>
<p>但是时延并不是针对所有业务，比如交易系统涉及的大宗交易、综合业务、盘后定价等业务，由于发生频次非常的低，一般一个交易日才几十笔，所以这类业务并没有很敏感的时延需求。</p>
<p>时延需求仅仅存在于日间竞价撮合场景，比如普通交易、融资融券等发生频次非常频繁的业务。</p>
<p>时延的一个重要影响因素，就是系统间的数据交互，一般称之为 RPC，一笔交易委托的下达，往往伴随着生成订单、申报至交易所、交易所撮合后进行回报等操作。</p>
<p>而在委托下达的过程中，往往又会涉及多个子系统的交互，比如融资融券业务，需要在委托前 RPC 至合约系统生成一笔新的合约，然后需要 RPC 至额度系统扣减券商授权额度等一系列操作，如何用简洁的消息体去传达一笔委托中的所有跨系统指令，是一个低时延交易系统需要考虑的一个必要大前提。</p>
<h4 id="消息体的设计">消息体的设计</h4>
<p>传统的 json 格式，显然不满足这种低时延的要求，原因是 json 的序列化和反序列化操作存在较高的耗时，同时 json 格式虽然可读性很高，但排列不够紧凑，本身占据的空间往往较大，在低延时的场景会产生较大的带宽占用，一旦因为带宽不足（虽然可能性很小）而发生网络抖动，那对于日间交易将是灾难性的影响，会导致系统时延增大、处理速度过慢导致订单积压，系统tps 上不去。</p>
<p>因此，需要用一种更简洁、更紧凑的方式去设计交易系统敏感场景的数据传输格式。</p>
<p>一般采用直接拼接字节的方式进行传输，这种方式对消息体设计人员的要求较高，但好处就是能够保证高效的系统间传输，但坏处也存在，<strong style="color:red">那就是必须严格约定每一个字节代表的意义，并且上下游各系统必须严格遵守这个约定。</strong>某种意义上，牺牲了 json 带来的可读性和便捷性，保证了系统的时延和高吞吐量。</p>
<p>一般用域的概念来表示字节组成的消息的各个子部分，可参考如下设计：</p>
<ul>
<li>
<p>1 号域，只有一个字节，代表了本次传输消息的所有参数个数，由于是一个字节，所以一次 RPC 最多支持 256 个参数。</p>
</li>
<li>
<p>2 号域，如果 1 号域得出消息中一共有 n 个参数，0&lt; n &lt;=256，那么 2 号域的下标范围为：1 至 n ，也就是从第二个字节开始，往后的 n 个字节（n 由 1 号域得出）的范围里，每一个字节代表了一种第 n 个参数的类型，注意，必须严格约定每种类型代表的字节值，比如下面的表格，就可以作为约定基本数据类型对应的字节值的规范：</p>
<table>
<thead>
<tr>
<th style="text-align:center">字节值</th>
<th style="text-align:center">基本类型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">98</td>
<td style="text-align:center">byte</td>
</tr>
<tr>
<td style="text-align:center">115</td>
<td style="text-align:center">short</td>
</tr>
<tr>
<td style="text-align:center">99</td>
<td style="text-align:center">char</td>
</tr>
<tr>
<td style="text-align:center">102</td>
<td style="text-align:center">float</td>
</tr>
<tr>
<td style="text-align:center">100</td>
<td style="text-align:center">double</td>
</tr>
<tr>
<td style="text-align:center">105</td>
<td style="text-align:center">int</td>
</tr>
<tr>
<td style="text-align:center">108</td>
<td style="text-align:center">long</td>
</tr>
<tr>
<td style="text-align:center">66</td>
<td style="text-align:center">boolean</td>
</tr>
<tr>
<td style="text-align:center">83</td>
<td style="text-align:center">string</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>3 号域，如果 1 号域得出消息中一共有 n 个参数，那么 3 号域的范围为 n+1 至 n+1+2*n - 1，从 n+1个字节处往后，每 2 个字节代表了第 n 个参数所占用的字节个数，之所以设计了两个字节来表示字节个数，是为了考虑字符串的长度是可变的，它不像基本类型（比如 int 固定用 4 个字节即可表示）。从 3 号域可以获得每一个参数的占用字节数，为 4 号域获取值做准备。</p>
</li>
<li>
<p>4 号域，如果 1 号域得出消息中一共有 n 个参数，从 3 号域推断出每个参数的字节数（假设 n 个参数总共占用m 个字节），那么 4 号域的范围为 n+1+2*n 至  n+1+2*n+m，需要维护一个 valueIndex 下标，当第 n 个参数对应的 3 号域中占用字节数为 k 时，valueIndex 至 valueIndex + k -1 范围内的字节即当前参数对应的值。</p>
</li>
<li>
<p>5 号域，组成较为简单，通过参数名字符串直接拼接|字符构成，比如：orderId|businessAmount|reportDate，可直接一次性读取完毕后通过|字符分割，获取 n 个参数对应的参数名。</p>
</li>
</ul>
<h4 id="代码示例">代码示例</h4>
<p>可以指定传入一个 map，来序列化成字节消息：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">		<span style="color:#75715e">/**
</span><span style="color:#75715e">     * @Author huang.zh
</span><span style="color:#75715e">     * @Description 将入参的个数填充成字节数组
</span><span style="color:#75715e">     * @Date 7:30 PM 2024/10/2
</span><span style="color:#75715e">     * @Param [bytes, parameters]
</span><span style="color:#75715e">     * @return
</span><span style="color:#75715e">     **/</span>
		<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">byte</span><span style="color:#f92672">[]</span> <span style="color:#a6e22e">generateParameterLength</span><span style="color:#f92672">(</span>Map<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">,</span>Object<span style="color:#f92672">&gt;</span> parameters<span style="color:#f92672">){</span>
        <span style="color:#75715e">// 计算长度
</span><span style="color:#75715e"></span>        <span style="color:#75715e">// 参数个数 1 个字节：parameterNumber
</span><span style="color:#75715e"></span>        <span style="color:#75715e">// 参数类型 parameterNumber 个字节
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">int</span> parameterNumber <span style="color:#f92672">=</span> parameters<span style="color:#f92672">.</span><span style="color:#a6e22e">size</span><span style="color:#f92672">();</span>
        <span style="color:#66d9ef">int</span> length <span style="color:#f92672">=</span> 1 <span style="color:#f92672">+</span> parameterNumber <span style="color:#f92672">+</span> 2 <span style="color:#f92672">*</span> parameterNumber<span style="color:#f92672">;</span>
        Collection<span style="color:#f92672">&lt;</span>Object<span style="color:#f92672">&gt;</span> values <span style="color:#f92672">=</span> parameters<span style="color:#f92672">.</span><span style="color:#a6e22e">values</span><span style="color:#f92672">();</span>
        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span>Object value <span style="color:#f92672">:</span> values<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>value <span style="color:#66d9ef">instanceof</span> Integer <span style="color:#f92672">||</span> value <span style="color:#66d9ef">instanceof</span> Float <span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
                length <span style="color:#f92672">+=</span> 4<span style="color:#f92672">;</span>
            <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>value <span style="color:#66d9ef">instanceof</span> Long <span style="color:#f92672">||</span> value <span style="color:#66d9ef">instanceof</span> Double<span style="color:#f92672">){</span>
                length <span style="color:#f92672">+=</span> 8<span style="color:#f92672">;</span>
            <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>value <span style="color:#66d9ef">instanceof</span> Character <span style="color:#f92672">||</span> value <span style="color:#66d9ef">instanceof</span> Byte <span style="color:#f92672">||</span> value <span style="color:#66d9ef">instanceof</span> Boolean<span style="color:#f92672">){</span>
                length <span style="color:#f92672">+=</span> 1<span style="color:#f92672">;</span>
            <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>value <span style="color:#66d9ef">instanceof</span> Short<span style="color:#f92672">){</span>
                length <span style="color:#f92672">+=</span> 2<span style="color:#f92672">;</span>
            <span style="color:#f92672">}</span>
        <span style="color:#f92672">}</span>
        <span style="color:#66d9ef">byte</span><span style="color:#f92672">[]</span> bytes <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#66d9ef">byte</span><span style="color:#f92672">[</span>length<span style="color:#f92672">];</span>
        bytes<span style="color:#f92672">[</span>0<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">byte</span><span style="color:#f92672">)</span> parameterNumber<span style="color:#f92672">;</span>
        <span style="color:#66d9ef">int</span> typeIndex <span style="color:#f92672">=</span> 1<span style="color:#f92672">,</span>lengthIndex <span style="color:#f92672">=</span> 1 <span style="color:#f92672">+</span> parameterNumber <span style="color:#f92672">+</span> 1<span style="color:#f92672">,</span>valueIndex <span style="color:#f92672">=</span> 1 <span style="color:#f92672">+</span> parameterNumber <span style="color:#f92672">+</span> 2 <span style="color:#f92672">*</span> parameterNumber<span style="color:#f92672">;</span>
        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span>Object value <span style="color:#f92672">:</span> values<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>value <span style="color:#66d9ef">instanceof</span> Integer<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
                bytes<span style="color:#f92672">[</span>typeIndex<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> Type<span style="color:#f92672">.</span><span style="color:#a6e22e">INTEGER</span><span style="color:#f92672">.</span><span style="color:#a6e22e">type</span><span style="color:#f92672">();</span>
                bytes<span style="color:#f92672">[</span>lengthIndex<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> Integer<span style="color:#f92672">.</span><span style="color:#a6e22e">valueOf</span><span style="color:#f92672">(</span>4<span style="color:#f92672">).</span><span style="color:#a6e22e">byteValue</span><span style="color:#f92672">();</span>
                lengthIndex <span style="color:#f92672">+=</span> 2<span style="color:#f92672">;</span>
                Unpooled<span style="color:#f92672">.</span><span style="color:#a6e22e">copyInt</span><span style="color:#f92672">((</span>Integer<span style="color:#f92672">)</span> value<span style="color:#f92672">).</span><span style="color:#a6e22e">readBytes</span><span style="color:#f92672">(</span>bytes<span style="color:#f92672">,</span>valueIndex<span style="color:#f92672">,</span>4<span style="color:#f92672">);</span>
                valueIndex <span style="color:#f92672">+=</span> 4<span style="color:#f92672">;</span>
            <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>value <span style="color:#66d9ef">instanceof</span> Long<span style="color:#f92672">){</span>
                bytes<span style="color:#f92672">[</span>typeIndex<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> Type<span style="color:#f92672">.</span><span style="color:#a6e22e">LONG</span><span style="color:#f92672">.</span><span style="color:#a6e22e">type</span><span style="color:#f92672">();</span>
                bytes<span style="color:#f92672">[</span>lengthIndex<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> Integer<span style="color:#f92672">.</span><span style="color:#a6e22e">valueOf</span><span style="color:#f92672">(</span>8<span style="color:#f92672">).</span><span style="color:#a6e22e">byteValue</span><span style="color:#f92672">();</span>
                lengthIndex <span style="color:#f92672">+=</span> 2<span style="color:#f92672">;</span>
                Unpooled<span style="color:#f92672">.</span><span style="color:#a6e22e">copyLong</span><span style="color:#f92672">((</span>Long<span style="color:#f92672">)</span> value<span style="color:#f92672">).</span><span style="color:#a6e22e">readBytes</span><span style="color:#f92672">(</span>bytes<span style="color:#f92672">,</span>valueIndex<span style="color:#f92672">,</span>8<span style="color:#f92672">);</span>
                valueIndex <span style="color:#f92672">+=</span> 8<span style="color:#f92672">;</span>
            <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span><span style="color:#f92672">(</span>value <span style="color:#66d9ef">instanceof</span> Double<span style="color:#f92672">){</span>
                bytes<span style="color:#f92672">[</span>typeIndex<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> Type<span style="color:#f92672">.</span><span style="color:#a6e22e">DOUBLE</span><span style="color:#f92672">.</span><span style="color:#a6e22e">type</span><span style="color:#f92672">();</span>
                bytes<span style="color:#f92672">[</span>lengthIndex<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> Integer<span style="color:#f92672">.</span><span style="color:#a6e22e">valueOf</span><span style="color:#f92672">(</span>8<span style="color:#f92672">).</span><span style="color:#a6e22e">byteValue</span><span style="color:#f92672">();</span>
                lengthIndex <span style="color:#f92672">+=</span> 2<span style="color:#f92672">;</span>
                Unpooled<span style="color:#f92672">.</span><span style="color:#a6e22e">copyDouble</span><span style="color:#f92672">((</span>Double<span style="color:#f92672">)</span> value<span style="color:#f92672">).</span><span style="color:#a6e22e">readBytes</span><span style="color:#f92672">(</span>bytes<span style="color:#f92672">,</span>valueIndex<span style="color:#f92672">,</span>8<span style="color:#f92672">);</span>
                valueIndex <span style="color:#f92672">+=</span> 8<span style="color:#f92672">;</span>
            <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>value <span style="color:#66d9ef">instanceof</span> Character<span style="color:#f92672">){</span>
                bytes<span style="color:#f92672">[</span>typeIndex<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> Type<span style="color:#f92672">.</span><span style="color:#a6e22e">CHAR</span><span style="color:#f92672">.</span><span style="color:#a6e22e">type</span><span style="color:#f92672">();</span>
                bytes<span style="color:#f92672">[</span>lengthIndex<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> Integer<span style="color:#f92672">.</span><span style="color:#a6e22e">valueOf</span><span style="color:#f92672">(</span>1<span style="color:#f92672">).</span><span style="color:#a6e22e">byteValue</span><span style="color:#f92672">();</span>
                lengthIndex <span style="color:#f92672">+=</span> 2<span style="color:#f92672">;</span>
                bytes<span style="color:#f92672">[</span>valueIndex<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">byte</span><span style="color:#f92672">)</span> value<span style="color:#f92672">;</span>
                valueIndex <span style="color:#f92672">+=</span> 1<span style="color:#f92672">;</span>
            <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span><span style="color:#f92672">(</span>value <span style="color:#66d9ef">instanceof</span> Byte<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
                bytes<span style="color:#f92672">[</span>typeIndex<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> Type<span style="color:#f92672">.</span><span style="color:#a6e22e">BYTE</span><span style="color:#f92672">.</span><span style="color:#a6e22e">type</span><span style="color:#f92672">();</span>
                bytes<span style="color:#f92672">[</span>lengthIndex<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> Integer<span style="color:#f92672">.</span><span style="color:#a6e22e">valueOf</span><span style="color:#f92672">(</span>1<span style="color:#f92672">).</span><span style="color:#a6e22e">byteValue</span><span style="color:#f92672">();</span>
                lengthIndex <span style="color:#f92672">+=</span> 2<span style="color:#f92672">;</span>
                bytes<span style="color:#f92672">[</span>valueIndex<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">byte</span><span style="color:#f92672">)</span> value<span style="color:#f92672">;</span>
                valueIndex <span style="color:#f92672">+=</span> 1<span style="color:#f92672">;</span>
            <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>value <span style="color:#66d9ef">instanceof</span> Short<span style="color:#f92672">){</span>
                bytes<span style="color:#f92672">[</span>typeIndex<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> Type<span style="color:#f92672">.</span><span style="color:#a6e22e">SHORT</span><span style="color:#f92672">.</span><span style="color:#a6e22e">type</span><span style="color:#f92672">();</span>
                bytes<span style="color:#f92672">[</span>lengthIndex<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> Integer<span style="color:#f92672">.</span><span style="color:#a6e22e">valueOf</span><span style="color:#f92672">(</span>2<span style="color:#f92672">).</span><span style="color:#a6e22e">byteValue</span><span style="color:#f92672">();</span>
                lengthIndex <span style="color:#f92672">+=</span> 2<span style="color:#f92672">;</span>
                Unpooled<span style="color:#f92672">.</span><span style="color:#a6e22e">copyShort</span><span style="color:#f92672">((</span>Short<span style="color:#f92672">)</span> value<span style="color:#f92672">).</span><span style="color:#a6e22e">readBytes</span><span style="color:#f92672">(</span>bytes<span style="color:#f92672">,</span>valueIndex<span style="color:#f92672">,</span>2<span style="color:#f92672">);</span>
                valueIndex <span style="color:#f92672">+=</span> 2<span style="color:#f92672">;</span>
            <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>value <span style="color:#66d9ef">instanceof</span> Float<span style="color:#f92672">){</span>
                bytes<span style="color:#f92672">[</span>typeIndex<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> Type<span style="color:#f92672">.</span><span style="color:#a6e22e">FLOAT</span><span style="color:#f92672">.</span><span style="color:#a6e22e">type</span><span style="color:#f92672">();</span>
                bytes<span style="color:#f92672">[</span>lengthIndex<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> Integer<span style="color:#f92672">.</span><span style="color:#a6e22e">valueOf</span><span style="color:#f92672">(</span>4<span style="color:#f92672">).</span><span style="color:#a6e22e">byteValue</span><span style="color:#f92672">();</span>
                lengthIndex <span style="color:#f92672">+=</span> 2<span style="color:#f92672">;</span>
                Unpooled<span style="color:#f92672">.</span><span style="color:#a6e22e">copyFloat</span><span style="color:#f92672">((</span>Float<span style="color:#f92672">)</span> value<span style="color:#f92672">).</span><span style="color:#a6e22e">readBytes</span><span style="color:#f92672">(</span>bytes<span style="color:#f92672">,</span>valueIndex<span style="color:#f92672">,</span>4<span style="color:#f92672">);</span>
                valueIndex <span style="color:#f92672">+=</span> 4<span style="color:#f92672">;</span>
            <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>value <span style="color:#66d9ef">instanceof</span> Boolean<span style="color:#f92672">){</span>
                bytes<span style="color:#f92672">[</span>typeIndex<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> Type<span style="color:#f92672">.</span><span style="color:#a6e22e">BOOLEAN</span><span style="color:#f92672">.</span><span style="color:#a6e22e">type</span><span style="color:#f92672">();</span>
                bytes<span style="color:#f92672">[</span>lengthIndex<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> Integer<span style="color:#f92672">.</span><span style="color:#a6e22e">valueOf</span><span style="color:#f92672">(</span>1<span style="color:#f92672">).</span><span style="color:#a6e22e">byteValue</span><span style="color:#f92672">();</span>
                lengthIndex <span style="color:#f92672">+=</span> 2<span style="color:#f92672">;</span>
                Unpooled<span style="color:#f92672">.</span><span style="color:#a6e22e">copyBoolean</span><span style="color:#f92672">((</span>Boolean<span style="color:#f92672">)</span> value<span style="color:#f92672">).</span><span style="color:#a6e22e">readBytes</span><span style="color:#f92672">(</span>bytes<span style="color:#f92672">,</span>valueIndex<span style="color:#f92672">,</span>1<span style="color:#f92672">);</span>
                valueIndex <span style="color:#f92672">+=</span> 1<span style="color:#f92672">;</span>
            <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>value <span style="color:#66d9ef">instanceof</span> String<span style="color:#f92672">){</span>
								<span style="color:#75715e">// 隐藏 String类型参数的实现，有兴趣的同学可以自己实现一下，比较简单～
</span><span style="color:#75715e"></span>            <span style="color:#f92672">}</span>
            typeIndex <span style="color:#f92672">++;</span>
        <span style="color:#f92672">}</span>
        <span style="color:#66d9ef">return</span> bytes<span style="color:#f92672">;</span>
    <span style="color:#f92672">}</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>分布式事务流水序列号处理</title>
            <link>https://Huang-zh.github.io/posts/native-trade-system-serial-no/</link>
            <pubDate>Fri, 20 Sep 2024 00:00:00 +0000</pubDate>
            
            <guid>https://Huang-zh.github.io/posts/native-trade-system-serial-no/</guid>
            <description>概念 在交易系统中，通常存在流水号的概念，在生成交易订单时，会通过分片+流水号的形式记录一个全局唯一的委托号。 对于流水号的获取，通常有如下要求</description>
            <content type="html"><![CDATA[<h3 id="概念">概念</h3>
<p>在交易系统中，通常存在流水号的概念，在生成交易订单时，会通过分片+流水号的形式记录一个全局唯一的委托号。</p>
<p>对于流水号的获取，通常有如下要求：</p>
<ul>
<li>流水号本身需要以数字形式进行递增
<ul>
<li>防止作为主键或者索引造成页分裂，同时在排查问题时，在使用数字流水号的场景里追溯问题通常易于使用其他流水号，如UUID、雪花算法等。</li>
</ul>
</li>
<li>流水号由计数器统一分配
<ul>
<li>流水号通常从一个地方获取，即交易系统通常会实现提供统一流水号的计数器，确保流水号的全局唯一，同时获取流水号的出口也唯一，易于维护。</li>
</ul>
</li>
<li>流水号的设计需要按业务维度划分
<ul>
<li>日间交易存在多类业务，但每一类业务的频率往往不同，比如日间普通交易、信用交易的业务非常频繁，而大宗交易等综合业务往往发生频次非常低（比如一个交易日内发生几十次），这就使得不同业务流水号的增长速率不同，如果都使用同一类计数器进行维护，那么流水号的资源很快就会被频繁发生交易业务耗尽。</li>
</ul>
</li>
<li>获取流水号需要尽可能的做到开销小
<ul>
<li>即流水号需要以最直接简单的方式获取，来确保交易功能的高性能要求。</li>
</ul>
</li>
</ul>
<h3 id="交易系统中的分布式事务">交易系统中的分布式事务</h3>
<p>通常采用TCC（try-confirm-cancel）的模式实现跨数据库事务调度，拿生成委托的过程来举个例子，一个普通委托记录生成的流程通常如下：</p>
<ul>
<li>try阶段（一阶段）
<ul>
<li>获取当前业务全局唯一序列号</li>
<li>生成当前业务委托订单（此时委托订单的状态字段可能为未生效，即视作预委托）</li>
<li>&hellip;</li>
</ul>
</li>
<li>confirm阶段（二阶段提交），一阶段所有操作正确按照预期执行后，执行二阶段的操作并进行事务提交
<ul>
<li>更新委托状态为正常状态</li>
<li>&hellip;</li>
</ul>
</li>
<li>cancel阶段（二阶段回滚），一阶段某一操作未按照预期执行且抛出异常，执行二阶段的操作并进行事务回滚
<ul>
<li>更新委托状态为作废状态</li>
<li>&hellip;</li>
</ul>
</li>
</ul>
<p>前面说到，获取流水号需要尽可能的做到开销小，所以在日间交易时，通常会批量一次性申请一个号段（比如一次性申请100000-110000，一共一万个序列号），然后在交易系统中缓存这一批次的序列号，每当一个委托请求下达至交易系统，则从缓存中获取当前最新的序列号，同时更新缓存中的最新序列号为<strong>下一个可用序列号</strong>。</p>
<p>引入了缓存，必然需要对缓存的数据进行维护，防止系统挂掉之后缓存中的序列号丢失，那么，通常需要针对维护的序列号设计一个存储最新可用的缓存序列号表。那么，引入了缓存序列号表，那么获取流水号之后就存在双写的义务：<strong style="color:red">即需要保证缓存和数据库表的数据一致性（二者维护的最新可用序列号必须一致。）</strong></p>
<p>金融交易系统中，通常采用<strong style="color:red">先写数据库表，再写缓存的形式保证数据一致性。这通常会牺牲掉一些性能，原因是并发情况下更新同一行需要获取行级锁。保证数据一致性是交易系统的first rule，一旦缓存和数据库的数据不一致，那将引发巨大的问题。</strong></p>
<p>最终，在分布式事务中获取序列号的步骤大体如下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> Long <span style="color:#a6e22e">getSerialCounterNoForUpdate</span><span style="color:#f92672">(</span>Integer serialCounterNo<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        log<span style="color:#f92672">.</span><span style="color:#a6e22e">info</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;额度流水号生成阶段：一阶段RPC，对应业务种类：{}。&#34;</span><span style="color:#f92672">,</span>serialCounterNo<span style="color:#f92672">);</span>
        Long serialNo<span style="color:#f92672">;</span>
        <span style="color:#66d9ef">int</span> count<span style="color:#f92672">;</span>
        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>serialNoCacheManager<span style="color:#f92672">.</span><span style="color:#a6e22e">containsValue</span><span style="color:#f92672">(</span>serialCounterNo<span style="color:#f92672">,</span>currentStartSerialNo<span style="color:#f92672">)</span> <span style="color:#f92672">&amp;&amp;</span>
                serialNoCacheManager<span style="color:#f92672">.</span><span style="color:#a6e22e">getCache</span><span style="color:#f92672">(</span>serialCounterNo<span style="color:#f92672">,</span>currentStartSerialNo<span style="color:#f92672">)</span> <span style="color:#f92672">&lt;</span> currentStartSerialNo <span style="color:#f92672">+</span> COUNTER_NUMBER <span style="color:#f92672">){</span>
            <span style="color:#75715e">//当前序列号缓存命中
</span><span style="color:#75715e"></span>            serialNo <span style="color:#f92672">=</span> serialNoCacheManager<span style="color:#f92672">.</span><span style="color:#a6e22e">getCache</span><span style="color:#f92672">(</span>serialCounterNo<span style="color:#f92672">,</span> currentStartSerialNo<span style="color:#f92672">);</span>
            <span style="color:#75715e">// 取得的流水号放入事务上下文，供后续使用
</span><span style="color:#75715e"></span>            BusinessActionContextUtil<span style="color:#f92672">.</span><span style="color:#a6e22e">addContext</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;serialNo&#34;</span><span style="color:#f92672">,</span>serialNo<span style="color:#f92672">);</span>
            <span style="color:#75715e">//更新信用流水计数器记录表
</span><span style="color:#75715e"></span>            count <span style="color:#f92672">=</span> creditSerialCounterRecordDomain<span style="color:#f92672">.</span><span style="color:#a6e22e">updateCreditSerialCounterRecord</span><span style="color:#f92672">(</span>serialCounterNo<span style="color:#f92672">,</span>currentStartSerialNo<span style="color:#f92672">,</span>
                    currentStartSerialNo <span style="color:#f92672">+</span> COUNTER_NUMBER <span style="color:#f92672">-</span> 1L<span style="color:#f92672">,</span>serialNo<span style="color:#f92672">,</span>serialNo<span style="color:#f92672">-</span>1<span style="color:#f92672">,</span>CommonConstant<span style="color:#f92672">.</span><span style="color:#a6e22e">INTEGER_ONE</span><span style="color:#f92672">);</span>
        <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
            serialNo <span style="color:#f92672">=</span> quotaClient<span style="color:#f92672">.</span><span style="color:#a6e22e">getSerialNo</span><span style="color:#f92672">(</span>serialCounterNo<span style="color:#f92672">);</span>
            <span style="color:#75715e">// 取得的流水号放入事务上下文，供后续使用
</span><span style="color:#75715e"></span>            BusinessActionContextUtil<span style="color:#f92672">.</span><span style="color:#a6e22e">addContext</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;serialNo&#34;</span><span style="color:#f92672">,</span>serialNo<span style="color:#f92672">);</span>
            <span style="color:#75715e">//当前可用序列号号段起始值
</span><span style="color:#75715e"></span>            BusinessActionContextUtil<span style="color:#f92672">.</span><span style="color:#a6e22e">addContext</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;currentStartSerialNo&#34;</span><span style="color:#f92672">,</span>serialNo<span style="color:#f92672">);</span>
            <span style="color:#75715e">// 写入信用流水计数器记录表
</span><span style="color:#75715e"></span>            count <span style="color:#f92672">=</span> creditSerialCounterRecordDomain<span style="color:#f92672">.</span><span style="color:#a6e22e">insertCreditSerialCounterRecord</span><span style="color:#f92672">(</span>serialNo<span style="color:#f92672">,</span>serialNo<span style="color:#f92672">+</span>COUNTER_NUMBER<span style="color:#f92672">-</span>1<span style="color:#f92672">,</span>
                    serialNo<span style="color:#f92672">,</span>CommonConstant<span style="color:#f92672">.</span><span style="color:#a6e22e">INTEGER_ONE</span><span style="color:#f92672">,</span>serialCounterNo<span style="color:#f92672">);</span>

        <span style="color:#f92672">}</span>
        <span style="color:#75715e">// 必须更新成功，否则直接抛出异常，当做委托失败处理，进行分布式事务回滚
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>count <span style="color:#f92672">!=</span> CommonConstant<span style="color:#f92672">.</span><span style="color:#a6e22e">INTEGER_ONE</span><span style="color:#f92672">.</span><span style="color:#a6e22e">intValue</span><span style="color:#f92672">()){</span>
            Map<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">,</span>Object<span style="color:#f92672">&gt;</span> parameters <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> HashMap<span style="color:#f92672">&lt;&gt;();</span>
            parameters<span style="color:#f92672">.</span><span style="color:#a6e22e">put</span><span style="color:#f92672">(</span>CommonConstant<span style="color:#f92672">.</span><span style="color:#a6e22e">SERIAL_COUNTER_NO_KEY</span><span style="color:#f92672">,</span>serialCounterNo<span style="color:#f92672">);</span>
            parameters<span style="color:#f92672">.</span><span style="color:#a6e22e">put</span><span style="color:#f92672">(</span>CommonConstant<span style="color:#f92672">.</span><span style="color:#a6e22e">SERIAL_NO_KEY</span><span style="color:#f92672">,</span>serialNo<span style="color:#f92672">);</span>
            <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> BusinessExecuteException<span style="color:#f92672">(</span>ExceptionEnum<span style="color:#f92672">.</span><span style="color:#a6e22e">ENTRUST_FAILED</span><span style="color:#f92672">,</span>parameters<span style="color:#f92672">);</span>
        <span style="color:#f92672">}</span>
        <span style="color:#66d9ef">return</span> serialNo<span style="color:#f92672">;</span>
    <span style="color:#f92672">}</span>

    <span style="color:#a6e22e">@Override</span>
    <span style="color:#66d9ef">public</span> Boolean <span style="color:#a6e22e">generateSerialCounterNo</span><span style="color:#f92672">(</span>BusinessActionContext businessActionContext<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        Integer serialCounterNo <span style="color:#f92672">=</span> businessActionContext<span style="color:#f92672">.</span><span style="color:#a6e22e">getActionContext</span><span style="color:#f92672">(</span>CommonConstant<span style="color:#f92672">.</span><span style="color:#a6e22e">SERIAL_COUNTER_NO_KEY</span><span style="color:#f92672">,</span> Integer<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">);</span>
        Long serialNo <span style="color:#f92672">=</span> businessActionContext<span style="color:#f92672">.</span><span style="color:#a6e22e">getActionContext</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;serialNo&#34;</span><span style="color:#f92672">,</span> Long<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">);</span>
        Long currentStartSerialNo <span style="color:#f92672">=</span> businessActionContext<span style="color:#f92672">.</span><span style="color:#a6e22e">getActionContext</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;currentStartSerialNo&#34;</span><span style="color:#f92672">,</span> Long<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">);</span>
        <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">currentStartSerialNo</span> <span style="color:#f92672">=</span> Optional<span style="color:#f92672">.</span><span style="color:#a6e22e">ofNullable</span><span style="color:#f92672">(</span>currentStartSerialNo<span style="color:#f92672">).</span><span style="color:#a6e22e">orElse</span><span style="color:#f92672">(</span><span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">currentStartSerialNo</span><span style="color:#f92672">);</span>
        <span style="color:#75715e">// 二阶段提交时，写入缓存
</span><span style="color:#75715e"></span>        serialNoCacheManager<span style="color:#f92672">.</span><span style="color:#a6e22e">createCache</span><span style="color:#f92672">(</span>serialCounterNo<span style="color:#f92672">,</span><span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">currentStartSerialNo</span><span style="color:#f92672">,</span>serialNo<span style="color:#f92672">+</span>1<span style="color:#f92672">);</span>
        log<span style="color:#f92672">.</span><span style="color:#a6e22e">info</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;额度流水号生成阶段：二阶段提交，取得的流水订单号：{}，对应业务种类{}。&#34;</span><span style="color:#f92672">,</span>serialNo<span style="color:#f92672">,</span>serialCounterNo<span style="color:#f92672">);</span>
        <span style="color:#66d9ef">return</span> Boolean<span style="color:#f92672">.</span><span style="color:#a6e22e">TRUE</span><span style="color:#f92672">;</span>
    <span style="color:#f92672">}</span>

    <span style="color:#a6e22e">@Override</span>
    <span style="color:#66d9ef">public</span> Boolean <span style="color:#a6e22e">redoSerialCounterNo</span><span style="color:#f92672">(</span>BusinessActionContext businessActionContext<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        Integer serialCounterNo <span style="color:#f92672">=</span> businessActionContext<span style="color:#f92672">.</span><span style="color:#a6e22e">getActionContext</span><span style="color:#f92672">(</span>CommonConstant<span style="color:#f92672">.</span><span style="color:#a6e22e">SERIAL_COUNTER_NO_KEY</span><span style="color:#f92672">,</span> Integer<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">);</span>
        log<span style="color:#f92672">.</span><span style="color:#a6e22e">info</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;额度流水号生成阶段：二阶段回滚，对应业务种类{}。&#34;</span><span style="color:#f92672">,</span>serialCounterNo<span style="color:#f92672">);</span>
        Long currentStartSerialNo <span style="color:#f92672">=</span> businessActionContext<span style="color:#f92672">.</span><span style="color:#a6e22e">getActionContext</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;currentStartSerialNo&#34;</span><span style="color:#f92672">,</span> Long<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">);</span>
        Long serialNo <span style="color:#f92672">=</span> businessActionContext<span style="color:#f92672">.</span><span style="color:#a6e22e">getActionContext</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;serialNo&#34;</span><span style="color:#f92672">,</span> Long<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">);</span>
        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>currentStartSerialNo <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">){</span>
            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>serialNo <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">){</span>
                <span style="color:#75715e">// 未发起RPC申请序列号段，说明当前线程上下文中的序列号未被使用，更新缓存将计数器重置为serialNo即可
</span><span style="color:#75715e"></span>                <span style="color:#66d9ef">return</span> serialNoCacheManager<span style="color:#f92672">.</span><span style="color:#a6e22e">createCache</span><span style="color:#f92672">(</span>serialCounterNo<span style="color:#f92672">,</span><span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">currentStartSerialNo</span><span style="color:#f92672">,</span>serialNo<span style="color:#f92672">)</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
            <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
                <span style="color:#66d9ef">return</span> Boolean<span style="color:#f92672">.</span><span style="color:#a6e22e">TRUE</span><span style="color:#f92672">;</span>
            <span style="color:#f92672">}</span>
        <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
            <span style="color:#75715e">// 发起RPC申请了新号段，则需要回冲已申请的号段
</span><span style="color:#75715e"></span>            <span style="color:#75715e">// 1. 发起RPC回冲额度管理系统的序列号段申请记录
</span><span style="color:#75715e"></span>            <span style="color:#75715e">// 2. 本地序列号段表删除新申请的记录
</span><span style="color:#75715e"></span>            <span style="color:#66d9ef">return</span> quotaClient<span style="color:#f92672">.</span><span style="color:#a6e22e">redoSerialCounterNo</span><span style="color:#f92672">(</span>serialCounterNo<span style="color:#f92672">)</span> <span style="color:#f92672">&amp;&amp;</span>
                    creditSerialCounterRecordDomain<span style="color:#f92672">.</span><span style="color:#a6e22e">deleteCreditSerialCounterRecord</span><span style="color:#f92672">(</span>serialCounterNo<span style="color:#f92672">,</span>currentStartSerialNo<span style="color:#f92672">,</span>currentStartSerialNo <span style="color:#f92672">+</span> COUNTER_NUMBER<span style="color:#f92672">-</span>1<span style="color:#f92672">,</span>serialNo<span style="color:#f92672">,</span>CommonConstant<span style="color:#f92672">.</span><span style="color:#a6e22e">INTEGER_ONE</span><span style="color:#f92672">)</span> <span style="color:#f92672">==</span> CommonConstant<span style="color:#f92672">.</span><span style="color:#a6e22e">INTEGER_ONE</span><span style="color:#f92672">;</span>
        <span style="color:#f92672">}</span>
    <span style="color:#f92672">}</span>
</code></pre></div><p>大致分为如下步骤：</p>
<p>1、一阶段中，先查询缓存中是否维护最新可用序列号</p>
<ul>
<li>如果不存在，则发起RPC至计数器功能获取一批次的可用序列号段。
*  获取新的一批序列号后，马上插入表记录，然后更新缓存，确保数据一致性。</li>
<li>如果存在，则直接获取当前可用序列号。
*  获取新的序列号后，马上更新表记录中可用的最新序列号为当前取得的序列号+1。</li>
<li>上述两种情况，任意一次写表失败，说明存在并发，直接抛出异常来实现快速失败机制，确保性能。</li>
</ul>
<p>2、使用获取的序列号成功后（可能存在RPC新申请和已维护缓存中直接获取两种情况），需要在二阶段提交时将缓存中的可用序列号更新为本次获取的序列号+1，以确保下一次委托命中缓存时可取出直接使用的最新序列号（<strong style="color:red">此时，由于一阶段对于两种情况均已经写表，所以取出的序列号天然递增</strong>）。</p>
<p>3、使用获取的序列号失败，即一阶段发生任意报错，则针对两种情况进行回滚：</p>
<ul>
<li>一阶段缓存中已命中，直接取出序列号的，由于序列号缓存中递增操作在二阶段提交才会去执行，所以一阶段获取的序列号仍能使用，这里缓存可更新可不更新，因为实际上缓存中维护的最新可用序列号并无变化。</li>
<li>一阶段缓存未命中，发起RPC申请新的流水号段，则需要发起一次回冲RPC，将申请的流水号段在计数器功能中进行回冲，避免造成流水号段资源的浪费。</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>在千岛湖</title>
            <link>https://Huang-zh.github.io/posts/20240902/</link>
            <pubDate>Mon, 02 Sep 2024 00:00:00 +0000</pubDate>
            
            <guid>https://Huang-zh.github.io/posts/20240902/</guid>
            <description>我从来没去过千岛湖，我这么和我的爱人说。于是，就有了一场说走就走的自驾游。在我生日的这个节点，二人驱车前往湖光山色之间，度过了很松弛的两日。</description>
            <content type="html"><![CDATA[<p>我从来没去过千岛湖，我这么和我的爱人说。于是，就有了一场说走就走的自驾游。在我生日的这个节点，二人驱车前往湖光山色之间，度过了很松弛的两日。</p>
<p>从杭州出发，两个半小时的车程，幸运的错开了周六早上的出游高峰，路况非常好～</p>
<p>到达千岛湖假日酒店，我们订的家庭湖景房，由于还没有打扫完毕，在大堂等了半小时&hellip;等待期间偷拍我的大美女😊</p>
<p><img src="https://s21.ax1x.com/2024/09/03/pAVax1A.jpg" alt="wait for check in.jpg"></p>
<div align="center">wait for check in</div>
<p><img src="https://s21.ax1x.com/2024/09/03/pAVdktg.jpg" alt="好飒的姐姐.jpg"></p>
<div align="center">好飒的姐姐</div>
<blockquote>
<p>旁边小女孩的目光，被这位走路带风的姐姐吸引～<br/><br/>
PS:一席蓝色的长裙，蓬松的大波浪，把我也迷的不要不要的😄</p>
</blockquote>
<p>入住之后，稍作整顿，老婆在网上搜了一家味道也不错的烘焙店，我们便驱车前去购买小蛋糕🍰。路上的云朵趴在远处的山头上，卷卷舒舒，自在如风。</p>
<p><img src="https://s21.ax1x.com/2024/09/03/pAVd9nP.jpg" alt="安详的云朵.jpg"></p>
<div align="center">安详的云朵</div>
<p>到达一个叫做骑龙巷的地方，是淳安县有名的步行街区。下午三点，牵着爱人的手，漫步在石板路的台阶上，除了太阳有点热，一切都很OK，so sweet💙。</p>
<p><img src="https://s21.ax1x.com/2024/09/03/pAVdSXt.jpg" alt="光影.jpg"></p>
<div align="center">光影</div>
<p>蛋糕先放回酒店，之后便前往一个叫做啤酒小镇的地方，有一处网红打卡地，岸边挤满了人，大家都在为怎么拍出有意境的照片而绞尽脑汁，实际上，随手一拍就很出片～</p>
<p><img src="https://s21.ax1x.com/2024/09/03/pAVaz6I.jpg" alt="灯塔.jpg"></p>
<div align="center">灯塔</div>
<p>风是热热的，但落日的余晖能让人短暂的忽略环境的炎热，踱步看着远山默默的发呆😯</p>
<p><img src="https://s21.ax1x.com/2024/09/03/pAVBLDI.jpg" alt="湖边.jpg"></p>
<div align="center">啤酒小镇的湖边</div>
<p>有一颗升起又降落的热气球，大概离对面二三十米的高度。是否在高处眺望傍晚时分的千岛湖，会美的更醉人一些？</p>
<p><img src="https://s21.ax1x.com/2024/09/03/pAVBHvd.jpg" alt="热气球.jpg"></p>
<div align="center">热气球</div>
<p>老婆在落日下的背影，已和远山融合，佐以恬静的流云，已成为此生最美的风景之一。绝美的日落，才配得上绝美的她～</p>
<p><img src="https://s21.ax1x.com/2024/09/03/pAVBqKA.jpg" alt="背影.jpg"></p>
<div align="center">远山，流云，落日，她</div>
<p><img src="https://s21.ax1x.com/2024/09/06/pAe96IJ.jpg" alt="sunset.jpg"></p>
<div align="center">sunset</div>
<p>过了一阵，火烧云便映红了天边，此时看着湖上站立划桨的人，仿佛深处梦境之中。适合来一杯冰美式🧊，敬自由。</p>
<p><img src="https://s21.ax1x.com/2024/09/07/pAeaJw6.jpg" alt="火烧云.jpg"></p>
<div align="center">火烧云</div>
<p>回到酒店，老婆为我准备了一份很别致的礼物，很惊喜，有香水，有&hellip;😜。看到礼物的那一刻，自己开心的就像一个小孩子。被人疼爱的感觉真好。而这个女人，同样也值得我疼爱。</p>
<p><img src="https://s21.ax1x.com/2024/09/03/pAVBObt.jpg" alt="🍟.jpg"></p>
<div align="center">🍟</div>
<p>稍做休息，来拍拍我的Air Jordan 11，我把它尘封在鞋柜里好久，在生日这天穿上它，和爱人徜徉在湖光山色之间，我觉得此时此刻，它是如此有活力的一双鞋子👟。</p>
<p><img src="https://s21.ax1x.com/2024/09/07/pAeaGex.jpg" alt="Air Jordan 11.jpg"></p>
<div align="center">Air Jordan 11</div>
<p>第二天，开启我们的自驾，在酒店落地窗前拍一张先～</p>
<p><img src="https://s21.ax1x.com/2024/09/09/pAmliwQ.jpg" alt="背影.jpg"></p>
<div align="center">背影</div>
<p>山河之间，我们朝朝暮暮，天长地久。每当我望向她，而她也正好望向我的时候，我们的眼里都有光🌟。</p>
<p><img src="https://s21.ax1x.com/2024/09/09/pAmlFoj.jpg" alt="山风红娘.jpg"></p>
<div align="center">山风红娘</div>
<p>硬生生的把一片游记写成了老婆的写真集哈哈哈哈。其实还有好多好多照片，但我还是选择一个人独享这份炽热🔥。</p>
<iframe src="https://player.bilibili.com/player.html?aid=113101068304667" height="600" width="760" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe>
<p>甜蜜仍在路上，我们的故事未完待续&hellip;</p>
]]></content>
        </item>
        
        <item>
            <title>在泉州</title>
            <link>https://Huang-zh.github.io/posts/20240829/</link>
            <pubDate>Thu, 29 Aug 2024 00:00:00 +0000</pubDate>
            
            <guid>https://Huang-zh.github.io/posts/20240829/</guid>
            <description>整理相册的时候，突然看到一组照片，是2023年春节，自己独自在泉州的时候记录下的风景。 那么，我决定在2024年的8月份，尝试用一种回忆的叙事</description>
            <content type="html"><![CDATA[<p>整理相册的时候，突然看到一组照片，是2023年春节，自己独自在泉州的时候记录下的风景。</p>
<p>那么，我决定在2024年的8月份，尝试用一种回忆的叙事方式，把镜头拉回在泉州流浪的日子里。</p>
<p><img src="https://s21.ax1x.com/2024/08/29/pAARe9f.jpg" alt="东街.jpg"></p>
<div align="center">东街路口</div>
<p>我的第一站，从泉州站直接乘坐的士到达东街，它位于泉州的老城区，和游客打卡地西街相连，但鲜有游客会在东街上漫无目的地游荡。</p>
<p>那天下午，从浙江穿越到这座闽南的城市之后，在路口抬起头，便看到了趴在天上的云朵，有一种久违的松弛感，让前一日还在卖命工作的我感到无比的释然。我对自己说，这几天便让自己在这座城市里好好的流浪。</p>
<p><img src="https://s21.ax1x.com/2024/08/29/pAAWP2T.jpg" alt="东街楼宇.jpg"></p>
<div align="center">东街楼宇</div>
<p>这里的楼宇，透露着强烈的岭南风格，红砖和下午四点的阳光相交辉映，有一种红尘滚滚的美。</p>
<p>它们所呈现的，不是那种江南水乡小镇上统一规划并修缮后的工业古态，而是真实的、令人觉得质朴而恰到好处的，脚踏实地的古早味。</p>
<p>那些本地的市民，骑着小电驴每日穿梭在这样一片建筑群里，想必也很惬意吧。</p>
<p><img src="https://s21.ax1x.com/2024/08/29/pAAWtII.jpg" alt="红砖房.jpg"></p>
<div align="center">红砖房</div>
<p>站在一幢不起眼的两层小楼前，抬头观察了好久，一切都是如此的和谐。</p>
<p><img src="https://s21.ax1x.com/2024/08/29/pAAWBQS.jpg" alt="开元寺西塔.jpg"></p>
<div align="center">开元寺西塔</div>
<p>终究是逛到了西街，逛到了开元寺，充满历史的西塔，在过去好长一段时间内被不断修缮和重建，得以保留今日的面貌。</p>
<p><img src="https://s21.ax1x.com/2024/08/29/pAAhngK.jpg" alt="西街的建筑.jpg"></p>
<div align="center">西街的爬山虎</div>
开元寺外，有一幢满是爬山虎的奶茶店，点缀在成片的红砖里，很吸睛。不喝奶茶只留影...
<p><img src="https://s21.ax1x.com/2024/08/29/pAAhm36.jpg" alt="暗夜织上天空.jpg"></p>
<div align="center">暗夜织上天空</div>
逛着逛着，夜色便接踵而至，在西街的某处，举起手机咔嚓一下，留住这一刻，这稀疏平常的傍晚和寻常巷陌。
<p><img src="https://s21.ax1x.com/2024/08/29/pAAfZ6S.jpg" alt="候阿婆.jpg"></p>
<div align="center">候阿婆</div>
去最有名的店铺：候阿婆烧肉粽，点了一个瑶柱干贝肉粽，一碗肉燕，很爱吃这家的粽子，但就是有点难消化...
<p><img src="https://s21.ax1x.com/2024/08/29/pAAfVl8.jpg" alt="club.jpg"></p>
<div align="center">一个人的club</div>
到了晚上八点多，年关将至，路过一家小酒馆，名字已经记不清，只记得我进去玩了玩老板那把陈旧的吉他（烧火棍的质量...），听众是墙上水缸里的🐟。
<p>点了一杯长岛冰茶，准备喝到微醺，此时店里只有我一个顾客。 事实上，整晚只有我一个顾客。也是，年三十的晚上，谁会一个人在酒吧喝酒呢😄。</p>
<p><img src="https://s21.ax1x.com/2024/08/30/pAAIuvV.jpg" alt="夜街.jpg"></p>
<div align="center">夜街</div>
九点过，泉州这座古城的大部分建筑进入沉睡，唯有西街上还是灯火通明，游客络绎不绝。
<p>其实并没有什么好逛的，开满了小吃店，各种食物混杂的味道反而让我不适应。</p>
<p>于是便找了一处人少的楼顶，吹吹风。腊月里的闽南，晚风却相对温和，气温维持在十几度，湿度适中，作为一个浙江人，很是羡慕这样的气候条件。</p>
<p><img src="https://s21.ax1x.com/2024/08/30/pAAIng0.jpg" alt="教堂.jpg"></p>
<div align="center">天主堂</div>
<p>东街上的天主堂，此时已经亮起外立面上的霓虹灯。在一片宁静的夜色中，凝望着不远处西街的繁华，它是东街这片为数不多的，能在夜晚吸引游客来驻足片刻的建筑了。</p>
<p><img src="https://s21.ax1x.com/2024/08/30/pAAIMuT.jpg" alt="巷尾.jpg"></p>
<div align="center">巷尾</div>
<p>我还在继续往不远处漫游，但是已经离开热闹的西街很久。</p>
<p>深深的巷子里，有两个小孩在放烟花，爽朗的笑声伴随着他们的身影一直往远处飘去。此时可能因为酒劲上头，给我一种怎么追都追不上的感觉。</p>
<p>停下脚步，望着他们的背影在烟雾中隐去，却觉得这般光怪陆离的景象，有种似曾相识的感觉。</p>
<p><img src="https://s21.ax1x.com/2024/08/30/pAAIQDU.jpg" alt="旧馆驿.jpg"></p>
<div align="center">旧馆驿</div>
<p>酒劲愈发的上头，于是便在这小巷里坐下，夜色静默，红砖静默，小巷深处传来几声犬吠。我的呼吸声越来越重🤧。</p>
<p>瞄了一眼边上这户人家的门牌，这条巷子的名称叫做：旧馆驿。这名字一看就是有故事的，所以上网搜了一下，原来它曾经也是泉州城内很热闹的地段。</p>
<p>元代时期，由于泉州对外交通贸易十分发达，官员、中外商人往来频繁，为了给来泉者提供服务，巷内设有一座专供过往官员或信使更换马匹的馆舍，故名馆驿。明代，馆驿迁往西街头北侧（今泉州影剧院附近）的“驿内巷”。在清代，此巷属万厚铺古榕里，时人讹称为“牛仔驿”。</p>
<p>经过了几个朝代，时光精雕细琢之后，沉睡在21世纪。实在是佩服泉州市容管理的水平和格局，这些古建筑、古名能够得以保留，也仰仗他们的决策。泉州这座城市申遗成功，也确实实至名归。</p>
<p><img src="https://s21.ax1x.com/2024/08/30/pAEpgRf.jpg" alt="崇武的海边.jpg"></p>
<div align="center">崇武海边</div>
<p>第二天睡到日晒三竿，醒来后在地图上寻找感兴趣的目的地，想着来一场随性一点的hanging around。</p>
<p>发现大陆的一角有一座古城名叫崇武，是明朝为抵御倭寇入侵所建的一座石头城，离市区两小时车程。于是毅然决定简单吃个午饭，乘坐大巴前往。谁知到达后，古城早已不存在，仅留有城墙，经修缮之后面貌尚可。</p>
<p>遂开始在海边漫无目的游荡，只记得那个下午，躺在礁石上，听着海浪拍打礁石的声音，看着波光粼粼的海面，吹着咸咸的海风，我的内心是无比的放松🏝&hellip;..</p>
<p><img src="https://s21.ax1x.com/2024/08/30/pAEpcJP.jpg" alt="松弛.jpg"></p>
<div align="center">躺着...</div>
<p>抛下了所有的烦恼，思绪伴随着远处的海天一线，越飘越远～</p>
<p><img src="https://s21.ax1x.com/2024/08/30/pAEp6it.jpg" alt="钟楼.jpg"></p>
<div align="center">西街钟楼</div>
<p>时间过得很快，在海边度过了一个非常闲适的下午。回到市区已是傍晚时分，老钟楼亮起，听人说，它将会在那晚敲响2023年的等一声钟声。陆陆续续的人路过，纷纷围着钟楼打卡纪念。</p>
<p>由于我第三天准备去爬清源山，所以便放弃了和大家一起等待新年的钟声🕛。</p>
<p>第三天，一大早便起床，整装待发前往清源山。</p>
<p>清源山位于丰泽区，从我住的酒店能够乘坐公交，半小时便能到达。它与泉州市山城相依，在山顶能够俯瞰刺桐城全貌。</p>
<p><img src="https://s21.ax1x.com/2024/08/30/pAEZFp9.jpg" alt="老君岩.jpg"></p>
<div align="center">老君岩</div>
<p>山脚下的老君岩，是大家的打卡地。清源山海拔虽然不算高，但500米的海拔还是让不少人选择在山脚下徘徊。可那群人不包括我，我选择在正月初二，开始我2023的第一次爬山。</p>
<p>毕竟，我相信更好的风光始终要在高处才能欣赏。</p>
<p><img src="https://s21.ax1x.com/2024/08/30/pAEVxmV.jpg" alt="装起来了.jpg"></p>
<div align="center">装起来了</div>
<p>爬升的过程整体简单，都是石板路台阶。不知不觉便热起来了，脱掉我的始祖鸟外套，来一张背影。</p>
<p><img src="https://s21.ax1x.com/2024/08/30/pAEEzPH.jpg" alt="俯瞰刺桐城.jpg"></p>
<div align="center">俯瞰刺桐城</div>
<p>这个高度已经可以俯瞰泉州面貌了，我住的酒店，就在不远处那一大片湖的边上。非常推荐，泉州中心假日酒店🏨。</p>
<p><img src="https://s21.ax1x.com/2024/08/30/pAEVHYQ.jpg" alt="此外何求.jpg"></p>
<div align="center">此外何求</div>
<p>继续爬升，路过一座山门，像是一位老友给我留下的灵魂拷问，让我陷入深深的沉思💭。</p>
<p>在这山林之间，鸟鸣声不绝于耳，树木的芬芳让我沉醉，得如此美景，使我从容淡定，此外何求？</p>
<p><img src="https://s21.ax1x.com/2024/08/30/pAEVeiQ.jpg" alt="百丈坪.jpg"></p>
<div align="center">百丈坪</div>
<p>终于到达百丈坪，留念一张，这个角度看去，云朵比市区要近，视野逐渐被雾气所笼罩，略显朦胧。</p>
<p>天气一直飘着小雨，我在山顶待了半小时就下山了。</p>
<p><img src="https://s21.ax1x.com/2024/08/30/pAE1aNt.jpg" alt="老君.jpg"></p>
<div align="center">老君</div>
<p><img src="https://s21.ax1x.com/2024/08/30/pAE1aNt.jpg" alt="马.jpg"></p>
<div align="center">奔腾的马</div>
<p>下山的路上看见一些有意思的壁画，很有趣的古今交融哈哈😄。爬完山就回酒店呼呼大睡，一直睡到第二天，想必是自己平日的工作积攒了太多疲劳。</p>
<p>第四天上午，简单去逛了一下关帝庙和文庙（结果文庙没有开放。。。），对关帝庙鼎盛的烟火感到震惊，闽南不愧是一个佛教源远流长的省份🤨。</p>
<p><img src="https://s21.ax1x.com/2024/08/30/pAE109f.jpg" alt="关帝庙.jpg"></p>
<div align="center">关帝庙</div>
<p>而文庙的人流量明显少很多，看起来更像一座砌满红砖的后花园，适合捧一杯美式咖啡，在大榕树下坐很久～
<img src="https://s21.ax1x.com/2024/08/30/pAE1B38.jpg" alt="文庙.jpg"></p>
<div align="center">文庙</div>
<p>在泉州的几日，短暂却松弛，给自己留下了难以磨灭的印象，期待下一次故地重游，能够有新的收获。</p>
]]></content>
        </item>
        
        <item>
            <title>自在如风</title>
            <link>https://Huang-zh.github.io/posts/20240827/</link>
            <pubDate>Tue, 27 Aug 2024 00:00:00 +0000</pubDate>
            
            <guid>https://Huang-zh.github.io/posts/20240827/</guid>
            <description>自在如风这个词，是从我的爱人那里第一次听说的。 遇见她之后，生活也添了些色彩，我开始去了解很多从前没尝试过的事物。 做陶艺，吃舒芙蕾，涉足这座城</description>
            <content type="html"><![CDATA[<p>自在如风这个词，是从我的爱人那里第一次听说的。</p>
<p>遇见她之后，生活也添了些色彩，我开始去了解很多从前没尝试过的事物。</p>
<p>做陶艺，吃舒芙蕾，涉足这座城市里尚未到达过的地方。。。</p>
<p>我开始慢慢的意识到，生活和工作分开的意义，是为了能让自己活得更像一个正常人。</p>
<p>过去没日没夜的加班，为工作倾尽所有貌似并没有带给我什么，反而让我的激情日渐消磨，同时增长了一身肥膘。</p>
<p>现在，当下，我认为我的一生不应该如此。</p>
<p>我们的社会规则，导致了普通人只能活在高压下。同样的，对一个人的评判体系也非常单一，大家都在为了自己的生计而奔波，疲于奔命。</p>
<p>但，尊严是自己给的，学会主宰自己的时间，才是为自己而活。</p>
<p>有时候停下来，聆听自己的内心的真实想法，认真的审视一下当下的处境是否是自己一直向往并追寻的？。</p>
<p>我认为适时的关注内心，这是一种不错的选择，能让自己更有原则的去做任何事情，更加遵循那个真实的自己。</p>
<p>自在如风，就是要做自己的风，吹起自己的梦。</p>
]]></content>
        </item>
        
        <item>
            <title>我的篮球</title>
            <link>https://Huang-zh.github.io/posts/20240819/</link>
            <pubDate>Mon, 19 Aug 2024 00:00:00 +0000</pubDate>
            
            <guid>https://Huang-zh.github.io/posts/20240819/</guid>
            <description>我有一颗篮球，静静的蜷缩在阳台的角落上很久，落了很厚很厚的灰。 我没有心思擦拭它，即使近日里我曾想过去拍拍它，就像我曾经隔三差五那样。 但无比繁</description>
            <content type="html"><![CDATA[<p>我有一颗篮球，静静的蜷缩在阳台的角落上很久，落了很厚很厚的灰。</p>
<p>我没有心思擦拭它，即使近日里我曾想过去拍拍它，就像我曾经隔三差五那样。</p>
<p>但无比繁琐的工作，却像枷锁一般牢牢的扣住我，耗光了我所有的精力。</p>
<p>我的篮球对我说，你不能再这样下去了。</p>
<p>我对自己说，我不能再这样下去了。</p>
<p>没错，我不能再这样下去了。</p>
]]></content>
        </item>
        
        <item>
            <title>立秋日记</title>
            <link>https://Huang-zh.github.io/posts/20240808/</link>
            <pubDate>Thu, 08 Aug 2024 00:00:00 +0000</pubDate>
            
            <guid>https://Huang-zh.github.io/posts/20240808/</guid>
            <description>甲辰龙年，七月初五，立秋已过。 今年我身处的环境异常寒冷，和当下白日里超过四十摄氏度的气温大相径庭。 眼下的光景，正直盛夏，路上的蝉鸣不绝于耳，</description>
            <content type="html"><![CDATA[<p>甲辰龙年，七月初五，立秋已过。</p>
<p>今年我身处的环境异常寒冷，和当下白日里超过四十摄氏度的气温大相径庭。</p>
<p>眼下的光景，正直盛夏，路上的蝉鸣不绝于耳，它们在这个夏天无疑会燃尽自己的生命。</p>
<p>午间我和同事常常经过的那条河边小路，树木总是郁郁葱葱，两旁齐腰高的野草还在野蛮生长，蓝天白云，光影斑驳。</p>
<p>一片充满活力的景象，正直当打之年。</p>
<p>可是却在这个时节，一次降薪，一场裁员，很多人被迫离开了公司，甚至提前结束了自己的职业生涯。</p>
<p>或许，他们曾经也是初入社会饱含梦想的少年，也在漫长的职业生涯中习得了不少的技能。</p>
<p>到达这一步，这样一个水平，毋庸置疑的，需要长年累月的积累。</p>
<p>可时代的一粒灰，落在任何普通人的头上，都成了一座难以逾越的大山。</p>
<p>我记得前些日子的早会，刚和一位同事沟通完工作上的细节。而午休结束时，他的位置已经被搬空，空旷的像这个人从来没有出现过&hellip;</p>
<p>这是梦想与现实的割裂，是这个大环境的悲哀。身处这样的时代，个体除了随波逐流，已然没有太多的选择余地。</p>
<p>进入下行周期，一切都在往谷底俯冲，那么就好好锻炼，好好生活。</p>
<p>这个世界仍然充满美好的风景，值得我们去涉足，去追逐。</p>
]]></content>
        </item>
        
        <item>
            <title>一些思绪</title>
            <link>https://Huang-zh.github.io/posts/20240612/</link>
            <pubDate>Wed, 12 Jun 2024 00:00:00 +0000</pubDate>
            
            <guid>https://Huang-zh.github.io/posts/20240612/</guid>
            <description>时间来到了2024年，甲辰龙年，正直初夏，芒种才过，雨水很多。 今年他的吉他更加陈旧了，弦枕处的裂痕更深了，那是时间流逝的痕迹。 像是一位老朋友</description>
            <content type="html"><![CDATA[<p>时间来到了2024年，甲辰龙年，正直初夏，芒种才过，雨水很多。</p>
<p>今年他的吉他更加陈旧了，弦枕处的裂痕更深了，那是时间流逝的痕迹。</p>
<p>像是一位老朋友，经历了很多岁月，熟悉的不能再熟悉。</p>
<p>掐指一算，这把琴已经相伴他左右十个年头，如弹指一挥间，书上说的白驹过隙大抵就是如此。</p>
<p>斑驳的护板，锈迹斑斑的品丝，以及褪去颜色的商标。始终不舍得更换任意一个零部件。</p>
<p>无数个深夜，拨动琴弦的时候，无数杂糅的感觉就涌上心头。</p>
<p>那是彼时为梦想付出的努力，为挫折而发泄的负面情绪。</p>
<p>那些无人问津的夜晚，在清亮的月光下倾诉着去成长。</p>
<p><br/><br/></p>
<p>无他，今夜脑子里闪过很多记忆里的画面。跑马灯一般放映着过去的时光，光怪陆离，璀璨耀眼。</p>
<p>所以就在这个夏夜，蝉鸣到来之际，记录一点自己杂乱无章的思绪。吹散在躁动的晚风里。</p>
]]></content>
        </item>
        
        <item>
            <title>云交易系统开发手册</title>
            <link>https://Huang-zh.github.io/posts/native-trade-system-devlop-log/</link>
            <pubDate>Sat, 02 Mar 2024 00:00:00 +0000</pubDate>
            
            <guid>https://Huang-zh.github.io/posts/native-trade-system-devlop-log/</guid>
            <description>1. 依赖和中间件 open-jdk 17.0.7 graalvm 22.3.2 Maven 3.6.3 nacos 2.2.3 Redis 6.0 Mysql 8.0 Springboot 3.0.6 SpringCloud Alibaba 2022.0.0.0 mybatis-plus 3.5.3 Seata 1.7.0 Netty 4.1.99 Disruptor 4.0.0 2. 模块总览 模块名 中文名 备注 native-cloud-user-system 交易账户系统 用于维护证券交易账户数据，负责客户开</description>
            <content type="html"><![CDATA[<h3 id="1-依赖和中间件">1. 依赖和中间件</h3>
<ul>
<li>open-jdk 17.0.7</li>
<li>graalvm 22.3.2</li>
<li>Maven 3.6.3</li>
<li>nacos 2.2.3</li>
<li>Redis 6.0</li>
<li>Mysql 8.0</li>
<li>Springboot 3.0.6</li>
<li>SpringCloud Alibaba 2022.0.0.0</li>
<li>mybatis-plus 3.5.3</li>
<li>Seata 1.7.0</li>
<li>Netty 4.1.99</li>
<li>Disruptor 4.0.0</li>
</ul>
<h3 id="2-模块总览">2. 模块总览</h3>
<table>
<thead>
<tr>
<th style="text-align:center">模块名</th>
<th style="text-align:center">中文名</th>
<th style="text-align:center">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">native-cloud-user-system</td>
<td style="text-align:center">交易账户系统</td>
<td style="text-align:center">用于维护证券交易账户数据，负责客户开户、适当性、风险评估等常规运营操作。</td>
</tr>
<tr>
<td style="text-align:center">native-cloud-qms-system</td>
<td style="text-align:center">交易额度系统</td>
<td style="text-align:center">用于维护日间交易信用业务头寸、申报流水号区间等交易关键辅助信息。</td>
</tr>
<tr>
<td style="text-align:center">native-cloud-compact</td>
<td style="text-align:center">信用合约系统</td>
<td style="text-align:center">用于维护日间信用交易产生的合约信息，提供对合约进行清算、展期、结息罚息等操作。</td>
</tr>
<tr>
<td style="text-align:center">native-cloud-credit-trade</td>
<td style="text-align:center">信用交易系统</td>
<td style="text-align:center">提供日间融资融券业务入口，供信用客户进行融资融券日间交易。</td>
</tr>
<tr>
<td style="text-align:center">native-cloud-gateway</td>
<td style="text-align:center">交易网关</td>
<td style="text-align:center">所有日间交易、运营业务的入口，后续将建设包含根据具体账户定位至具体交易核心的功能，实现多分片定位。</td>
</tr>
<tr>
<td style="text-align:center">native-cloud-system-api</td>
<td style="text-align:center">交易交互组件</td>
<td style="text-align:center">包含各交易子系统相互调用的api、数据载体。</td>
</tr>
<tr>
<td style="text-align:center">native-cloud-common</td>
<td style="text-align:center">交易通用组件</td>
<td style="text-align:center">包含交易子系统公用工具类、配置类等关键可插拔功能的启动项。</td>
</tr>
</tbody>
</table>
<h4 id="21-模块简介">2.1 模块简介</h4>
<p>todo&hellip;</p>
<h3 id="3-部署事项">3. 部署事项</h3>
<h4 id="31-部署命令">3.1 部署命令：</h4>
<ul>
<li>
<p>建议每个模块都在idea中添加两个启动配置项</p>
<ul>
<li>Native-cloud-xxx-debug：用于本地idea调试功能使用</li>
<li>Native-cloud-xxx-preCompile：用于Native打包镜像，需要添加VM参数命令：
<ul>
<li>-agentlib:native-image-agent=config-output-dir=/你的idea workspace目录/native-cloud-system/native-cloud-xxx-system/src/main/resources/META-INF/native-image/native-cloud-xxx-system</li>
<li>添加VM参数启动后，随机通过调试请求工具（如postman）访问该模块子系统几个功能（也可以不做这一步，只是为了确保native-image打包时所有代码组件均能够被链接），然后停止该模块，会在该模块的src/main/resources/META-INF/native-image/native-cloud-xxx-system目录下生成打包所需的json配置文件，这些文件中指定了源代码中通过反射、代理等途径创建的对象，只有成功生成这些配置文件，native-image打包成本地镜像才不会报错。</li>
</ul>
</li>
<li>native-image执行打包命令：
<ul>
<li>mvn -e -Pnative -DskipTests=true native:compile</li>
</ul>
</li>
</ul>
</li>
<li>
<p>建议在部署模块之前，先通过mvn clean install将本地所有模块的改动都打入本地maven repo中去。</p>
</li>
<li>
<p>nacos本地启动命令：</p>
<ul>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo sh ./startup.sh -m standalone
</code></pre></div></li>
</ul>
</li>
<li>
<p>seata本地启动命令：</p>
<ul>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sh ./seata-server.sh
</code></pre></div></li>
<li>
<p>同时注意，seata的端口配置默认为7091，如果要更改默认启动端口，要在seata/conf/application.yml中打开如下配置：</p>
<ul>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">server:
  port: <span style="color:#ae81ff">8091</span>
</code></pre></div></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="4-部署常见问题">4. 部署常见问题</h3>
<ul>
<li>
<p>镜像打包成功，但Mybatis相关类报错：ClassNotFound</p>
<ul>
<li>检查该模块启动类上是否有注解@EnableNativeHints，只有引入了该注解，才能让mybatis-plus在打包成本地镜像后正常工作。</li>
</ul>
</li>
<li>
<p>镜像打包成功，但Jwt相关类报错：DefaultJwtParser：ClassNotFound</p>
<ul>
<li>检查该模块对应打包配置目录下的proxy-config.json文件中有没有指定DefaultJwtParser，若没有指定则说明该类和其相关的模块均未被链接，需要使用对应模块的preCompile启动项启动该类，调用一次流程中使用了DefaultJwtParser的功能，再停止该模块，能够使proxy-config文件写入该类，再重新执行打包命令即可。</li>
</ul>
</li>
<li>
<p>执行native-image打包命令过程中报错：nosuchmethoderror</p>
<ul>
<li>如果是在一个之前能够正常工作的class中添加了新方法，那么需要让maven重新生成该类的安装包，执行mvn clean install即可。</li>
<li>如果是javabean中不存在getXXX或setXXX方法，检查是否使用lombok的@data、@AllArgsConstructor等注解，另外，不建议在项目中使用lombok。</li>
</ul>
</li>
<li>
<p>gateway无法转发请求到正确的子模块：</p>
<ul>
<li>检查gateway下的配置文件routes节点中是否已添加子模块的路由。</li>
<li>如果是新加的模块，由于AOT提前编译的局限性，需要在gateway目录下增加一个对应模块的OpenFeignClient，这样才能确保OpenFeign相关的配置类提前被链接。</li>
</ul>
</li>
<li>
<p>mybatis-plus使用lambda查询方式报错：</p>
</li>
<li>
<p>目前mybatis官方暂未出补丁修复AOT模式下lambda查询失效的问题，虽然github上issue已经存在，建议避开wrapper查询，自行在mapper中增加查询方法进行业务上的适配。</p>
</li>
<li>
<p>打包成native-image执行时，插入到mysql的中文字段乱码：</p>
<ul>
<li>show full columns from <schema>.<tablename>，确保数据库表字段的字符集是UTF8编码。</li>
<li>检查配置文件中jdbc-url配置，由于使用了hikariCP作为数据源，characterEncoding=uft8才能起到使用UTF8中文字符集的作用。</li>
</ul>
</li>
<li>
<p>native镜像RPC报错： java.lang.IllegalArgumentException: Object of class [org.springframework.context.support.GenericApplicationContext] must be an instance of interface org.springframework.context.annotation.AnnotationConfigRegistry] with root cause</p>
<ul>
<li>
<p>在对应的调用方模块配置文件中加入openfeign相关AOT配置，以qms-system调用user-system为例，需在qms-system模块的配置文件中加入如下内容：</p>
<ul>
<li>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#f92672">spring</span>:
  <span style="color:#f92672">cloud</span>:
    <span style="color:#f92672">refresh</span>:
      <span style="color:#f92672">enabled</span>: <span style="color:#66d9ef">false</span>
    <span style="color:#f92672">openfeign</span>:
      <span style="color:#75715e"># 支持AOT编译openfeign调用配置项 begin</span>
      <span style="color:#f92672">client</span>:
        <span style="color:#f92672">refresh-enabled</span>: <span style="color:#66d9ef">false</span>
        <span style="color:#f92672">config</span>:
          <span style="color:#f92672">user-system</span>:
            <span style="color:#f92672">urls</span>: <span style="color:#ae81ff">http://127.0.0.1:8880</span>
      <span style="color:#f92672">lazy-attributes-resolution</span>: <span style="color:#66d9ef">false</span>
    <span style="color:#f92672">loadbalancer</span>:
      <span style="color:#f92672">ribbon</span>:
        <span style="color:#f92672">enabled</span>: <span style="color:#66d9ef">false</span>
      <span style="color:#f92672">nacos</span>:
        <span style="color:#f92672">enabled</span>: <span style="color:#66d9ef">true</span>
      <span style="color:#f92672">eager-load</span>:
        <span style="color:#f92672">clients</span>:
          - <span style="color:#ae81ff">user-system</span>
      <span style="color:#f92672">cache</span>:
        <span style="color:#f92672">enabled</span>: <span style="color:#66d9ef">true</span>
      <span style="color:#75715e"># 支持AOT编译openfeign调用配置项 end</span>
</code></pre></div></li>
<li>
<p>如果下游服务（上述例子user-system）为集群部署，由于AOT需要提前加载指定订阅服务的列表，所以user-system.urls中需要配置集群中所有节点的ip:port。</p>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>全局错误处理失败，报错：No acceptable representation</p>
<ul>
<li>检查返回的result实现类是否有成员变量的get\set方法。</li>
</ul>
</li>
<li>
<p>集成seata之后，使用nacos作为配置中心，控制台报错，nacos-server端登录错误，完整错误如下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">2023<span style="color:#f92672">-</span>12<span style="color:#f92672">-</span>09T13<span style="color:#f92672">:</span>14<span style="color:#f92672">:</span>38<span style="color:#f92672">.</span><span style="color:#a6e22e">423</span><span style="color:#f92672">+</span>08<span style="color:#f92672">:</span>00 ERROR 2971 <span style="color:#f92672">---</span> <span style="color:#f92672">[</span>s<span style="color:#f92672">.</span><span style="color:#a6e22e">client</span><span style="color:#f92672">.</span><span style="color:#a6e22e">Worker</span><span style="color:#f92672">]</span> c<span style="color:#f92672">.</span><span style="color:#a6e22e">a</span><span style="color:#f92672">.</span><span style="color:#a6e22e">n</span><span style="color:#f92672">.</span><span style="color:#a6e22e">c</span><span style="color:#f92672">.</span><span style="color:#a6e22e">a</span><span style="color:#f92672">.</span><span style="color:#a6e22e">i</span><span style="color:#f92672">.</span><span style="color:#a6e22e">process</span><span style="color:#f92672">.</span><span style="color:#a6e22e">HttpLoginProcessor</span>   <span style="color:#f92672">:</span> login failed<span style="color:#f92672">:</span> <span style="color:#f92672">{</span><span style="color:#e6db74">&#34;code&#34;</span><span style="color:#f92672">:</span>500<span style="color:#f92672">,</span><span style="color:#e6db74">&#34;message&#34;</span><span style="color:#f92672">:</span><span style="color:#e6db74">&#34;caused: Cannot invoke \&#34;com.alibaba.nacos.plugin.auth.impl.jwt.NacosJwtParser.getExpireTimeInSeconds(String)\&#34; because \&#34;this.jwtParser\&#34; is null;&#34;</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#34;header&#34;</span><span style="color:#f92672">:{</span><span style="color:#e6db74">&#34;header&#34;</span><span style="color:#f92672">:{</span><span style="color:#e6db74">&#34;Accept-Charset&#34;</span><span style="color:#f92672">:</span><span style="color:#e6db74">&#34;UTF-8&#34;</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#34;Authorization&#34;</span><span style="color:#f92672">:</span><span style="color:#e6db74">&#34;Bearer&#34;</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#34;Connection&#34;</span><span style="color:#f92672">:</span><span style="color:#e6db74">&#34;close&#34;</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#34;Content-Length&#34;</span><span style="color:#f92672">:</span><span style="color:#e6db74">&#34;142&#34;</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#34;Content-Security-Policy&#34;</span><span style="color:#f92672">:</span><span style="color:#e6db74">&#34;script-src &#39;self&#39;&#34;</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#34;Content-Type&#34;</span><span style="color:#f92672">:</span><span style="color:#e6db74">&#34;text/html;charset=UTF-8&#34;</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#34;Date&#34;</span><span style="color:#f92672">:</span><span style="color:#e6db74">&#34;Sat, 09 Dec 2023 05:14:38 GMT&#34;</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#34;Vary&#34;</span><span style="color:#f92672">:</span><span style="color:#e6db74">&#34;Access-Control-Request-Headers&#34;</span><span style="color:#f92672">},</span><span style="color:#e6db74">&#34;originalResponseHeader&#34;</span><span style="color:#f92672">:{</span><span style="color:#e6db74">&#34;Authorization&#34;</span><span style="color:#f92672">:[</span><span style="color:#e6db74">&#34;Bearer&#34;</span><span style="color:#f92672">],</span><span style="color:#e6db74">&#34;Connection&#34;</span><span style="color:#f92672">:[</span><span style="color:#e6db74">&#34;close&#34;</span><span style="color:#f92672">],</span><span style="color:#e6db74">&#34;Content-Length&#34;</span><span style="color:#f92672">:[</span><span style="color:#e6db74">&#34;142&#34;</span><span style="color:#f92672">],</span><span style="color:#e6db74">&#34;Content-Security-Policy&#34;</span><span style="color:#f92672">:[</span><span style="color:#e6db74">&#34;script-src &#39;self&#39;&#34;</span><span style="color:#f92672">],</span><span style="color:#e6db74">&#34;Content-Type&#34;</span><span style="color:#f92672">:[</span><span style="color:#e6db74">&#34;text/html;charset=UTF-8&#34;</span><span style="color:#f92672">],</span><span style="color:#e6db74">&#34;Date&#34;</span><span style="color:#f92672">:[</span><span style="color:#e6db74">&#34;Sat, 09 Dec 2023 05:14:38 GMT&#34;</span><span style="color:#f92672">],</span><span style="color:#e6db74">&#34;Vary&#34;</span><span style="color:#f92672">:[</span><span style="color:#e6db74">&#34;Access-Control-Request-Headers&#34;</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#34;Access-Control-Request-Method&#34;</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#34;Origin&#34;</span><span style="color:#f92672">]},</span><span style="color:#e6db74">&#34;charset&#34;</span><span style="color:#f92672">:</span><span style="color:#e6db74">&#34;UTF-8&#34;</span><span style="color:#f92672">}}</span>

</code></pre></div><ul>
<li>原因是nacos使用的2.2.3版本默认取消了登录验证，所以注释掉工程对应的配置文件中的username和password配置项，需要注意的是seata.config.nacos和seata.config.registry均需要注释用户名和密码。</li>
</ul>
</li>
<li>
<p>集成seata，使用nacos做配置中心，控制台报错：service.vgroupMapping.native-cloud-system-group配置为空：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">io<span style="color:#f92672">.</span><span style="color:#a6e22e">seata</span><span style="color:#f92672">.</span><span style="color:#a6e22e">config</span><span style="color:#f92672">.</span><span style="color:#a6e22e">exception</span><span style="color:#f92672">.</span><span style="color:#a6e22e">ConfigNotFoundException</span><span style="color:#f92672">:</span> service<span style="color:#f92672">.</span><span style="color:#a6e22e">vgroupMapping</span><span style="color:#f92672">.</span><span style="color:#a6e22e">native</span><span style="color:#f92672">-</span>cloud<span style="color:#f92672">-</span>system<span style="color:#f92672">-</span>group configuration item is required
</code></pre></div><ul>
<li>
<p>先检查工程模块下seata.config.nacos.group的值，发现配置项中定义去group为SEATA_GROUP的组中去获取配置：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#f92672">seata</span>:
  <span style="color:#f92672">tx-service-group</span>: <span style="color:#ae81ff">native-cloud-system-group</span>
  <span style="color:#f92672">service</span>:
    <span style="color:#f92672">tx-service-group</span>: <span style="color:#ae81ff">native-cloud-system-group</span>
    <span style="color:#f92672">vgroup-mapping</span>:
      <span style="color:#f92672">native-cloud-system-group</span>: <span style="color:#ae81ff">native</span>
  <span style="color:#f92672">config</span>:
    <span style="color:#f92672">type</span>: <span style="color:#ae81ff">nacos</span>
    <span style="color:#f92672">nacos</span>:
      <span style="color:#f92672">server-addr</span>: <span style="color:#ae81ff">127.0.0.1</span>:<span style="color:#ae81ff">8848</span>
      <span style="color:#f92672">group</span>: <span style="color:#ae81ff">SEATA_GROUP</span>
</code></pre></div></li>
<li>
<p>再检查nacos dashboard中，namespace为public下(因为seata.config.nacos.namespace未配置，所以采用默认命名空间)是否添加了DataId为service.vgroupMapping.native-cloud-system-group且group为SEATA_GROUP的配置，如果没有，按照上述的条件添加一条配置，配置的值为：SEATA_GROUP。</p>
</li>
</ul>
</li>
<li>
<p>集成seata，集群订阅报错：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#f92672">[</span>timeoutChecker_1_1<span style="color:#f92672">]</span> ERROR i<span style="color:#f92672">.</span><span style="color:#a6e22e">s</span><span style="color:#f92672">.</span><span style="color:#a6e22e">c</span><span style="color:#f92672">.</span><span style="color:#a6e22e">r</span><span style="color:#f92672">.</span><span style="color:#a6e22e">n</span><span style="color:#f92672">.</span><span style="color:#a6e22e">NettyClientChannelManager</span><span style="color:#f92672">:</span>188 <span style="color:#f92672">--&gt;</span> no available service found in cluster <span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#66d9ef">default</span><span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#f92672">,</span> please make sure registry config correct and keep your seata server running
</code></pre></div><ul>
<li>确认seata-server端配置文件中seata.registry.nacos.cluster的值，和客户端从nacos拉取的配置文件中dataID为<strong>service.vgroupMapping.native-cloud-system-group</strong>中的值相等。</li>
</ul>
</li>
<li>
<p>@GlobalTransactional，TCC模式只执行一阶段try的逻辑，不执行二阶段提交：</p>
<ul>
<li>
<p>断点打入GlobalTransactionalInterceptor中invoke方法，重点调试GlobalTransactional注解获取的过程：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">final</span> GlobalTransactional globalTransactionalAnnotation <span style="color:#f92672">=</span> getAnnotation<span style="color:#f92672">(</span>method<span style="color:#f92672">,</span> targetClass<span style="color:#f92672">,</span> GlobalTransactional<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">);</span>
</code></pre></div><p>查看method变量的方法名是否和业务代码中GlobalTransactional注解标记的方法名一致。</p>
</li>
</ul>
</li>
<li>
<p>集成seata，客户端启动后报错：RM can not reconnect server</p>
<ul>
<li>
<p>用下面的命令指定ip和端口重启seata-server:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">./seata-server.sh -h 127.0.0.1 -p <span style="color:#ae81ff">8091</span>
</code></pre></div></li>
</ul>
</li>
<li>
<p>集成seata后，分布式事务执行过程中报错：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">java<span style="color:#f92672">.</span><span style="color:#a6e22e">sql</span><span style="color:#f92672">.</span><span style="color:#a6e22e">SQLSyntaxErrorException</span><span style="color:#f92672">:</span> Table <span style="color:#960050;background-color:#1e0010">&#39;</span>credit<span style="color:#f92672">.</span><span style="color:#a6e22e">undo_log</span><span style="color:#960050;background-color:#1e0010">&#39;</span> doesn<span style="color:#960050;background-color:#1e0010">&#39;</span>t exist
</code></pre></div><ul>
<li>
<p>发生在向数据库表进行insert记录的动作中，检查执行sql insert操作的方法是否已实现本地TccService，由于使用了seata代理了Datasource，不实现TccService情况下则会在插入时使用mysql默认的undolog表记录日志，而代理后的数据源无法获取mysql自带undolog，将执行insert语句的方法实现TccService即可，可参考下面委托表对应的TccService：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#a6e22e">@LocalTCC</span>
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">CreditEntrustTccService</span> <span style="color:#f92672">{</span>

    <span style="color:#a6e22e">@TwoPhaseBusinessAction</span><span style="color:#f92672">(</span>name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;generateCreditEntrust&#34;</span><span style="color:#f92672">,</span> commitMethod <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;generateCreditEntrustCommit&#34;</span><span style="color:#f92672">,</span> rollbackMethod <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;generateCreditEntrustRollback&#34;</span><span style="color:#f92672">)</span>
    Long <span style="color:#a6e22e">generateCreditEntrust</span><span style="color:#f92672">(</span><span style="color:#a6e22e">@BusinessActionContextParameter</span><span style="color:#f92672">(</span>paramName <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;creditEntrust&#34;</span><span style="color:#f92672">)</span> CreditEntrust creditEntrust<span style="color:#f92672">,</span>
                             <span style="color:#a6e22e">@BusinessActionContextParameter</span><span style="color:#f92672">(</span>paramName <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;entrustProperty&#34;</span><span style="color:#f92672">)</span> EntrustProperty entrustProperty<span style="color:#f92672">);</span>

    Boolean <span style="color:#a6e22e">generateCreditEntrustCommit</span><span style="color:#f92672">(</span>BusinessActionContext businessActionContext<span style="color:#f92672">);</span>

    Boolean <span style="color:#a6e22e">generateCreditEntrustRollback</span><span style="color:#f92672">(</span>BusinessActionContext businessActionContext<span style="color:#f92672">);</span>
<span style="color:#f92672">}</span>
</code></pre></div></li>
</ul>
</li>
<li>
<p>OpenFeign报错feign.RetryableException: too many bytes written executing</p>
<ul>
<li>
<p>RPC传对象的时候造成请求体序列化后的字节数过多，需要取消openFeign拦截器中从前端请求带来的content-length限制，在项目下找到FeignBasicAuthRequestInterceptor并在遍历请求header循环中加入如下代码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>name<span style="color:#f92672">.</span><span style="color:#a6e22e">equals</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;content-length&#34;</span><span style="color:#f92672">)){</span>
  	<span style="color:#66d9ef">continue</span><span style="color:#f92672">;</span>
<span style="color:#f92672">}</span>
</code></pre></div></li>
</ul>
</li>
<li>
<p>jdk17 使用annotation processor处理编译期注解，mvn install 注解处理器模块报错：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">服务配置文件不正确<span style="color:#f92672">,</span> 或构造处理程序对象javax<span style="color:#f92672">.</span><span style="color:#a6e22e">annotation</span><span style="color:#f92672">.</span><span style="color:#a6e22e">processing</span><span style="color:#f92672">.</span><span style="color:#a6e22e">Processor</span><span style="color:#f92672">:</span> Provider com<span style="color:#f92672">.</span><span style="color:#a6e22e">huang</span><span style="color:#f92672">.</span><span style="color:#a6e22e">ast</span><span style="color:#f92672">.</span><span style="color:#a6e22e">processor</span><span style="color:#f92672">.</span><span style="color:#a6e22e">LemonCompileProcessor</span> not found时抛出异常错误

</code></pre></div><ul>
<li>
<p>确保处理器模块maven的配置文件中加入如下配置项</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml">		<span style="color:#f92672">&lt;build&gt;</span>
        <span style="color:#f92672">&lt;plugins&gt;</span>
            <span style="color:#f92672">&lt;plugin&gt;</span>
                <span style="color:#f92672">&lt;groupId&gt;</span>org.apache.maven.plugins<span style="color:#f92672">&lt;/groupId&gt;</span>
                <span style="color:#f92672">&lt;artifactId&gt;</span>maven-compiler-plugin<span style="color:#f92672">&lt;/artifactId&gt;</span>
                <span style="color:#f92672">&lt;configuration&gt;</span>
                  	<span style="color:#75715e">&lt;!-- 此项必须 --&gt;</span>
                    <span style="color:#f92672">&lt;proc&gt;</span>none<span style="color:#f92672">&lt;/proc&gt;</span>
                    <span style="color:#f92672">&lt;compilerArgs&gt;</span>
                      	<span style="color:#75715e">&lt;!-- 下面四项arg也建议加上，这样执行mvn compile命令会加上下面的参数，确保字节码增强所依赖的javac模块不会无法访问--&gt;</span>
                        <span style="color:#f92672">&lt;arg&gt;</span>--add-exports=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED<span style="color:#f92672">&lt;/arg&gt;</span>
                        <span style="color:#f92672">&lt;arg&gt;</span>--add-exports=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED<span style="color:#f92672">&lt;/arg&gt;</span>
                        <span style="color:#f92672">&lt;arg&gt;</span>--add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED<span style="color:#f92672">&lt;/arg&gt;</span>
                        <span style="color:#f92672">&lt;arg&gt;</span>--add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED<span style="color:#f92672">&lt;/arg&gt;</span>
                    <span style="color:#f92672">&lt;/compilerArgs&gt;</span>
                <span style="color:#f92672">&lt;/configuration&gt;</span>
            <span style="color:#f92672">&lt;/plugin&gt;</span>
        <span style="color:#f92672">&lt;/plugins&gt;</span>
    <span style="color:#f92672">&lt;/build&gt;</span>
</code></pre></div></li>
</ul>
</li>
<li>
<p>jdk17 使用annotation processor处理编译期注解，mvn install 注解处理器模块时代码构建不通过，报如下错误：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">com<span style="color:#f92672">.</span><span style="color:#a6e22e">sun</span><span style="color:#f92672">.</span><span style="color:#a6e22e">tools</span><span style="color:#f92672">.</span><span style="color:#a6e22e">javac</span><span style="color:#f92672">.</span><span style="color:#a6e22e">api不可见</span>
com<span style="color:#f92672">.</span><span style="color:#a6e22e">sun</span><span style="color:#f92672">.</span><span style="color:#a6e22e">tools</span><span style="color:#f92672">.</span><span style="color:#a6e22e">javac</span><span style="color:#f92672">.</span><span style="color:#a6e22e">processing不可见</span>
com<span style="color:#f92672">.</span><span style="color:#a6e22e">sun</span><span style="color:#f92672">.</span><span style="color:#a6e22e">tools</span><span style="color:#f92672">.</span><span style="color:#a6e22e">javac</span><span style="color:#f92672">.</span><span style="color:#a6e22e">tree不可见</span>
com<span style="color:#f92672">.</span><span style="color:#a6e22e">sun</span><span style="color:#f92672">.</span><span style="color:#a6e22e">tools</span><span style="color:#f92672">.</span><span style="color:#a6e22e">javac</span><span style="color:#f92672">.</span><span style="color:#a6e22e">util不可见</span>
</code></pre></div><ul>
<li>
<p>由于jdk9 引入了jigsaw特性，原本javac所在的tools.jar被模块化，需要在idea设置中找到 Build,Execution,Deployment &ndash;&gt; Compiler &ndash;&gt; Java Complier &ndash;&gt; override complier parameters  per module，确保处理器模块export如下jdk自带模块：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#f92672">-</span>parameters
<span style="color:#f92672">--</span>add<span style="color:#f92672">-</span>exports<span style="color:#f92672">=</span>jdk<span style="color:#f92672">.</span><span style="color:#a6e22e">compiler</span><span style="color:#f92672">/</span>com<span style="color:#f92672">.</span><span style="color:#a6e22e">sun</span><span style="color:#f92672">.</span><span style="color:#a6e22e">tools</span><span style="color:#f92672">.</span><span style="color:#a6e22e">javac</span><span style="color:#f92672">.</span><span style="color:#a6e22e">processing</span><span style="color:#f92672">=</span>ALL<span style="color:#f92672">-</span>UNNAMED
<span style="color:#f92672">--</span>add<span style="color:#f92672">-</span>exports<span style="color:#f92672">=</span>jdk<span style="color:#f92672">.</span><span style="color:#a6e22e">compiler</span><span style="color:#f92672">/</span>com<span style="color:#f92672">.</span><span style="color:#a6e22e">sun</span><span style="color:#f92672">.</span><span style="color:#a6e22e">tools</span><span style="color:#f92672">.</span><span style="color:#a6e22e">javac</span><span style="color:#f92672">.</span><span style="color:#a6e22e">api</span><span style="color:#f92672">=</span>ALL<span style="color:#f92672">-</span>UNNAMED
<span style="color:#f92672">--</span>add<span style="color:#f92672">-</span>exports<span style="color:#f92672">=</span>jdk<span style="color:#f92672">.</span><span style="color:#a6e22e">compiler</span><span style="color:#f92672">/</span>com<span style="color:#f92672">.</span><span style="color:#a6e22e">sun</span><span style="color:#f92672">.</span><span style="color:#a6e22e">tools</span><span style="color:#f92672">.</span><span style="color:#a6e22e">javac</span><span style="color:#f92672">.</span><span style="color:#a6e22e">tree</span><span style="color:#f92672">=</span>ALL<span style="color:#f92672">-</span>UNNAMED
<span style="color:#f92672">--</span>add<span style="color:#f92672">-</span>exports<span style="color:#f92672">=</span>jdk<span style="color:#f92672">.</span><span style="color:#a6e22e">compiler</span><span style="color:#f92672">/</span>com<span style="color:#f92672">.</span><span style="color:#a6e22e">sun</span><span style="color:#f92672">.</span><span style="color:#a6e22e">tools</span><span style="color:#f92672">.</span><span style="color:#a6e22e">javac</span><span style="color:#f92672">.</span><span style="color:#a6e22e">util</span><span style="color:#f92672">=</span>ALL<span style="color:#f92672">-</span>UNNAMED
</code></pre></div></li>
</ul>
</li>
<li>
<p>使用注解处理器的业务模块 执行mvn compile/install 报错：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">com</span><span style="color:#f92672">.</span><span style="color:#a6e22e">huang</span><span style="color:#f92672">.</span><span style="color:#a6e22e">ast</span><span style="color:#f92672">.</span><span style="color:#a6e22e">processor</span><span style="color:#f92672">.</span><span style="color:#a6e22e">LemonCompileProcessor</span> <span style="color:#f92672">(</span>in unnamed module <span style="color:#a6e22e">@0x3ac3f6f</span><span style="color:#f92672">)</span> cannot access <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">com</span><span style="color:#f92672">.</span><span style="color:#a6e22e">sun</span><span style="color:#f92672">.</span><span style="color:#a6e22e">tools</span><span style="color:#f92672">.</span><span style="color:#a6e22e">javac</span><span style="color:#f92672">.</span><span style="color:#a6e22e">processing</span><span style="color:#f92672">.</span><span style="color:#a6e22e">JavacProcessingEnvironment</span> <span style="color:#f92672">(</span>in module jdk<span style="color:#f92672">.</span><span style="color:#a6e22e">compiler</span><span style="color:#f92672">)</span> because module jdk<span style="color:#f92672">.</span><span style="color:#a6e22e">compiler</span> does not export com<span style="color:#f92672">.</span><span style="color:#a6e22e">sun</span><span style="color:#f92672">.</span><span style="color:#a6e22e">tools</span><span style="color:#f92672">.</span><span style="color:#a6e22e">javac</span><span style="color:#f92672">.</span><span style="color:#a6e22e">processing</span> to unnamed module <span style="color:#a6e22e">@0x3ac3f6f</span>

</code></pre></div><ul>
<li>
<p>使用了idea自带的maven进行打包，所以不会读取配置在pom文件中的compilerArgs，需要手动为idea自带的maven指定解析时可访问的模块，打开settings &ndash;&gt;  Build,Execution,Deployment &ndash;&gt; build tools&ndash;&gt; maven &ndash;&gt; runner，设置maven运行时的vm option：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-tex" data-lang="tex">--add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED
--add-exports=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED
--add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED
--add-exports=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED
</code></pre></div></li>
<li>
<p>同时，建议在业务模块pom文件中加上如下配置，使得命令行打包时能够读取配置项，使得编译期注解处理器能够正常被依赖：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml">		<span style="color:#f92672">&lt;build&gt;</span>
        <span style="color:#f92672">&lt;plugins&gt;</span>
            <span style="color:#f92672">&lt;plugin&gt;</span>
                <span style="color:#f92672">&lt;groupId&gt;</span>org.apache.maven.plugins<span style="color:#f92672">&lt;/groupId&gt;</span>
                <span style="color:#f92672">&lt;artifactId&gt;</span>maven-compiler-plugin<span style="color:#f92672">&lt;/artifactId&gt;</span>
                <span style="color:#f92672">&lt;configuration&gt;</span>
                    <span style="color:#f92672">&lt;target&gt;</span>17<span style="color:#f92672">&lt;/target&gt;</span>
                    <span style="color:#f92672">&lt;source&gt;</span>17<span style="color:#f92672">&lt;/source&gt;</span>
                    <span style="color:#f92672">&lt;annotationProcessors&gt;</span>
                        <span style="color:#f92672">&lt;annotationProcessor&gt;</span>com.huang.ast.processor.LemonCompileProcessor<span style="color:#f92672">&lt;/annotationProcessor&gt;</span>
                    <span style="color:#f92672">&lt;/annotationProcessors&gt;</span>
                <span style="color:#f92672">&lt;/configuration&gt;</span>
            <span style="color:#f92672">&lt;/plugin&gt;</span>
        <span style="color:#f92672">&lt;/plugins&gt;</span>
    <span style="color:#f92672">&lt;/build&gt;</span>
</code></pre></div></li>
</ul>
</li>
<li>
<p>build modules或者执行mvn clean compile报如下错误：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">java<span style="color:#f92672">.</span><span style="color:#a6e22e">lang</span><span style="color:#f92672">.</span><span style="color:#a6e22e">AssertionError</span>
	at jdk<span style="color:#f92672">.</span><span style="color:#a6e22e">compiler</span><span style="color:#f92672">/</span>com<span style="color:#f92672">.</span><span style="color:#a6e22e">sun</span><span style="color:#f92672">.</span><span style="color:#a6e22e">tools</span><span style="color:#f92672">.</span><span style="color:#a6e22e">javac</span><span style="color:#f92672">.</span><span style="color:#a6e22e">util</span><span style="color:#f92672">.</span><span style="color:#a6e22e">Assert</span><span style="color:#f92672">.</span><span style="color:#a6e22e">error</span><span style="color:#f92672">(</span>Assert<span style="color:#f92672">.</span><span style="color:#a6e22e">java</span><span style="color:#f92672">:</span>155<span style="color:#f92672">)</span>
	at jdk<span style="color:#f92672">.</span><span style="color:#a6e22e">compiler</span><span style="color:#f92672">/</span>com<span style="color:#f92672">.</span><span style="color:#a6e22e">sun</span><span style="color:#f92672">.</span><span style="color:#a6e22e">tools</span><span style="color:#f92672">.</span><span style="color:#a6e22e">javac</span><span style="color:#f92672">.</span><span style="color:#a6e22e">util</span><span style="color:#f92672">.</span><span style="color:#a6e22e">Assert</span><span style="color:#f92672">.</span><span style="color:#a6e22e">check</span><span style="color:#f92672">(</span>Assert<span style="color:#f92672">.</span><span style="color:#a6e22e">java</span><span style="color:#f92672">:</span>46<span style="color:#f92672">)</span>
	at jdk<span style="color:#f92672">.</span><span style="color:#a6e22e">compiler</span><span style="color:#f92672">/</span>com<span style="color:#f92672">.</span><span style="color:#a6e22e">sun</span><span style="color:#f92672">.</span><span style="color:#a6e22e">tools</span><span style="color:#f92672">.</span><span style="color:#a6e22e">javac</span><span style="color:#f92672">.</span><span style="color:#a6e22e">util</span><span style="color:#f92672">.</span><span style="color:#a6e22e">Bits</span><span style="color:#f92672">.</span><span style="color:#a6e22e">incl</span><span style="color:#f92672">(</span>Bits<span style="color:#f92672">.</span><span style="color:#a6e22e">java</span><span style="color:#f92672">:</span>186<span style="color:#f92672">)</span>
	at jdk<span style="color:#f92672">.</span><span style="color:#a6e22e">compiler</span><span style="color:#f92672">/</span>com<span style="color:#f92672">.</span><span style="color:#a6e22e">sun</span><span style="color:#f92672">.</span><span style="color:#a6e22e">tools</span><span style="color:#f92672">.</span><span style="color:#a6e22e">javac</span><span style="color:#f92672">.</span><span style="color:#a6e22e">comp</span><span style="color:#f92672">.</span><span style="color:#a6e22e">Flow$AssignAnalyzer</span><span style="color:#f92672">.</span><span style="color:#a6e22e">initParam</span><span style="color:#f92672">(</span>Flow<span style="color:#f92672">.</span><span style="color:#a6e22e">java</span><span style="color:#f92672">:</span>2232<span style="color:#f92672">)</span>
	at jdk<span style="color:#f92672">.</span><span style="color:#a6e22e">compiler</span><span style="color:#f92672">/</span>com<span style="color:#f92672">.</span><span style="color:#a6e22e">sun</span><span style="color:#f92672">.</span><span style="color:#a6e22e">tools</span><span style="color:#f92672">.</span><span style="color:#a6e22e">javac</span><span style="color:#f92672">.</span><span style="color:#a6e22e">comp</span><span style="color:#f92672">.</span><span style="color:#a6e22e">Flow$AssignAnalyzer</span><span style="color:#f92672">.</span><span style="color:#a6e22e">visitMethodDef</span><span style="color:#f92672">(</span>Flow<span style="color:#f92672">.</span><span style="color:#a6e22e">java</span><span style="color:#f92672">:</span>2156<span style="color:#f92672">)</span>
	at jdk<span style="color:#f92672">.</span><span style="color:#a6e22e">compiler</span><span style="color:#f92672">/</span>com<span style="color:#f92672">.</span><span style="color:#a6e22e">sun</span><span style="color:#f92672">.</span><span style="color:#a6e22e">tools</span><span style="color:#f92672">.</span><span style="color:#a6e22e">javac</span><span style="color:#f92672">.</span><span style="color:#a6e22e">tree</span><span style="color:#f92672">.</span><span style="color:#a6e22e">JCTree$JCMethodDecl</span><span style="color:#f92672">.</span><span style="color:#a6e22e">accept</span><span style="color:#f92672">(</span>JCTree<span style="color:#f92672">.</span><span style="color:#a6e22e">java</span><span style="color:#f92672">:</span>921<span style="color:#f92672">)</span>
	at jdk<span style="color:#f92672">.</span><span style="color:#a6e22e">compiler</span><span style="color:#f92672">/</span>com<span style="color:#f92672">.</span><span style="color:#a6e22e">sun</span><span style="color:#f92672">.</span><span style="color:#a6e22e">tools</span><span style="color:#f92672">.</span><span style="color:#a6e22e">javac</span><span style="color:#f92672">.</span><span style="color:#a6e22e">tree</span><span style="color:#f92672">.</span><span style="color:#a6e22e">TreeScanner</span><span style="color:#f92672">.</span><span style="color:#a6e22e">scan</span><span style="color:#f92672">(</span>TreeScanner<span style="color:#f92672">.</span><span style="color:#a6e22e">java</span><span style="color:#f92672">:</span>49<span style="color:#f92672">)</span>
	at jdk<span style="color:#f92672">.</span><span style="color:#a6e22e">compiler</span><span style="color:#f92672">/</span>com<span style="color:#f92672">.</span><span style="color:#a6e22e">sun</span><span style="color:#f92672">.</span><span style="color:#a6e22e">tools</span><span style="color:#f92672">.</span><span style="color:#a6e22e">javac</span><span style="color:#f92672">.</span><span style="color:#a6e22e">comp</span><span style="color:#f92672">.</span><span style="color:#a6e22e">Flow$BaseAnalyzer</span><span style="color:#f92672">.</span><span style="color:#a6e22e">scan</span><span style="color:#f92672">(</span>Flow<span style="color:#f92672">.</span><span style="color:#a6e22e">java</span><span style="color:#f92672">:</span>444<span style="color:#f92672">)</span>
	at jdk<span style="color:#f92672">.</span><span style="color:#a6e22e">compiler</span><span style="color:#f92672">/</span>com<span style="color:#f92672">.</span><span style="color:#a6e22e">sun</span><span style="color:#f92672">.</span><span style="color:#a6e22e">tools</span><span style="color:#f92672">.</span><span style="color:#a6e22e">javac</span><span style="color:#f92672">.</span><span style="color:#a6e22e">comp</span><span style="color:#f92672">.</span><span style="color:#a6e22e">Flow$AssignAnalyzer</span><span style="color:#f92672">.</span><span style="color:#a6e22e">scan</span><span style="color:#f92672">(</span>Flow<span style="color:#f92672">.</span><span style="color:#a6e22e">java</span><span style="color:#f92672">:</span>1724<span style="color:#f92672">)</span>
	at jdk<span style="color:#f92672">.</span><span style="color:#a6e22e">compiler</span><span style="color:#f92672">/</span>com<span style="color:#f92672">.</span><span style="color:#a6e22e">sun</span><span style="color:#f92672">.</span><span style="color:#a6e22e">tools</span><span style="color:#f92672">.</span><span style="color:#a6e22e">javac</span><span style="color:#f92672">.</span><span style="color:#a6e22e">comp</span><span style="color:#f92672">.</span><span style="color:#a6e22e">Flow$AssignAnalyzer</span><span style="color:#f92672">.</span><span style="color:#a6e22e">visitClassDef</span><span style="color:#f92672">(</span>Flow<span style="color:#f92672">.</span><span style="color:#a6e22e">java</span><span style="color:#f92672">:</span>2098<span style="color:#f92672">)</span>
	at jdk<span style="color:#f92672">.</span><span style="color:#a6e22e">compiler</span><span style="color:#f92672">/</span>com<span style="color:#f92672">.</span><span style="color:#a6e22e">sun</span><span style="color:#f92672">.</span><span style="color:#a6e22e">tools</span><span style="color:#f92672">.</span><span style="color:#a6e22e">javac</span><span style="color:#f92672">.</span><span style="color:#a6e22e">tree</span><span style="color:#f92672">.</span><span style="color:#a6e22e">JCTree$JCClassDecl</span><span style="color:#f92672">.</span><span style="color:#a6e22e">accept</span><span style="color:#f92672">(</span>JCTree<span style="color:#f92672">.</span><span style="color:#a6e22e">java</span><span style="color:#f92672">:</span>819<span style="color:#f92672">)</span>
	at jdk<span style="color:#f92672">.</span><span style="color:#a6e22e">compiler</span><span style="color:#f92672">/</span>com<span style="color:#f92672">.</span><span style="color:#a6e22e">sun</span><span style="color:#f92672">.</span><span style="color:#a6e22e">tools</span><span style="color:#f92672">.</span><span style="color:#a6e22e">javac</span><span style="color:#f92672">.</span><span style="color:#a6e22e">tree</span><span style="color:#f92672">.</span><span style="color:#a6e22e">TreeScanner</span><span style="color:#f92672">.</span><span style="color:#a6e22e">scan</span><span style="color:#f92672">(</span>TreeScanner<span style="color:#f92672">.</span><span style="color:#a6e22e">java</span><span style="color:#f92672">:</span>49<span style="color:#f92672">)</span>
</code></pre></div><ul>
<li>
<p>需要将treeMaker的节点指针定位至当前元素对应语法树的节点指针，在获取当前元素的语法树之后加入如下代码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">JCTree jcTree <span style="color:#f92672">=</span> <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">trees</span><span style="color:#f92672">.</span><span style="color:#a6e22e">getTree</span><span style="color:#f92672">(</span>element<span style="color:#f92672">);</span>
treeMaker<span style="color:#f92672">.</span><span style="color:#a6e22e">pos</span> <span style="color:#f92672">=</span> jcTree<span style="color:#f92672">.</span><span style="color:#a6e22e">pos</span><span style="color:#f92672">;</span>
</code></pre></div></li>
</ul>
</li>
<li>
<p>调用inner接口时报错：403 Forbidden</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">feign<span style="color:#f92672">.</span><span style="color:#a6e22e">FeignException$Forbidden</span><span style="color:#f92672">:</span> <span style="color:#f92672">[</span>403<span style="color:#f92672">]</span> during <span style="color:#f92672">[</span>GET<span style="color:#f92672">]</span> to <span style="color:#f92672">[</span>http<span style="color:#f92672">:</span><span style="color:#75715e">//user-system/inner/user/getUserDetail/] [UserClient#getUserDetail(String)]: []
</span></code></pre></div><ul>
<li>
<p>原因是feign client发起RPC的时候，如果方法是在path后紧跟入参，比如/inner/user/getUserDetail/{userId}，需要入参和对应的innerController完全保持一致，检查InnerController被@PathVariable注解标记的方法入参，在对应的feign client中也存在@PathVariable：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">InnerController:
<span style="color:#a6e22e">@OpenApi</span>
<span style="color:#a6e22e">@GetMapping</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;/user/getUserDetail/{userId}&#34;</span><span style="color:#f92672">)</span>
<span style="color:#66d9ef">public</span> T <span style="color:#a6e22e">getUserDetail</span><span style="color:#f92672">(</span><span style="color:#a6e22e">@PathVariable</span> String userId<span style="color:#f92672">){</span>
  <span style="color:#66d9ef">return</span>  userDetailsService<span style="color:#f92672">.</span><span style="color:#a6e22e">loadUserByUsername</span><span style="color:#f92672">(</span>userId<span style="color:#f92672">);</span>
<span style="color:#f92672">}</span>

Feign Client<span style="color:#f92672">:</span>
<span style="color:#a6e22e">@FeignClient</span><span style="color:#f92672">(</span>name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;user-system&#34;</span><span style="color:#f92672">,</span>value <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;user-system&#34;</span><span style="color:#f92672">,</span>contextId <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;userSystem&#34;</span><span style="color:#f92672">)</span>
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">UserClient</span> <span style="color:#f92672">{</span>

		<span style="color:#f92672">...</span> <span style="color:#75715e">// 其他方法
</span><span style="color:#75715e"></span>
    <span style="color:#a6e22e">@GetMapping</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;/inner/user/getUserDetail/{userId}&#34;</span><span style="color:#f92672">)</span>
    T <span style="color:#a6e22e">getUserDetail</span><span style="color:#f92672">(</span><span style="color:#a6e22e">@PathVariable</span> String userId<span style="color:#f92672">);</span>
<span style="color:#f92672">}</span>
</code></pre></div></li>
</ul>
</li>
<li>
<p>集成native-cloud-common-auth，通过@EnableSecurityAuthorization开启全局用户鉴权后，在进入controller方法之前，模块应该实现spring-security要求的userServiceImpl，否则请求该子系统任意接口（标记了openApi的白名单接口除外）都会返回403Forbidden错误，可参考交易模块已实现的UserServiceImpl：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#75715e">/**
</span><span style="color:#75715e"> * @description: 信用交易系统用户权限认证实现
</span><span style="color:#75715e"> * @author: huang.zh
</span><span style="color:#75715e"> * @create: 2024-09-15 08:09
</span><span style="color:#75715e"> **/</span>
<span style="color:#a6e22e">@Service</span>
<span style="color:#a6e22e">@Slf4j</span>
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">UserDetailServiceImpl</span> <span style="color:#66d9ef">implements</span> UserDetailsService <span style="color:#f92672">{</span>


    <span style="color:#66d9ef">private</span> UserClient userClient<span style="color:#f92672">;</span>

    <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">UserDetailServiceImpl</span><span style="color:#f92672">(</span><span style="color:#a6e22e">@Autowired</span> UserClient userClient<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">userClient</span> <span style="color:#f92672">=</span> userClient<span style="color:#f92672">;</span>
    <span style="color:#f92672">}</span>

    <span style="color:#a6e22e">@Override</span>
    <span style="color:#66d9ef">public</span> UserDetails <span style="color:#a6e22e">loadUserByUsername</span><span style="color:#f92672">(</span>String username<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> UsernameNotFoundException <span style="color:#f92672">{</span>
        <span style="color:#75715e">// 注意此时传入的username为jwtAuthUtil解析的userId
</span><span style="color:#75715e"></span>      	<span style="color:#75715e">// 发起RPC至账户子系统，请求用户的权限等运行时数据
</span><span style="color:#75715e"></span>        UserMetadata userMetadata <span style="color:#f92672">=</span> userClient<span style="color:#f92672">.</span><span style="color:#a6e22e">getUserDetail</span><span style="color:#f92672">(</span>username<span style="color:#f92672">);</span>
        String userId <span style="color:#f92672">=</span> userMetadata<span style="color:#f92672">.</span><span style="color:#a6e22e">getUserId</span><span style="color:#f92672">();</span>
      	<span style="color:#75715e">// 当前系统需要鉴权，将UserMetadata转换为符合Spring-security权限校验体系的实体类User
</span><span style="color:#75715e"></span>        List<span style="color:#f92672">&lt;</span>SimpleGrantedAuthority<span style="color:#f92672">&gt;</span> authorities <span style="color:#f92672">=</span> userMetadata<span style="color:#f92672">.</span><span style="color:#a6e22e">getPermissions</span><span style="color:#f92672">().</span><span style="color:#a6e22e">stream</span><span style="color:#f92672">().</span><span style="color:#a6e22e">map</span><span style="color:#f92672">(</span>SimpleGrantedAuthority<span style="color:#f92672">::</span><span style="color:#66d9ef">new</span><span style="color:#f92672">).</span><span style="color:#a6e22e">collect</span><span style="color:#f92672">(</span>Collectors<span style="color:#f92672">.</span><span style="color:#a6e22e">toList</span><span style="color:#f92672">());</span>
        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> User<span style="color:#f92672">(</span>userId<span style="color:#f92672">,</span>userId<span style="color:#f92672">,</span>authorities<span style="color:#f92672">);</span>
    <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><ul>
<li>
<p>注意，通过OpenFeign发起RPC请求，至账户子系统请求用户元数据，要求下游账户系统不能直接返回spring security的UserDetails接口及其任意一个实现类，是因为这些实现类没有默认无参构造函数，而OpenFeign解析response时使用jackson进行反序列化，要求响应类实体要有无参构造函数，这里可以使用native-cloud-common-auth模块下的UserMetadata，各上游系统获取到用户元数据后如果需要鉴权，可参考信用交易子系统将UserMetadata转换为符合Spring-security权限校验体系的实体类User：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#75715e">/**
</span><span style="color:#75715e"> * @description: 用户元数据运行时包装类，维护从账户系统获取的用户数据（userId，permissions...）
</span><span style="color:#75715e"> * @author: huang.zh
</span><span style="color:#75715e"> * @create: 2024-09-15 20:47
</span><span style="color:#75715e"> **/</span>
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">UserMetadata</span> <span style="color:#f92672">{</span>

    <span style="color:#66d9ef">private</span> String userId<span style="color:#f92672">;</span>

    <span style="color:#66d9ef">private</span> List<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> permissions<span style="color:#f92672">;</span>

    <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">UserMetadata</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
    <span style="color:#f92672">}</span>

    <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">UserMetadata</span><span style="color:#f92672">(</span>String userId<span style="color:#f92672">,</span> List<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> permissions<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">userId</span> <span style="color:#f92672">=</span> userId<span style="color:#f92672">;</span>
        <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">permissions</span> <span style="color:#f92672">=</span> permissions<span style="color:#f92672">;</span>
    <span style="color:#f92672">}</span>

    <span style="color:#66d9ef">public</span> String <span style="color:#a6e22e">getUserId</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">return</span> userId<span style="color:#f92672">;</span>
    <span style="color:#f92672">}</span>

    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">setUserId</span><span style="color:#f92672">(</span>String userId<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">userId</span> <span style="color:#f92672">=</span> userId<span style="color:#f92672">;</span>
    <span style="color:#f92672">}</span>

    <span style="color:#66d9ef">public</span> List<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">getPermissions</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">return</span> permissions<span style="color:#f92672">;</span>
    <span style="color:#f92672">}</span>

    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">setPermissions</span><span style="color:#f92672">(</span>List<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> permissions<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">permissions</span> <span style="color:#f92672">=</span> permissions<span style="color:#f92672">;</span>
    <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div></li>
</ul>
</li>
<li>
<p>单元测试中，将 类通过 @component 注解标记，尝试托管给 spring 容器，但单元测试方法报错：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">No qualifying bean of type <span style="color:#960050;background-color:#1e0010">&#39;</span>com<span style="color:#f92672">.</span><span style="color:#a6e22e">huang</span><span style="color:#f92672">.</span><span style="color:#a6e22e">buffer</span><span style="color:#f92672">.</span><span style="color:#a6e22e">handler</span><span style="color:#f92672">.</span><span style="color:#a6e22e">GenerateMessageDataHandler</span><span style="color:#960050;background-color:#1e0010">&#39;</span> available
</code></pre></div><ul>
<li>
<p>这是因为测试类继承自 TestApplication，在 TestApplication 中 通过注解配置了指定单元测试时允许容器托管的类：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#a6e22e">@SpringBootTest</span><span style="color:#f92672">(</span>classes <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>TestApplication<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">,</span> NettyStartListener<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">,</span> ServerProperty<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">,</span> SocketServer<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">})</span>
</code></pre></div><p>在 SpringBootTest注解 的 classes 属性中补齐单元测试中需要 Spring容器托管的类即可正常托管对应的 bean：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#a6e22e">@SpringBootTest</span><span style="color:#f92672">(</span>classes <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>TestApplication<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">,</span> NettyStartListener<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">,</span> ServerProperty<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">,</span> SocketServer<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">,</span> GenerateMessageDataHandler<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">,</span> MessageMetaDataHandler<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">})</span>
</code></pre></div></li>
</ul>
</li>
<li>
<p>使用SocketChannel 连接服务端进行测试，并发写入需要控制写入速率，通过 Thread.sleep(20l)可实现安全写入。</p>
</li>
<li>
<p>引入 ringbuffer 模块后，报错显示无法强制类型转换为指定的 springContext 容器：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Caused by<span style="color:#f92672">:</span> java<span style="color:#f92672">.</span><span style="color:#a6e22e">lang</span><span style="color:#f92672">.</span><span style="color:#a6e22e">ClassCastException</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">org</span><span style="color:#f92672">.</span><span style="color:#a6e22e">springframework</span><span style="color:#f92672">.</span><span style="color:#a6e22e">boot</span><span style="color:#f92672">.</span><span style="color:#a6e22e">web</span><span style="color:#f92672">.</span><span style="color:#a6e22e">servlet</span><span style="color:#f92672">.</span><span style="color:#a6e22e">context</span><span style="color:#f92672">.</span><span style="color:#a6e22e">AnnotationConfigServletWebServerApplicationContext</span> cannot be cast to <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">org</span><span style="color:#f92672">.</span><span style="color:#a6e22e">springframework</span><span style="color:#f92672">.</span><span style="color:#a6e22e">context</span><span style="color:#f92672">.</span><span style="color:#a6e22e">annotation</span><span style="color:#f92672">.</span><span style="color:#a6e22e">AnnotationConfigApplicationContext</span> <span style="color:#f92672">(</span>org<span style="color:#f92672">.</span><span style="color:#a6e22e">springframework</span><span style="color:#f92672">.</span><span style="color:#a6e22e">boot</span><span style="color:#f92672">.</span><span style="color:#a6e22e">web</span><span style="color:#f92672">.</span><span style="color:#a6e22e">servlet</span><span style="color:#f92672">.</span><span style="color:#a6e22e">context</span><span style="color:#f92672">.</span><span style="color:#a6e22e">AnnotationConfigServletWebServerApplicationContext</span> and org<span style="color:#f92672">.</span><span style="color:#a6e22e">springframework</span><span style="color:#f92672">.</span><span style="color:#a6e22e">context</span><span style="color:#f92672">.</span><span style="color:#a6e22e">annotation</span><span style="color:#f92672">.</span><span style="color:#a6e22e">AnnotationConfigApplicationContext</span> are in unnamed module of loader <span style="color:#960050;background-color:#1e0010">&#39;</span>app<span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#f92672">)</span>
	at com<span style="color:#f92672">.</span><span style="color:#a6e22e">huang</span><span style="color:#f92672">.</span><span style="color:#a6e22e">buffer</span><span style="color:#f92672">.</span><span style="color:#a6e22e">handler</span><span style="color:#f92672">.</span><span style="color:#a6e22e">MessageMetaDataHandler</span><span style="color:#f92672">.</span><span style="color:#a6e22e">setApplicationContext</span><span style="color:#f92672">(</span>MessageMetaDataHandler<span style="color:#f92672">.</span><span style="color:#a6e22e">java</span><span style="color:#f92672">:</span>62<span style="color:#f92672">)</span> <span style="color:#f92672">~[</span>classes<span style="color:#f92672">/:</span>na<span style="color:#f92672">]</span>
	at org<span style="color:#f92672">.</span><span style="color:#a6e22e">springframework</span><span style="color:#f92672">.</span><span style="color:#a6e22e">context</span><span style="color:#f92672">.</span><span style="color:#a6e22e">support</span><span style="color:#f92672">.</span><span style="color:#a6e22e">ApplicationContextAwareProcessor</span><span style="color:#f92672">.</span><span style="color:#a6e22e">invokeAwareInterfaces</span><span style="color:#f92672">(</span>ApplicationContextAwareProcessor<span style="color:#f92672">.</span><span style="color:#a6e22e">java</span><span style="color:#f92672">:</span>112<span style="color:#f92672">)</span> <span style="color:#f92672">~[</span>spring<span style="color:#f92672">-</span>context<span style="color:#f92672">-</span>6<span style="color:#f92672">.</span><span style="color:#a6e22e">0</span><span style="color:#f92672">.</span><span style="color:#a6e22e">8</span><span style="color:#f92672">.</span><span style="color:#a6e22e">jar</span><span style="color:#f92672">:</span>6<span style="color:#f92672">.</span><span style="color:#a6e22e">0</span><span style="color:#f92672">.</span><span style="color:#a6e22e">8</span><span style="color:#f92672">]</span>
	at org<span style="color:#f92672">.</span><span style="color:#a6e22e">springframework</span><span style="color:#f92672">.</span><span style="color:#a6e22e">context</span><span style="color:#f92672">.</span><span style="color:#a6e22e">support</span><span style="color:#f92672">.</span><span style="color:#a6e22e">ApplicationContextAwareProcessor</span><span style="color:#f92672">.</span><span style="color:#a6e22e">postProcessBeforeInitialization</span><span style="color:#f92672">(</span>ApplicationContextAwareProcessor<span style="color:#f92672">.</span><span style="color:#a6e22e">java</span><span style="color:#f92672">:</span>87<span style="color:#f92672">)</span> <span style="color:#f92672">~[</span>spring<span style="color:#f92672">-</span>context<span style="color:#f92672">-</span>6<span style="color:#f92672">.</span><span style="color:#a6e22e">0</span><span style="color:#f92672">.</span><span style="color:#a6e22e">8</span><span style="color:#f92672">.</span><span style="color:#a6e22e">jar</span><span style="color:#f92672">:</span>6<span style="color:#f92672">.</span><span style="color:#a6e22e">0</span><span style="color:#f92672">.</span><span style="color:#a6e22e">8</span><span style="color:#f92672">]</span>
	at org<span style="color:#f92672">.</span><span style="color:#a6e22e">springframework</span><span style="color:#f92672">.</span><span style="color:#a6e22e">beans</span><span style="color:#f92672">.</span><span style="color:#a6e22e">factory</span><span style="color:#f92672">.</span><span style="color:#a6e22e">support</span><span style="color:#f92672">.</span><span style="color:#a6e22e">AbstractAutowireCapableBeanFactory</span><span style="color:#f92672">.</span><span style="color:#a6e22e">applyBeanPostProcessorsBeforeInitialization</span><span style="color:#f92672">(</span>AbstractAutowireCapableBeanFactory<span style="color:#f92672">.</span><span style="color:#a6e22e">java</span><span style="color:#f92672">:</span>419<span style="color:#f92672">)</span> <span style="color:#f92672">~[</span>spring<span style="color:#f92672">-</span>beans<span style="color:#f92672">-</span>6<span style="color:#f92672">.</span><span style="color:#a6e22e">0</span><span style="color:#f92672">.</span><span style="color:#a6e22e">8</span><span style="color:#f92672">.</span><span style="color:#a6e22e">jar</span><span style="color:#f92672">:</span>6<span style="color:#f92672">.</span><span style="color:#a6e22e">0</span><span style="color:#f92672">.</span><span style="color:#a6e22e">8</span><span style="color:#f92672">]</span>
	at org<span style="color:#f92672">.</span><span style="color:#a6e22e">springframework</span><span style="color:#f92672">.</span><span style="color:#a6e22e">beans</span><span style="color:#f92672">.</span><span style="color:#a6e22e">factory</span><span style="color:#f92672">.</span><span style="color:#a6e22e">support</span><span style="color:#f92672">.</span><span style="color:#a6e22e">AbstractAutowireCapableBeanFactory</span><span style="color:#f92672">.</span><span style="color:#a6e22e">initializeBean</span><span style="color:#f92672">(</span>AbstractAutowireCapableBeanFactory<span style="color:#f92672">.</span><span style="color:#a6e22e">java</span><span style="color:#f92672">:</span>1762<span style="color:#f92672">)</span> <span style="color:#f92672">~[</span>spring<span style="color:#f92672">-</span>beans<span style="color:#f92672">-</span>6<span style="color:#f92672">.</span><span style="color:#a6e22e">0</span><span style="color:#f92672">.</span><span style="color:#a6e22e">8</span><span style="color:#f92672">.</span><span style="color:#a6e22e">jar</span><span style="color:#f92672">:</span>6<span style="color:#f92672">.</span><span style="color:#a6e22e">0</span><span style="color:#f92672">.</span><span style="color:#a6e22e">8</span><span style="color:#f92672">]</span>
	at org<span style="color:#f92672">.</span><span style="color:#a6e22e">springframework</span><span style="color:#f92672">.</span><span style="color:#a6e22e">beans</span><span style="color:#f92672">.</span><span style="color:#a6e22e">factory</span><span style="color:#f92672">.</span><span style="color:#a6e22e">support</span><span style="color:#f92672">.</span><span style="color:#a6e22e">AbstractAutowireCapableBeanFactory</span><span style="color:#f92672">.</span><span style="color:#a6e22e">doCreateBean</span><span style="color:#f92672">(</span>AbstractAutowireCapableBeanFactory<span style="color:#f92672">.</span><span style="color:#a6e22e">java</span><span style="color:#f92672">:</span>598<span style="color:#f92672">)</span> <span style="color:#f92672">~[</span>spring<span style="color:#f92672">-</span>beans<span style="color:#f92672">-</span>6<span style="color:#f92672">.</span><span style="color:#a6e22e">0</span><span style="color:#f92672">.</span><span style="color:#a6e22e">8</span><span style="color:#f92672">.</span><span style="color:#a6e22e">jar</span><span style="color:#f92672">:</span>6<span style="color:#f92672">.</span><span style="color:#a6e22e">0</span><span style="color:#f92672">.</span><span style="color:#a6e22e">8</span><span style="color:#f92672">]</span>
	<span style="color:#f92672">...</span> 15 common frames omitted
</code></pre></div><ul>
<li>
<p>这是因为业务子系统使用的AnnotationConfigServletWebServerApplicationContext进行托管，将 ringbuffer 中实现了 ApplicationContextAware 接口的 bean 所包含的成员变量全部改为对应的上层抽象接口ConfigurableApplicationContext即可进行强转，可参考：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#a6e22e">@Component</span>
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">MessageMetaDataHandler</span> <span style="color:#66d9ef">extends</span> ChannelInboundHandlerAdapter <span style="color:#66d9ef">implements</span> InitializingBean<span style="color:#f92672">,</span> ApplicationContextAware <span style="color:#f92672">{</span>

    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> Logger log <span style="color:#f92672">=</span> LoggerFactory<span style="color:#f92672">.</span><span style="color:#a6e22e">getLogger</span><span style="color:#f92672">(</span>MessageMetaDataHandler<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">);</span>

    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> String BUSINESS_FLAG_KEY <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;businessFlag&#34;</span><span style="color:#f92672">;</span>

    <span style="color:#66d9ef">private</span> ConfigurableApplicationContext applicationContext<span style="color:#f92672">;</span>

    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> Map<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">,</span>BusinessHandler<span style="color:#f92672">&gt;</span> handlers<span style="color:#f92672">;</span>


    <span style="color:#a6e22e">@Override</span>
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">channelRead</span><span style="color:#f92672">(</span>ChannelHandlerContext ctx<span style="color:#f92672">,</span> Object msg<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> Exception <span style="color:#f92672">{</span>
        <span style="color:#f92672">...</span>
    <span style="color:#f92672">}</span>

    <span style="color:#a6e22e">@Override</span>
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">afterPropertiesSet</span><span style="color:#f92672">()</span> <span style="color:#66d9ef">throws</span> Exception <span style="color:#f92672">{</span>
        <span style="color:#75715e">// 从容器中获取 BusinessHandler 接口的所有实现类
</span><span style="color:#75715e"></span>        Map<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">,</span> BusinessHandler<span style="color:#f92672">&gt;</span> candidateBeans <span style="color:#f92672">=</span> <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">applicationContext</span><span style="color:#f92672">.</span><span style="color:#a6e22e">getBeansOfType</span><span style="color:#f92672">(</span>BusinessHandler<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">);</span>
        handlers <span style="color:#f92672">=</span> candidateBeans<span style="color:#f92672">.</span><span style="color:#a6e22e">values</span><span style="color:#f92672">().</span><span style="color:#a6e22e">stream</span><span style="color:#f92672">().</span><span style="color:#a6e22e">collect</span><span style="color:#f92672">(</span>Collectors<span style="color:#f92672">.</span><span style="color:#a6e22e">toMap</span><span style="color:#f92672">(</span>BusinessHandler<span style="color:#f92672">::</span>businessFlag<span style="color:#f92672">,</span> Function<span style="color:#f92672">.</span><span style="color:#a6e22e">identity</span><span style="color:#f92672">()));</span>
    <span style="color:#f92672">}</span>

    <span style="color:#a6e22e">@Override</span>
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">setApplicationContext</span><span style="color:#f92672">(</span>ApplicationContext applicationContext<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> BeansException <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">applicationContext</span> <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>ConfigurableApplicationContext<span style="color:#f92672">)</span> applicationContext<span style="color:#f92672">;</span>
    <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div></li>
</ul>
</li>
<li>
<p>如果业务子系统引入 Ringbuffer 模块后，无法找到 ringbuffer 模块下要求运行时托管给 Spring 容器管理的 bean，是因为默认 Spring 只扫描启动类所在目录下的所有 component、service、controller，需要手动通过注解引入 ringbuffer 模块下的 bean，可参考信用交易子系统启动类上的注解：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#75715e">/**
</span><span style="color:#75715e"> * @description: 信用竞价交易子系统启动类
</span><span style="color:#75715e"> * @author: huang.zh
</span><span style="color:#75715e"> * @create: 2023-11-16 21:12
</span><span style="color:#75715e"> **/</span>
<span style="color:#a6e22e">@EnableApiDoc</span>
<span style="color:#a6e22e">@EnableSecurityAuthorization</span>
<span style="color:#a6e22e">@EnableGlobalExceptionHandler</span>
<span style="color:#a6e22e">@SpringBootApplication</span>
<span style="color:#a6e22e">@EnableNativeHints</span>
<span style="color:#a6e22e">@EnableDiscoveryClient</span>
<span style="color:#a6e22e">@EnableFeignClients</span>
<span style="color:#a6e22e">@MapperScan</span><span style="color:#f92672">(</span>basePackages <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;com.huang.credit.mapper&#34;</span><span style="color:#f92672">,</span>sqlSessionTemplateRef <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;sqlSessionTemplate&#34;</span><span style="color:#f92672">)</span>
<span style="color:#75715e">// 引入 ringbuffer 模块下的 bean
</span><span style="color:#75715e"></span><span style="color:#a6e22e">@Import</span><span style="color:#f92672">(</span>value <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>NettyStartListener<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">,</span> ServerProperty<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">,</span> SocketServer<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">,</span>
        GenerateMessageDataHandler<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">,</span> MessageMetaDataHandler<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">})</span>
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">CreditTradeApplication</span> <span style="color:#f92672">{</span>

    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        SpringApplication<span style="color:#f92672">.</span><span style="color:#a6e22e">run</span><span style="color:#f92672">(</span>CreditTradeApplication<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">,</span>args<span style="color:#f92672">);</span>
    <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><ul>
<li>也可以直接使用 ringbuffer 模块下的@EnableRingBuffer 注解，它会帮业务系统自动引入启用环形队列处理消息时所有需要托管的 bean：</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#75715e">/**
</span><span style="color:#75715e"> * @description: 信用竞价交易子系统启动类
</span><span style="color:#75715e"> * @author: huang.zh
</span><span style="color:#75715e"> * @create: 2023-11-16 21:12
</span><span style="color:#75715e"> **/</span>
<span style="color:#a6e22e">@EnableApiDoc</span>
<span style="color:#a6e22e">@EnableSecurityAuthorization</span>
<span style="color:#a6e22e">@EnableGlobalExceptionHandler</span>
<span style="color:#a6e22e">@SpringBootApplication</span>
<span style="color:#a6e22e">@EnableNativeHints</span>
<span style="color:#a6e22e">@EnableDiscoveryClient</span>
<span style="color:#a6e22e">@EnableFeignClients</span>
<span style="color:#a6e22e">@MapperScan</span><span style="color:#f92672">(</span>basePackages <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;com.huang.credit.mapper&#34;</span><span style="color:#f92672">,</span>sqlSessionTemplateRef <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;sqlSessionTemplate&#34;</span><span style="color:#f92672">)</span>
<span style="color:#a6e22e">@EnableRingBuffer</span>
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">CreditTradeApplication</span> <span style="color:#f92672">{</span>

    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        SpringApplication<span style="color:#f92672">.</span><span style="color:#a6e22e">run</span><span style="color:#f92672">(</span>CreditTradeApplication<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">,</span>args<span style="color:#f92672">);</span>
    <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div></li>
</ul>
<h3 id="5开发日志">5.开发日志</h3>
<table>
<thead>
<tr>
<th style="text-align:center">日期</th>
<th style="text-align:center">内容</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">2023.07.08</td>
<td style="text-align:center">项目基本依赖引入，完成框架搭建。</td>
</tr>
<tr>
<td style="text-align:center">2023.07.15</td>
<td style="text-align:center">账户系统完成基础功能：账户查询、营业部树查询。</td>
</tr>
<tr>
<td style="text-align:center">2023.07.18</td>
<td style="text-align:center">账户系统权限系统表结构建立完成，基于RBAC模型。</td>
</tr>
<tr>
<td style="text-align:center">2023.07.20</td>
<td style="text-align:center">账户系统权限体系编码完成，自测完成，实现用户粒度角色权限筛选与聚合。</td>
</tr>
<tr>
<td style="text-align:center">2023.07.24</td>
<td style="text-align:center">jwt+security依赖引入，登录+鉴权系统组合完成，实现登录赋权和api粒度权限校验。</td>
</tr>
<tr>
<td style="text-align:center">2023.07.25</td>
<td style="text-align:center">部分查询调整为mybatis-plus提供的lambda查询模式，减少代码中sql出现的频次。</td>
</tr>
<tr>
<td style="text-align:center">2023.07.26</td>
<td style="text-align:center">引入nacos，账户子系统具备服务注册功能，同时引入open-feign，提供基于http协议的RPC。</td>
</tr>
<tr>
<td style="text-align:center">2023.07.31</td>
<td style="text-align:center">native-image引入，改造部分类的加载方式，兼容native镜像打包。</td>
</tr>
<tr>
<td style="text-align:center">2023.08.03</td>
<td style="text-align:center">Graal-sdk依赖升级为22.3.2，解决native-image在AOT阶段的报错问题。</td>
</tr>
<tr>
<td style="text-align:center">2023.08.09</td>
<td style="text-align:center">添加账户子系统AOT脚本，确保所有模块能够在编译时期准确链接。</td>
</tr>
<tr>
<td style="text-align:center">2023.08.10</td>
<td style="text-align:center">新增common模块，用于放置公共配置类和工具类。</td>
</tr>
<tr>
<td style="text-align:center">2023.08.12</td>
<td style="text-align:center">抽取账户配置引导类（security、mybatis-plus、swagger-api&hellip;）至common模块下，启动、打包成功。</td>
</tr>
<tr>
<td style="text-align:center">2023.08.15</td>
<td style="text-align:center">新增common-api模块，移动公用entity至该模块路径，供后续子系统间基于公用entity传输数据。</td>
</tr>
<tr>
<td style="text-align:center">2023.08.18</td>
<td style="text-align:center">新增额度子系统，完成框架搭建和数据流通、子系统间通信测试。</td>
</tr>
<tr>
<td style="text-align:center">2023.08.23</td>
<td style="text-align:center">额度子系统完成头寸体系建设，提供头寸划转资金、证券功能，编码完成，自测完成。</td>
</tr>
<tr>
<td style="text-align:center">2023.08.29</td>
<td style="text-align:center">新增自定义注解openApi，配合鉴权体系实现白名单配置机制。</td>
</tr>
<tr>
<td style="text-align:center">2023.08.31</td>
<td style="text-align:center">子系统全部增加domain域，所有服务不再直接访问dao层查询，统一由domain域提供数据访问和操作的途径。</td>
</tr>
<tr>
<td style="text-align:center">2023.09.10</td>
<td style="text-align:center">新增gateway模块，实现统一网关分发路由。</td>
</tr>
<tr>
<td style="text-align:center">2023.09.16</td>
<td style="text-align:center">调整open-feign相关AOT配置，解决gateway和open-feign兼容问题导致的native程序请求分发失败。</td>
</tr>
<tr>
<td style="text-align:center">2023.09.20</td>
<td style="text-align:center">gateway模块增加open-feign子系统代理类，能够使代理类被正确链接，解决AOT报错。</td>
</tr>
<tr>
<td style="text-align:center">2023.09.24</td>
<td style="text-align:center">新增common-util模块，放置常量类和工具类。</td>
</tr>
<tr>
<td style="text-align:center">2023.09.29</td>
<td style="text-align:center">新增common-result模块，提供子系统对外统一结果封装。</td>
</tr>
<tr>
<td style="text-align:center">2023.09.31</td>
<td style="text-align:center">异常体系建设完成，可自定义异常种类、异常处理类，具备统一捕捉业务异常的能力。</td>
</tr>
<tr>
<td style="text-align:center">2023.10.07</td>
<td style="text-align:center">业务检查模板体系设计完成、编码完成，提供高度抽象的模板检查策略，易于扩展。</td>
</tr>
<tr>
<td style="text-align:center">2023.10.15</td>
<td style="text-align:center">账户子系统、额度子系统业务完成业务检查模板改造，各类业务适配业务模板，编码完成、自测完成。</td>
</tr>
<tr>
<td style="text-align:center">2023.10.20</td>
<td style="text-align:center">提供接口api文档配置化注解，实现可插拔。</td>
</tr>
<tr>
<td style="text-align:center">2023.10.26</td>
<td style="text-align:center">新增大量枚举，优化业务检查代码，使用枚举代替所有魔法值。</td>
</tr>
<tr>
<td style="text-align:center">2023.10.30</td>
<td style="text-align:center">新建信用交易子系统，完成框架搭建。</td>
</tr>
<tr>
<td style="text-align:center">2023.11.03</td>
<td style="text-align:center">交易时间体系建设完成，具备不同业务交易时间检查能力。</td>
</tr>
<tr>
<td style="text-align:center">2023.11.11</td>
<td style="text-align:center">融资买入参数检查编码完成、自测完成。</td>
</tr>
<tr>
<td style="text-align:center">2023.11.13</td>
<td style="text-align:center">竞价业务证券代码检查体系建设完成，统一提供基础证券检查功能，并允许子类自行扩展。</td>
</tr>
<tr>
<td style="text-align:center">2023.11.23</td>
<td style="text-align:center">融资买入委托数据检查编码完成，自测完成。</td>
</tr>
<tr>
<td style="text-align:center">2024.02.26</td>
<td style="text-align:center">完成RPC调用融资日间实时合约生成逻辑，并基于TCC实现分布式事务补偿机制，自测完成。</td>
</tr>
<tr>
<td style="text-align:center">2024.02.27</td>
<td style="text-align:center">取消信用委托表order_id索引唯一属性，使分布式事务补偿后出现同一订单流水号能够存在多条废单委托，且仅存在一条有效委托，自测完成。</td>
</tr>
<tr>
<td style="text-align:center">2024.02.29</td>
<td style="text-align:center">补全合约系统日间实时合约流水和合约汇总流水记录逻辑，结合融资买入业务自测通过。</td>
</tr>
<tr>
<td style="text-align:center">2024.03.01</td>
<td style="text-align:center">引入javac-annotation processor编译期注解处理器，并解决JDK17模块化引起的maven compile以及idea build module报错，编译期处理器组件框架搭建完成，待实现具体注解处理器。</td>
</tr>
<tr>
<td style="text-align:center">2024.03.02</td>
<td style="text-align:center">调整日间合约汇总表索引，增加init_date字段并取消流水表索引unique属性，分布式事务代码配套修改。</td>
</tr>
<tr>
<td style="text-align:center">2024.03.03</td>
<td style="text-align:center">编译期注解框架完成get和set方法生成，值拷贝语句生成编码进度50%。</td>
</tr>
<tr>
<td style="text-align:center">2024.03.04</td>
<td style="text-align:center">值拷贝语句编码完成，自测通过，待结合业务逻辑进行测试。</td>
</tr>
<tr>
<td style="text-align:center">2024.03.06</td>
<td style="text-align:center">搭建环形队列模块，引入ringbuffer，并结合netty实现高性能收取报文处理数据。</td>
</tr>
<tr>
<td style="text-align:center">2024.03.07</td>
<td style="text-align:center">自定义简要二进制通信协议，编码50%。</td>
</tr>
<tr>
<td style="text-align:center">2024.03.08</td>
<td style="text-align:center">自定义简要二进制通信协议，编码完成，待业务核心模块引入该组件测试报文接收效果。</td>
</tr>
<tr>
<td style="text-align:center">2024.03.10</td>
<td style="text-align:center">ringbuffer模块，netty接收二进制数据根据报文规则解析字节代码修改，测试完成。</td>
</tr>
<tr>
<td style="text-align:center">2024.03.12</td>
<td style="text-align:center">ringbuffer模块引入disruptor，编写通用api，自测完成，压测结果支持16400 QPS。</td>
</tr>
<tr>
<td style="text-align:center">2024.08.30-2024.08.31</td>
<td style="text-align:center">设计信用交易后台费用表结构，完成费用预算业务组件编写，自测完成，待业务模块引入使用。</td>
</tr>
<tr>
<td style="text-align:center">2024.09.03</td>
<td style="text-align:center">委托表扩充费用和金额字段，在委托过程中增加费用和发生金额赋值，待自测。</td>
</tr>
<tr>
<td style="text-align:center">2024.09.04</td>
<td style="text-align:center">资产账号表扩充费用属性串字段，增加交易公用费用属性获取工具，拟在委托过程中获取费用属性以计算费用，待自测。</td>
</tr>
<tr>
<td style="text-align:center">2024.09.05</td>
<td style="text-align:center">证券交易费用模块结合融资买入业务自测后修复bug，完成业务流程中费用预算的开发。</td>
</tr>
<tr>
<td style="text-align:center">2024.09.06</td>
<td style="text-align:center">费用预算引入低费用标志，当标志开启时，委托发生费用小于最低费用时不收取最低佣金，结合账户系统费用串自测完成。</td>
</tr>
<tr>
<td style="text-align:center">2024.09.09</td>
<td style="text-align:center">新建专项业务头寸账户表和专项业务资金表，支持融资买入检查客户专项头寸账户和专项头寸可用资金，待自测。</td>
</tr>
<tr>
<td style="text-align:center">2024.09.10</td>
<td style="text-align:center">支持融资买入更新专项头寸可用资金，待自测。</td>
</tr>
<tr>
<td style="text-align:center">2024.09.11</td>
<td style="text-align:center">普通业务头寸资金流水表扩充发生标志和交易日期字段，并在融资买入委托支持更新，待自测。</td>
</tr>
<tr>
<td style="text-align:center">2024.09.12</td>
<td style="text-align:center">自测过程中发现专项头寸更新未实现TccService，需要实现TccService以便支持分布式事务。</td>
</tr>
<tr>
<td style="text-align:center">2024.09.13</td>
<td style="text-align:center">实现专项头寸分布式事务TccService，代替原有的专项头寸domain进行头寸资金更新，头寸资金更新模块自测完成。</td>
</tr>
<tr>
<td style="text-align:center">2024.09.15</td>
<td style="text-align:center">信用交易系统接入全局账户鉴权功能，结合融资买入业务自测完成，完成Api粒度鉴权</td>
</tr>
<tr>
<td style="text-align:center">2024.09.16</td>
<td style="text-align:center">梳理模块总览，编写各模块职责。</td>
</tr>
<tr>
<td style="text-align:center">2024.09.18</td>
<td style="text-align:center">新增缓存管理类，用于缓存运行时RPC获取的用户元数据信息，减少RPC至账户系统的开销，自测完成。</td>
</tr>
<tr>
<td style="text-align:center">2024.09.19</td>
<td style="text-align:center">1、修复用户元数据缓存未能命中的bug，自测完成。<br/>2、缓存支持可重入锁，以应对并发更新。</td>
</tr>
<tr>
<td style="text-align:center">2024.09.20</td>
<td style="text-align:center">信用交易核心获取序列号使用缓存双写模式，自测完成</td>
</tr>
<tr>
<td style="text-align:center">2024.09.21</td>
<td style="text-align:center">1、额度流水计数器分片表扩充step步长字段，支持交易核心批量申请序列号，编码完成，自测完成。<br/>2、专项业务头寸资金流水表的计数器类型和普通业务头寸资金流水表计数器独立，防止数据库行锁资源频繁竞争，自测完成。</td>
</tr>
<tr>
<td style="text-align:center">2024.09.23</td>
<td style="text-align:center">修复bug，当前缓存号段无序列号可用时，更新该号段数据库表中可用状态为不可用。</td>
</tr>
<tr>
<td style="text-align:center">2024.09.24</td>
<td style="text-align:center">流水计数器分布式事务实现类支持缓存号段数据上下场的能力，避免发生故障停机后无法恢复缓存数据，造成号段资源浪费。自测完成。</td>
</tr>
<tr>
<td style="text-align:center">2024.09.26</td>
<td style="text-align:center">流水计数器获取类改造，可缓存多种计数器种类的号段数据，并具备计数器号段数据上场能力，自测完成。</td>
</tr>
<tr>
<td style="text-align:center">2024.09.27</td>
<td style="text-align:center">流水计数器获取类改造，使同一种计数器号段能够连续申请，自测完成。</td>
</tr>
<tr>
<td style="text-align:center">2024.09.28</td>
<td style="text-align:center">信用交易专项头寸资金流水表，生成序列号改造：使用带缓存功能的统一流水计数器工具类，自测完成。</td>
</tr>
<tr>
<td style="text-align:center">2024.09.30</td>
<td style="text-align:center">统一流水计数器缓存扩展申请号段标志，只在申请号段时才更新当前计数器种类的号段起始值缓存，自测完成。</td>
</tr>
<tr>
<td style="text-align:center">2024.10.01</td>
<td style="text-align:center">构造回报报文，并解析成功，成功反序列化成MessageMetaData，供业务流程使用，自测完成。</td>
</tr>
<tr>
<td style="text-align:center">2024.10.02</td>
<td style="text-align:center">编写生成字节报文工具，ByteTypeUtil.<em>generateBytes</em>，支持根据传入任意 map 生成字节报文，自测完成。</td>
</tr>
<tr>
<td style="text-align:center">2024.10.03</td>
<td style="text-align:center">LemonBufferTest 单元测试， 65535 个线程同时通过ByteTypeUtil.<em>generateBytes</em>生成字节报文并打入队列，总消耗时间 814ms，性能 ok。</td>
</tr>
<tr>
<td style="text-align:center">2024.10.05</td>
<td style="text-align:center">LemonBuffer 模块新增消息处理器，并将模块下的处理器全部托管给 spring 容器，过滤不包含businessFlag 的消息，自测完成。</td>
</tr>
<tr>
<td style="text-align:center">2024.10.08</td>
<td style="text-align:center">LemonBuffer 模块扩展 BusinessHandler，作为所有业务消息处理子类的抽象，并托管给 Spring 容器处理。</td>
</tr>
<tr>
<td style="text-align:center">2024.10.09</td>
<td style="text-align:center">1、消息处理器MessageMetaDataHandler 具备发现 businessHandler 的能力，并能够根据消息中业务标志采用具体的消息业务处理器处理消息。<br/>2、完善单元测试类，各业务子系统可参考SocketServerTest 和 TestBusinessHandler 实现对应的消息处理器。</td>
</tr>
<tr>
<td style="text-align:center">2024.10.10</td>
<td style="text-align:center">考虑如何实现消息处理类绑定 LemonBuffer 实现异步处理消息。</td>
</tr>
<tr>
<td style="text-align:center">2024.10.11</td>
<td style="text-align:center">信用交易子系统引入 ringbuffer 模块，解决报错，成功运行。</td>
</tr>
<tr>
<td style="text-align:center">2024.10.12</td>
<td style="text-align:center">新增注解@EnableRingBuffer，供业务系统使用，集成环形队列模块时通过该注解引入所有需要托管给 Spring 容器的 bean。</td>
</tr>
<tr>
<td style="text-align:center">2024.10.14</td>
<td style="text-align:center">构建回报异常体系，Ringbuffer 执行回报报错时统一捕获异常。</td>
</tr>
<tr>
<td style="text-align:center">2024.10.15</td>
<td style="text-align:center">融资买入回报模块流程功能编码，完成委托状态计算。</td>
</tr>
<tr>
<td style="text-align:center">2024.10.18</td>
<td style="text-align:center">1、合约表扩展合约成交数量字段，委托回报时更新该字段。<br/>2、回报流程中新增更新合约方法，支持更新合约成交数量和融资买入在途委托金额。<br/>3、支持回报更新合约汇总，并记录合约汇总流水。</td>
</tr>
<tr>
<td style="text-align:center">2024.10.19</td>
<td style="text-align:center">1、回报扩充 isCancelOrder 字段，用于判断撤单委托和原委托，对应处理不同的流程。<br/>2、BusinessHandler 接口扩展 doRevert 方法，各实现类实现后，用于正常回报流程处理出错时触发回滚操作。<br/>3、融资买入回报处理器支持废单处理流程。</td>
</tr>
<tr>
<td style="text-align:center">2024.10.22</td>
<td style="text-align:center">新增撤单委托接口，同时新增撤单委托专用的业务检查 specification，用于撤单时间检查、原委托状态校验。 <br/>2、新增撤单委托专用时间检查处理器。</td>
</tr>
<tr>
<td style="text-align:center">2024.10.24</td>
<td style="text-align:center">1、融资买入成交回报测试完成，修复 bug。<br/>2、废单场景回报修正合约汇总表在途金额更新错误。</td>
</tr>
<tr>
<td style="text-align:center">2024.10.25</td>
<td style="text-align:center">1、信用交易委托表扩展原委托字段，用于撤单委托时记录原委托编号，定位原委托信息。<br/>2、完成撤单委托时原委托状态检查。</td>
</tr>
<tr>
<td style="text-align:center">2024.10.26</td>
<td style="text-align:center">撤单委托完成编码，支持内部撤单和外部撤单，并支持内部撤单直接作废融资合约，待自测。</td>
</tr>
<tr>
<td style="text-align:center">2024.10.28</td>
<td style="text-align:center">1、修复内部撤单合约汇总在途金额更新不正确的问题。<br/>2、新增CreditEntrustBackWriteHandler，并集成 lemonBuffer，用于异步处理交易所回写请求。</td>
</tr>
<tr>
<td style="text-align:center">2024.10.29</td>
<td style="text-align:center">1、支持撤单成交委托状态计算，支持原委托部分成交后撤单和整笔全部撤单。<br/>2、修复撤单委托下单后，因为委托类型不正确而引起的撤单成交回报时委托状态不能正确计算的问题。<br/>3、内部撤单支持回冲头寸资金和前后台费用。<br/>4、撤单成交回报支持回冲头寸资金（包括原委托部分成交后在途金额+后台的回冲）。<br/>5、撤单成交回报支持根据本次回报成交的金额计算后台费用，并累加至清算金额 clearBalance。</td>
</tr>
<tr>
<td style="text-align:center">2024.10.30</td>
<td style="text-align:center">1、支持撤单委托废单回报处理。<br/>2、原委托在撤单委托废单回报时修正为撤单前的状态。<br/>3、修正融资买入委托成交回报时费用计算不准确，支持委托全部成交的情况时，清算金额计算考虑前台费用。</td>
</tr>
<tr>
<td style="text-align:center">2024.10.31</td>
<td style="text-align:center">1、修复融资买入委托成交回报时，未正确计算合约汇总表成交数量的问题。</td>
</tr>
<tr>
<td style="text-align:center">2024.11.01</td>
<td style="text-align:center">新增信用客户持仓表，并支持更新或新增一条指定代码的持仓记录。</td>
</tr>
<tr>
<td style="text-align:center">2024.11.02</td>
<td style="text-align:center">1、新增信用客户持仓流水表，支持在更新信用客户持仓流水的同时记录流水。<br/>2、全局流水序列号获取类 SerialCounterNoTccService，支持不开启分布式事务时使用，走常规RPC 获取最新序列号。</td>
</tr>
<tr>
<td style="text-align:center">2024.11.04</td>
<td style="text-align:center">1、修复融资买入内部撤单时，回冲头寸多扣减费用的问题。<br/>2、融资买入成交回报处理，支持在更新委托状态前更新持仓数据。</td>
</tr>
<tr>
<td style="text-align:center">2024.11.05</td>
<td style="text-align:center">1、修复回写时往队列发布回写消息，对应的 handler 不处理的问题。<br/>2、新增内部回写测试接口，供内部处理回写请求的转换。</td>
</tr>
<tr>
<td style="text-align:center">2024.11.06</td>
<td style="text-align:center">1、新增内部回报测试接口，供内部处理回报请求的转换。</td>
</tr>
<tr>
<td style="text-align:center">2024.11.07</td>
<td style="text-align:center">1、支持系统初始化校验，交易日期非当日的情况直接报错返回。<br/>2、新增卖券还款业务检查责任链。</td>
</tr>
</tbody>
</table>
<h3 id="6初始化脚本">6.初始化脚本</h3>
<p>系统初始化脚本，打入后，交易回到最初数据状态：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">truncate</span> <span style="color:#66d9ef">table</span> compact.compact;

<span style="color:#66d9ef">truncate</span> <span style="color:#66d9ef">table</span> compact.compact_jour;

<span style="color:#66d9ef">truncate</span> <span style="color:#66d9ef">table</span> compact.compact_summary;

<span style="color:#66d9ef">truncate</span> <span style="color:#66d9ef">table</span> compact.compact_summary_jour;

<span style="color:#66d9ef">truncate</span> <span style="color:#66d9ef">table</span> credit.credit_entrust;

<span style="color:#66d9ef">truncate</span> <span style="color:#66d9ef">table</span> credit.credit_trade_time;

<span style="color:#66d9ef">truncate</span> <span style="color:#66d9ef">table</span> credit.credit_serial_counter_record;

<span style="color:#66d9ef">truncate</span> <span style="color:#66d9ef">table</span> credit.credit_stock_real_jour;

<span style="color:#66d9ef">truncate</span> <span style="color:#66d9ef">table</span> credit.special_cash_group_fund_jour;

<span style="color:#66d9ef">truncate</span> <span style="color:#66d9ef">table</span> quota.cash_group_fund_jour;

<span style="color:#75715e">-- 初始化普通业务头寸资金表
</span><span style="color:#75715e"></span><span style="color:#66d9ef">update</span> quota.cash_group_fund <span style="color:#66d9ef">set</span> financing_total_balance <span style="color:#f92672">=</span> <span style="color:#ae81ff">10000000000</span>.<span style="color:#ae81ff">00</span>,enable_balance <span style="color:#f92672">=</span> <span style="color:#ae81ff">10000000000</span>.<span style="color:#ae81ff">00</span>,frozen_balance <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>.<span style="color:#ae81ff">00</span>,financing_used_balance <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>.<span style="color:#ae81ff">00</span> <span style="color:#66d9ef">where</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;

<span style="color:#75715e">-- 初始化专项业务头寸资金表
</span><span style="color:#75715e"></span><span style="color:#66d9ef">update</span> credit.special_cash_group_fund <span style="color:#66d9ef">set</span> fin_total_balance <span style="color:#f92672">=</span> <span style="color:#ae81ff">10000000000</span>.<span style="color:#ae81ff">00</span>,enable_balance <span style="color:#f92672">=</span> <span style="color:#ae81ff">10000000000</span>.<span style="color:#ae81ff">00</span>,fin_used_balance <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>.<span style="color:#ae81ff">0</span>,ref_due_balance <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>.<span style="color:#ae81ff">0</span>,frozen_balance <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>.<span style="color:#ae81ff">0</span>,cash_interest <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>.<span style="color:#ae81ff">0</span> <span style="color:#66d9ef">where</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;

<span style="color:#75715e">-- 重置流水号额度表各业务种类的计数器为初始值
</span><span style="color:#75715e"></span><span style="color:#66d9ef">update</span> quota.serial_no_counter <span style="color:#66d9ef">set</span> serial_counter_value <span style="color:#f92672">=</span> <span style="color:#ae81ff">1000000</span> <span style="color:#66d9ef">where</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">=</span><span style="color:#ae81ff">1</span> ;

<span style="color:#75715e">-- 重置普通头寸业务资金流水表的计数器号段长度
</span><span style="color:#75715e"></span><span style="color:#66d9ef">update</span> quota.serial_no_counter <span style="color:#66d9ef">set</span> step <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span> <span style="color:#66d9ef">where</span> serial_counter_no <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;

<span style="color:#75715e">-- 重置信用交易委托表的计数器号段长度
</span><span style="color:#75715e"></span><span style="color:#66d9ef">update</span> quota.serial_no_counter <span style="color:#66d9ef">set</span> step <span style="color:#f92672">=</span> <span style="color:#ae81ff">100</span> <span style="color:#66d9ef">where</span> serial_counter_no <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;

<span style="color:#75715e">-- 重置专项头寸业务资金流水表的计数器号段长度
</span><span style="color:#75715e"></span><span style="color:#66d9ef">update</span> quota.serial_no_counter <span style="color:#66d9ef">set</span> step <span style="color:#f92672">=</span> <span style="color:#ae81ff">100</span> <span style="color:#66d9ef">where</span> serial_counter_no <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>;

<span style="color:#75715e">-- 重置专项头寸业务资金流水表回滚的计数器号段长度
</span><span style="color:#75715e"></span><span style="color:#66d9ef">update</span> quota.serial_no_counter <span style="color:#66d9ef">set</span> step <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span> <span style="color:#66d9ef">where</span> serial_counter_no <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>;

<span style="color:#75715e">-- 重置信用客户持仓流水表的计数器号段长度
</span><span style="color:#75715e"></span><span style="color:#66d9ef">update</span> quota.serial_no_counter <span style="color:#66d9ef">set</span> step <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span> <span style="color:#66d9ef">where</span> serial_counter_no <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>;


<span style="color:#75715e">-- 插入信用交易时间表
</span><span style="color:#75715e"></span><span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> credit.credit_trade_time (id, time_kind, init_date, begin_time, end_time, remark, withdraw_flag) <span style="color:#66d9ef">VALUES</span> (<span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#39;0&#39;</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#e6db74">&#39;0-交易系统是否初始化&#39;</span>, <span style="color:#e6db74">&#39;0&#39;</span>);
<span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> credit.credit_trade_time (id, time_kind, init_date, begin_time, end_time, remark, withdraw_flag) <span style="color:#66d9ef">VALUES</span> (<span style="color:#ae81ff">2</span>, <span style="color:#e6db74">&#39;3&#39;</span>, <span style="color:#ae81ff">20231130</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">99999999</span>, <span style="color:#e6db74">&#39;信用交易时间&#39;</span>, <span style="color:#e6db74">&#39;1&#39;</span>);
<span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> credit.credit_trade_time (id, time_kind, init_date, begin_time, end_time, remark, withdraw_flag) <span style="color:#66d9ef">VALUES</span> (<span style="color:#ae81ff">3</span>, <span style="color:#e6db74">&#39;4&#39;</span>, <span style="color:#ae81ff">20241028</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">99999999</span>, <span style="color:#e6db74">&#39;信用委托撤单时间&#39;</span>, <span style="color:#e6db74">&#39;1&#39;</span>);

</code></pre></div><h3 id="7字段释义">7.字段释义</h3>
<table>
<thead>
<tr>
<th>字段名</th>
<th>mysql类型</th>
<th>java类型</th>
<th>备注</th>
<th>枚举</th>
</tr>
</thead>
<tbody>
<tr>
<td>userId</td>
<td>varchar(64)</td>
<td>String</td>
<td>用户id（客户层id）</td>
<td>不涉及</td>
</tr>
<tr>
<td>fundAccount</td>
<td>bigint</td>
<td>long</td>
<td>资产账号</td>
<td>不涉及</td>
</tr>
<tr>
<td>stockAccount</td>
<td>varchar(64)</td>
<td>String</td>
<td>股东账号</td>
<td>不涉及</td>
</tr>
<tr>
<td>cashGroupAccount</td>
<td>bigint</td>
<td>Long</td>
<td>头寸账号</td>
<td>不涉及</td>
</tr>
<tr>
<td>branchNo</td>
<td>int</td>
<td>int</td>
<td>营业部编号</td>
<td>不涉及</td>
</tr>
<tr>
<td>accountStatus</td>
<td>int</td>
<td>int</td>
<td>账号状态</td>
<td>不涉及</td>
</tr>
<tr>
<td>realAction</td>
<td>tinyint</td>
<td>int</td>
<td>发生动作，常用在记录资金流水、股份流水时，表明是成交回报流程或是委托流程发生的资金、股份变更</td>
<td>0，委托过程中记录流水<br/>1，回报过程中记录流水</td>
</tr>
<tr>
<td>entrustStatus</td>
<td>tinyint</td>
<td>int</td>
<td>委托状态，表明一笔委托当前在业务系统中的流转状态</td>
<td>0：未报<br/>1：待报<br/>2：已报<br/>6：已撤<br/>8：已成</td>
</tr>
<tr>
<td>compactStatus</td>
<td>char(1)</td>
<td>char</td>
<td>合约状态，表明信用交易产生合约的当前状态</td>
<td>0：未了结<br/>1：部分了结<br/>2：已了结<br/>3：作废</td>
</tr>
<tr>
<td>compactType</td>
<td>char(1)</td>
<td>char</td>
<td>合约类型，融资或者融券合约</td>
<td>1：融资合约<br/>2：融券合约</td>
</tr>
<tr>
<td>exchangeType</td>
<td>varchar(10)</td>
<td>String</td>
<td>交易市场</td>
<td>1：上海市场<br/>2：深圳市场<br/>3：北交所</td>
</tr>
<tr>
<td>fareProp</td>
<td>char(1)</td>
<td>String</td>
<td>费用属性，只有前台/后台费用</td>
<td>0：前台费用<br/>1：后台费用</td>
</tr>
<tr>
<td>fareType</td>
<td>char(1)</td>
<td>String</td>
<td>费用类型</td>
<td>0-佣金<br/>1-印花税<br/>2-过户费<br/>3-其他费用<br/>x-其他费用</td>
</tr>
<tr>
<td>fundAccountStatus</td>
<td>int</td>
<td>int</td>
<td>资产账号状态</td>
<td>0：正常<br/>1：休眠<br/>2：冻结<br/>4：销户<br/>5：未知</td>
</tr>
<tr>
<td>seatProp</td>
<td>smallInt</td>
<td>int</td>
<td>席位属性</td>
<td>0：普通席位<br/>7：信用席位</td>
</tr>
<tr>
<td>stockAccountStatus</td>
<td>smallint</td>
<td>int</td>
<td>证券账号状态</td>
<td>0：正常<br/>1：休眠<br/>2：未知<br/></td>
</tr>
<tr>
<td>accountType</td>
<td>char</td>
<td>char</td>
<td>证券账号类型</td>
<td>0：普通证券账号<br/>1：信用证券账号</td>
</tr>
<tr>
<td>stockType</td>
<td>char(2)</td>
<td>String</td>
<td>证券类型</td>
<td>0：股票<br/>4：新股<br/>G：新债</td>
</tr>
<tr>
<td>entrustPrice</td>
<td>decimal(20,2)</td>
<td>BigDecimal</td>
<td>委托价格</td>
<td>不涉及</td>
</tr>
<tr>
<td>entrustAmount</td>
<td>int</td>
<td>int</td>
<td>委托数量</td>
<td>不涉及</td>
</tr>
<tr>
<td>entrustBalance</td>
<td>decimal(20,2)</td>
<td>BigDecimal</td>
<td>委托总金额，不包含前后台费用</td>
<td>不涉及</td>
</tr>
<tr>
<td>prevBalance</td>
<td>decimal(20,2)</td>
<td>BigDecimal</td>
<td>委托发生金额，委托下单时落表，包含前后台费用</td>
<td>不涉及</td>
</tr>
<tr>
<td>clearBalance</td>
<td>decimal(20,2)</td>
<td>BigDecimal</td>
<td>清算金额，回报时更新，包含当前成交数量对应的前后台费用（分笔成交回报的场景，每次回报会重新计算本次回报金额对应的后台费用，并累加至清算金额。）</td>
<td>不涉及</td>
</tr>
<tr>
<td>orderId</td>
<td>bigint</td>
<td>Long</td>
<td>委托编号</td>
<td>不涉及</td>
</tr>
<tr>
<td>origOrderId</td>
<td>bigint</td>
<td>Long</td>
<td>原委托编号，撤单委托记录要撤单的委托号，普通委托记录自身的委托号</td>
<td>不涉及</td>
</tr>
<tr>
<td>businessAmount</td>
<td>int</td>
<td>int</td>
<td>成交数量</td>
<td>不涉及</td>
</tr>
<tr>
<td>businessPrice</td>
<td>decimal(20,2)</td>
<td>BigDecimal</td>
<td>成交价格</td>
<td>不涉及</td>
</tr>
<tr>
<td>businessBalance</td>
<td>decimal(20,2)</td>
<td>BigDecimal</td>
<td>成交金额，不包含前后台费用</td>
<td>不涉及</td>
</tr>
<tr>
<td>stockCode</td>
<td>varchar(10)</td>
<td>String</td>
<td>证券代码</td>
<td>不涉及</td>
</tr>
<tr>
<td>realBuyAmount</td>
<td>bigint</td>
<td>Long</td>
<td>回报买入数量</td>
<td>不涉及</td>
</tr>
<tr>
<td>realBuyBalance</td>
<td>decimal(20,2)</td>
<td>BigDecimal</td>
<td>回报买入金额</td>
<td>不涉及</td>
</tr>
<tr>
<td>realSellAmount</td>
<td>bigint</td>
<td>Long</td>
<td>回报卖出数量</td>
<td>不涉及</td>
</tr>
<tr>
<td>realSellBalance</td>
<td>decimal(20,2)</td>
<td>BigDecimal</td>
<td>回报卖出金额</td>
<td>不涉及</td>
</tr>
<tr>
<td>frozenAmount</td>
<td>bigint</td>
<td>Long</td>
<td>当日买入冻结数量</td>
<td>不涉及</td>
</tr>
<tr>
<td>unfrozenAmount</td>
<td>bigint</td>
<td>Long</td>
<td>当日卖出解冻数量</td>
<td>不涉及</td>
</tr>
<tr>
<td>currentAmount</td>
<td>bigint</td>
<td>Long</td>
<td>当前数量（包含不可卖的证券数量）</td>
<td>不涉及</td>
</tr>
<tr>
<td>enableAmount</td>
<td>bigint</td>
<td>Long</td>
<td>可用数量（可进行卖出操作的证券数量）</td>
<td>不涉及</td>
</tr>
</tbody>
</table>
<h3 id="8-todo-list">8. todo list</h3>
<ul>
<li>✅<s>流水计数器中的缓存功能，需要维护每一种计数器种类的号段起始值，否则存在多种计数器种类缓存无法击中的风险。</s></li>
<li>✅<s>专项头寸资金发生变化，流水序列号使用带缓存的统一流水计数器工具类。</s></li>
<li>✅<s>流水计数器缓存，需要判断新申请号段的情况下才更新缓存中号段的起始值。</s></li>
<li>✅<s>构造成交回报报文，并解析报文。</s></li>
<li>✅<s>统一报文反序列化处理器和消息元数据处理器托管给 Spring 容器管理生命周期，支持嵌入各业务系统。</s></li>
<li>✅<s>ringbuffer 模块需要自定义一个注解来实现业务子系统集成该模块后能扫描到该模块下的 bean。</s></li>
<li>✅<s>搭建回报模块，执行回报流程。</s></li>
<li>✅<s>实现委托撤单。</s></li>
<li>✅<s>融资买入回报业务处理器，需要实现 doRevert，并在 doHandle 中触发。</s></li>
<li>🔴融资买入回报业务处理器，需要集成 RingBuffer ，实现高性能异步队列处理回报请求。</li>
<li>🔴统一流水计数器考虑抽象成公共组件，供各业务子系统使用。</li>
<li>🔴普通业务头寸资金流水表，需要通过统一流水计数器获取序列号，同时考虑性能，序列号递增的写库操作考虑引入异步队列触发。</li>
</ul>
<h3 id="9-流水计数器种类">9. 流水计数器种类</h3>
<table>
<thead>
<tr>
<th>计数器编号</th>
<th>对应数据表名</th>
<th>单次申请步长</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>头寸账户资金流水表</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>信用交易委托表</td>
<td>100</td>
</tr>
<tr>
<td>2</td>
<td>客户专项头寸资金表</td>
<td>100</td>
</tr>
<tr>
<td>3</td>
<td>客户专项头寸资金表回滚专用</td>
<td>1</td>
</tr>
<tr>
<td>4</td>
<td>信用客户持仓流水表</td>
<td>1</td>
</tr>
</tbody>
</table>
]]></content>
        </item>
        
        <item>
            <title>LeetCode算法手记：26.删除有序数组中的重复项</title>
            <link>https://Huang-zh.github.io/posts/leetcode26/</link>
            <pubDate>Tue, 19 Sep 2023 21:41:08 +0800</pubDate>
            
            <guid>https://Huang-zh.github.io/posts/leetcode26/</guid>
            <description>给你一个有序数组 nums ，请你原地删除重复出现的元素，使每个元素只出现一次 ，返回删除后数组的新长度。 不要使用额外的数组空间，你必须在原地修改输入数</description>
            <content type="html"><![CDATA[<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">给你一个有序数组 nums ，请你原地删除重复出现的元素，使每个元素只出现一次 ，返回删除后数组的新长度。
不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。

说明：
为什么返回数值是整数，但输出的答案是数组呢?
请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。

示例 1：
输入：nums = [1,1,2]
输出：2, nums = [1,2]
解释：函数应该返回新的长度2，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。

示例 2：
输入：nums = [0,0,1,1,1,2,2,3,3,4]
输出：5, nums = [0,1,2,3,4]
解释：函数应该返回新的长度 5，并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。

提示：
0 &lt;= nums.length &lt;= 3*104
-104 &lt;= nums[i] &lt;= 104
nums已按升序排列
</code></pre></div><h3 id="思路">思路</h3>
<p>定义快慢指针，在快指针从前向后遍历的过程中，如果遇到新的值和当前慢指针的值不同，则慢指针向后递进一格并替换慢指针当前的值为快指针的值，这样就能跳过重复的元素，最后返回慢指针指向的下标+1（从0开始）就能得到正确的答案。</p>
<h4 id="思路递推">思路递推</h4>
<p>以示例二中的 nums = [0,0,1,1,1,2,2,3,3,4]进行递推：</p>
<ul>
<li>
<p>定义慢指针i，快指针j，初始i = 0，j = 0。</p>
</li>
<li>
<p>此时nums[i] = 0，nums[j] = 0，二者相等，慢指针i不动，快指针j继续向后递进。</p>
</li>
<li>
<p>i = 0，j = 1。</p>
</li>
<li>
<p>此时nums[i] = 0，nums[j] = 0，二者相等，慢指针i不动，快指针j继续向后递进。</p>
</li>
<li>
<p>i = 0，j = 2。</p>
</li>
<li>
<p>此时nums[i] = 0，nums[j] = 1，二者不相等，慢指针i向后递进，并替换当前nums[i]的值为nums[j]，快指针j继续向后递进。</p>
</li>
<li>
<p>i = 1，j = 3。</p>
</li>
<li>
<p>此时nums[i] = 1，nums[j] = 2，二者相等，慢指针i不动，快指针j继续向后递进。</p>
</li>
<li>
<p>i = 1，j = 4。</p>
</li>
<li>
<p>此时nums[i] = 1，nums[j] = 2，二者相等，慢指针i不动，快指针j继续向后递进。</p>
</li>
<li>
<p>i = 1，j = 5。</p>
</li>
<li>
<p>此时nums[i] = 1，nums[j] = 2，二者不相等，慢指针i向后递进，并替换当前nums[i]的值为nums[j]，快指针j继续向后递进。</p>
</li>
<li>
<p>i = 2，j = 6。</p>
</li>
<li>
<p>此时nums[i] = 2，nums[j] = 2，二者相等，慢指针i不动，快指针j继续向后递进。</p>
</li>
<li>
<p>i = 2，j = 7。</p>
</li>
<li>
<p>此时nums[i] = 2，nums[j] = 3，二者不相等，慢指针i向后递进，并替换当前nums[i]的值为nums[j]，快指针j继续向后递进。</p>
</li>
<li>
<p>i = 3，j = 8。</p>
</li>
<li>
<p>此时nums[i] = 3，nums[j] = 3，二者相等，慢指针i不动，快指针j继续向后递进。</p>
</li>
<li>
<p>i = 3，j = 9。</p>
</li>
<li>
<p>此时nums[i] = 3，nums[j] = 4，二者不相等，慢指针i向后递进，并替换当前nums[i]的值为nums[j]，快指针j继续向后递进。</p>
</li>
<li>
<p>此时快指针到达末尾，退出循环，答案为慢指针i+1，即为5。</p>
</li>
</ul>
<h3 id="代码实现">代码实现</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">removeDuplicates</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span><span style="color:#f92672">[]</span> nums<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">int</span> length <span style="color:#f92672">=</span> nums<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">;</span>
        <span style="color:#75715e">//定义快慢指针，只有当快指针的值和慢指针不相等时，慢指针前进一格并替换当前快指针的值
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 0<span style="color:#f92672">,</span>j <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span>
        <span style="color:#66d9ef">while</span> <span style="color:#f92672">(</span>j <span style="color:#f92672">&lt;</span> length<span style="color:#f92672">){</span>
            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>nums<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span> <span style="color:#f92672">!=</span> nums<span style="color:#f92672">[</span>j<span style="color:#f92672">]){</span>
                i<span style="color:#f92672">++;</span>
                nums<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> nums<span style="color:#f92672">[</span>j<span style="color:#f92672">];</span>
            <span style="color:#f92672">}</span>
            j<span style="color:#f92672">++;</span>
        <span style="color:#f92672">}</span>
        <span style="color:#66d9ef">return</span> i<span style="color:#f92672">+</span>1<span style="color:#f92672">;</span>
    <span style="color:#f92672">}</span>

    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">test</span><span style="color:#f92672">(){</span>
        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>removeDuplicates<span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> <span style="color:#66d9ef">int</span><span style="color:#f92672">[]{</span>0<span style="color:#f92672">,</span>0<span style="color:#f92672">,</span>1<span style="color:#f92672">,</span>1<span style="color:#f92672">,</span>1<span style="color:#f92672">,</span>2<span style="color:#f92672">,</span>2<span style="color:#f92672">,</span>3<span style="color:#f92672">,</span>3<span style="color:#f92672">,</span>4<span style="color:#f92672">}));</span>
    <span style="color:#f92672">}</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>LeetCode算法手记：1.两数之和</title>
            <link>https://Huang-zh.github.io/posts/leetcode1/</link>
            <pubDate>Tue, 19 Sep 2023 21:27:18 +0800</pubDate>
            
            <guid>https://Huang-zh.github.io/posts/leetcode1/</guid>
            <description>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出和为目标值 target 的那两个整数，并返回它们的数组下标。 你可以假设每种输入只会对应</description>
            <content type="html"><![CDATA[<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出和为目标值 target 的那两个整数，并返回它们的数组下标。
你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。你可以按任意顺序返回答案。

示例 1：
输入：nums = [2,7,11,15], target = 9
输出：[0,1]
解释：因为 nums[0] + nums[1] == 9，返回 [0,1] 。

示例 2：
输入：nums = [3,2,4]，target = 6
输出：[1,2]

示例 3：
输入：nums = [3,3]，target = 6
输出：[0,1]

提示：
2 &lt;= nums.length &lt;= 104
-109 &lt;= nums[i] &lt;= 109
-109 &lt;= target &lt;= 109
只会存在一个有效答案
</code></pre></div><blockquote>
<p>梦开始的地方。</p>
</blockquote>
<h3 id="思路">思路</h3>
<p>既然存在nums[i]和nums[j](0 &lt;= i &lt; j &lt; nums.length)，使得nums[i]与nums[j]的和为target。那么可以在遍历nums的过程中，使用字典记录当前target-nums[j]（即nums[i]）的值和对应的下标，那么，在后续遍历至nums[j]的过程中，自然能够通过target-nums[j]获得nums[i]所对应的下标。</p>
<h4 id="思路递推">思路递推</h4>
<p>以实例一中的nums = [2,7,11,15], target = 9为例：</p>
<ul>
<li>初始化map，开始遍历，i = 0，nums[i] = 2,nums[j] = target - nums[i] = 7。</li>
<li>map中不存在key为7的键值对，将当前nums[i]作为key，下标i作为value放入map，至此map中包含键值对：
<ul>
<li>2 -&gt; 0</li>
</ul>
</li>
<li>i = 1，nums[i] = 7,nums[j] = target - nums[i] = 2。</li>
<li>map中已存在key为2的键值对，通过2获得对应的下标，结合当前i直接返回下标元组[0,1]。</li>
</ul>
<h3 id="代码实现">代码实现</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span><span style="color:#f92672">[]</span> <span style="color:#a6e22e">twoSum</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span><span style="color:#f92672">[]</span> nums<span style="color:#f92672">,</span> <span style="color:#66d9ef">int</span> target<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">int</span> initialCapacity <span style="color:#f92672">=</span> nums<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span> <span style="color:#f92672">%</span> 2 <span style="color:#f92672">==</span> 0 <span style="color:#f92672">?</span> nums<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span> <span style="color:#f92672">:</span> nums<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span> <span style="color:#f92672">&lt;&lt;</span> 1<span style="color:#f92672">;</span>
        Map<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">,</span>Integer<span style="color:#f92672">&gt;</span> map <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> HashMap<span style="color:#f92672">&lt;&gt;(</span>initialCapacity<span style="color:#f92672">);</span>
        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> nums<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">;</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
            <span style="color:#75715e">//遍历的过程中，将当前元素的值nums[i]和下标i加入字典
</span><span style="color:#75715e"></span>            <span style="color:#75715e">//后续的过程中，target-nums[j]一定会匹配到之前加入的、能够相加等于target的元素nums[i]
</span><span style="color:#75715e"></span>            <span style="color:#66d9ef">int</span> key <span style="color:#f92672">=</span> target <span style="color:#f92672">-</span> nums<span style="color:#f92672">[</span>i<span style="color:#f92672">];</span>
            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>map<span style="color:#f92672">.</span><span style="color:#a6e22e">containsKey</span><span style="color:#f92672">(</span>key<span style="color:#f92672">))</span> <span style="color:#f92672">{</span>
                <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> <span style="color:#66d9ef">int</span><span style="color:#f92672">[]{</span>map<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span>key<span style="color:#f92672">),</span>i<span style="color:#f92672">};</span>
            <span style="color:#f92672">}</span>
            map<span style="color:#f92672">.</span><span style="color:#a6e22e">put</span><span style="color:#f92672">(</span>nums<span style="color:#f92672">[</span>i<span style="color:#f92672">],</span>i<span style="color:#f92672">);</span>
        <span style="color:#f92672">}</span>
        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> <span style="color:#66d9ef">int</span><span style="color:#f92672">[]{-</span>1<span style="color:#f92672">,-</span>1<span style="color:#f92672">};</span>
    <span style="color:#f92672">}</span>

    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">test</span><span style="color:#f92672">(){</span>
        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>Arrays<span style="color:#f92672">.</span><span style="color:#a6e22e">toString</span><span style="color:#f92672">(</span>twoSum<span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> <span style="color:#66d9ef">int</span><span style="color:#f92672">[]{</span>2<span style="color:#f92672">,</span>7<span style="color:#f92672">,</span>11<span style="color:#f92672">,</span>15<span style="color:#f92672">},</span>9<span style="color:#f92672">)));</span>
    <span style="color:#f92672">}</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>LeetCode算法手记：986.区间列表的交集</title>
            <link>https://Huang-zh.github.io/posts/leetcode986/</link>
            <pubDate>Sun, 17 Sep 2023 12:10:26 +0800</pubDate>
            
            <guid>https://Huang-zh.github.io/posts/leetcode986/</guid>
            <description>给定两个由一些闭区间组成的列表，firstList 和 secondList ，其中 firstList[i] = [start i, end i] 而 secondList[j] = [start j, end j] 。 每个区间列表都是成对不相交的，并且已经排序 。返回这两</description>
            <content type="html"><![CDATA[<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">给定两个由一些闭区间组成的列表，firstList 和 secondList ，其中 firstList[i] = [start i, end i] 而 secondList[j] = [start j, end j] 。

每个区间列表都是成对不相交的，并且已经排序 。返回这两个区间列表的交集 。

形式上，闭区间 [a, b]（其中 a &lt;= b）表示实数 x 的集合，而 a &lt;= x &lt;= b 。

两个闭区间的交集是一组实数，要么为空集，要么为闭区间。例如，[1, 3] 和 [2, 4] 的交集为 [2, 3] 。

示例 1：
输入：firstList = [[0,2],[5,10],[13,23],[24,25]], secondList = [[1,5],[8,12],[15,24],[25,26]]
输出：[[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]

示例 2：
输入：firstList = [[1,3],[5,9]], secondList = [ ]
输出：[ ]

示例 3：
输入：firstList = [], secondList = [[4,8],[10,12]]
输出：[ ]

示例 4：
输入：firstList = [[1,7]], secondList = [[3,10]]
输出：[[3,7]]

提示：
0 &lt;= firstList.length, secondList.length &lt;= 1000
firstList.length + secondList.length &gt;= 1
0 &lt;= start i &lt; end i &lt;= 109
end i &lt; start i+1
0 &lt;= start j &lt; end j &lt;= 109
end j &lt; start j+1

</code></pre></div><h3 id="思路">思路</h3>
<p>维护双指针i，j，各自指向两个区间列表，对应[starti,endi]和[startj,endj]。</p>
<p>其实如果两个区间[starti,endi]和[startj,endj]存在交集，则必然遵循这样的规律：</p>
<ul>
<li>
<ol>
<li>endj必然大于等于starti，同时，endi必然大于等于startj。</li>
</ol>
</li>
<li>
<ol start="2">
<li>交集的开闭区间必然为[max(starti,startj),min(endi,endj)]。</li>
</ol>
</li>
</ul>
<p><img src="https://qiniu.lemonhuang.com/LeetCode986.png" alt="相交区间"></p>
<p>同时，对于区间的末尾，需要做判断：</p>
<ul>
<li>
<p>如果endi在endj之后，说明区间i向后延伸更长的范围，可能会和下一个区间j有交集，此时需要判断下一个j区间。</p>
</li>
<li>
<p>如果endj在endi之后，说明区间j向后延伸更长的范围，可能会和下一个区间i有交集，此时需要判断下一个i区间。</p>
</li>
</ul>
<h4 id="思路递推">思路递推</h4>
<p>以实例一中的firstList = [[0,2],[5,10],[13,23],[24,25]], secondList = [[1,5],[8,12],[15,24],[25,26]]为例：</p>
<ul>
<li>初始化，i = 0，j = 0。</li>
<li>[starti,endi]对应[0,2],[startj,endj]对应[1,5]，发现endj大于等于starti且endi大于等于startj，得到相交区间[max(starti,startj),min(endi,endj)] = [1,2]，加入结果集。</li>
<li>此时endj大于endi，说明区间j向后延伸更长的范围，可能会和下一个区间i有交集，此时需要判断下一个i区间，因此i++向后递进。</li>
<li>i = 1，j = 0。</li>
<li>[starti,endi]对应[5,10],[startj,endj]对应[1,5]，发现endj大于等于starti且endi大于等于startj，得到相交区间[max(starti,startj),min(endi,endj)] = [5,5]，加入结果集。</li>
<li>此时endi大于endj，说明区间i向后延伸更长的范围，可能会和下一个区间j有交集，此时需要判断下一个j区间，因此j++向后递进。</li>
<li>i = 1，j = 1。</li>
<li>[starti,endi]对应[5,10],[startj,endj]对应[8,12]，发现endj大于等于starti且endi大于等于startj，得到相交区间[max(starti,startj),min(endi,endj)] = [8,10]，加入结果集。</li>
<li>此时endj大于endi，说明区间j向后延伸更长的范围，可能会和下一个区间i有交集，此时需要判断下一个i区间，因此i++向后递进。</li>
<li>i = 2，j = 1。</li>
<li>[starti,endi]对应[13,23],[startj,endj]对应[8,12]，发现不满足endj大于等于starti且endi大于等于startj，无法得到相交区间。</li>
<li>此时endi大于endj，说明区间i向后延伸更长的范围，可能会和下一个区间j有交集，此时需要判断下一个j区间，因此j++向后递进。</li>
<li>i = 2，j = 2。</li>
<li>[starti,endi]对应[13,23],[startj,endj]对应[15,24]，发现endj大于等于starti且endi大于等于startj，得到相交区间[max(starti,startj),min(endi,endj)] = [15,23]，加入结果集。</li>
<li>此时endj大于endi，说明区间j向后延伸更长的范围，可能会和下一个区间i有交集，此时需要判断下一个i区间，因此i++向后递进。</li>
<li>i = 3，j = 2。</li>
<li>[starti,endi]对应[24,25],[startj,endj]对应[15,24]，发现endj大于等于starti且endi大于等于startj，得到相交区间[max(starti,startj),min(endi,endj)] = [24,24]，加入结果集。</li>
<li>此时endi大于endj，说明区间i向后延伸更长的范围，可能会和下一个区间j有交集，此时需要判断下一个j区间，因此j++向后递进。</li>
<li>i = 3，j = 3。</li>
<li>[starti,endi]对应[24,25],[startj,endj]对应[25,26]，发现endj大于等于starti且endi大于等于startj，得到相交区间[max(starti,startj),min(endi,endj)] = [25,25]，加入结果集。</li>
<li>此时endj大于endi，说明区间j向后延伸更长的范围，可能会和下一个区间i有交集，此时需要判断下一个i区间，因此i++向后递进。</li>
<li>i = 4，j = 3，由于i已经超越数组边界，退出循环。</li>
<li>最终结果为[[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]</li>
</ul>
<h3 id="代码实现">代码实现</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span><span style="color:#f92672">[][]</span> <span style="color:#a6e22e">intervalIntersection</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span><span style="color:#f92672">[][]</span> firstList<span style="color:#f92672">,</span> <span style="color:#66d9ef">int</span><span style="color:#f92672">[][]</span> secondList<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">int</span> fLength <span style="color:#f92672">=</span> firstList<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">,</span>sLength <span style="color:#f92672">=</span> secondList<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">;</span>
        <span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 0<span style="color:#f92672">,</span>j <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span>
        List<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span><span style="color:#f92672">[]&gt;</span> list <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ArrayList<span style="color:#f92672">&lt;&gt;();</span>
        <span style="color:#66d9ef">while</span> <span style="color:#f92672">(</span>i <span style="color:#f92672">&lt;</span> fLength <span style="color:#f92672">&amp;&amp;</span> j <span style="color:#f92672">&lt;</span> sLength<span style="color:#f92672">){</span>
            <span style="color:#66d9ef">int</span> startI <span style="color:#f92672">=</span> firstList<span style="color:#f92672">[</span>i<span style="color:#f92672">][</span>0<span style="color:#f92672">],</span>endI <span style="color:#f92672">=</span> firstList<span style="color:#f92672">[</span>i<span style="color:#f92672">][</span>1<span style="color:#f92672">];</span>
            <span style="color:#66d9ef">int</span> startJ <span style="color:#f92672">=</span> secondList<span style="color:#f92672">[</span>j<span style="color:#f92672">][</span>0<span style="color:#f92672">],</span>endJ <span style="color:#f92672">=</span> secondList<span style="color:#f92672">[</span>j<span style="color:#f92672">][</span>1<span style="color:#f92672">];</span>
            <span style="color:#75715e">//只有endJ大于等于startI 且 startJ 大于等于endI 才能证明两者存在交集
</span><span style="color:#75715e"></span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>endJ <span style="color:#f92672">&gt;=</span> startI <span style="color:#f92672">&amp;&amp;</span> endI <span style="color:#f92672">&gt;=</span> startJ <span style="color:#f92672">){</span>
                list<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> <span style="color:#66d9ef">int</span><span style="color:#f92672">[]{</span>Math<span style="color:#f92672">.</span><span style="color:#a6e22e">max</span><span style="color:#f92672">(</span>startI<span style="color:#f92672">,</span>startJ<span style="color:#f92672">),</span>Math<span style="color:#f92672">.</span><span style="color:#a6e22e">min</span><span style="color:#f92672">(</span>endI<span style="color:#f92672">,</span>endJ<span style="color:#f92672">)});</span>
            <span style="color:#f92672">}</span>
            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>endJ <span style="color:#f92672">&lt;</span> endI<span style="color:#f92672">){</span>
                j<span style="color:#f92672">++;</span>
            <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
                i<span style="color:#f92672">++;</span>
            <span style="color:#f92672">}</span>
        <span style="color:#f92672">}</span>
        <span style="color:#66d9ef">return</span> list<span style="color:#f92672">.</span><span style="color:#a6e22e">toArray</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> <span style="color:#66d9ef">int</span><span style="color:#f92672">[</span>0<span style="color:#f92672">][</span>0<span style="color:#f92672">]);</span>
    <span style="color:#f92672">}</span>

    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">test</span><span style="color:#f92672">(){</span>
        <span style="color:#66d9ef">int</span><span style="color:#f92672">[][]</span> ints <span style="color:#f92672">=</span> intervalIntersection<span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> <span style="color:#66d9ef">int</span><span style="color:#f92672">[][]{{</span>0<span style="color:#f92672">,</span> 2<span style="color:#f92672">},</span> <span style="color:#f92672">{</span>5<span style="color:#f92672">,</span> 10<span style="color:#f92672">},</span> <span style="color:#f92672">{</span>13<span style="color:#f92672">,</span> 23<span style="color:#f92672">},</span> <span style="color:#f92672">{</span>24<span style="color:#f92672">,</span> 25<span style="color:#f92672">}},</span> <span style="color:#66d9ef">new</span> <span style="color:#66d9ef">int</span><span style="color:#f92672">[][]{{</span>1<span style="color:#f92672">,</span> 5<span style="color:#f92672">},</span> <span style="color:#f92672">{</span>8<span style="color:#f92672">,</span> 12<span style="color:#f92672">},</span> <span style="color:#f92672">{</span>15<span style="color:#f92672">,</span> 24<span style="color:#f92672">},</span> <span style="color:#f92672">{</span>25<span style="color:#f92672">,</span> 26<span style="color:#f92672">}});</span>
        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span><span style="color:#f92672">[]</span> anInt <span style="color:#f92672">:</span> ints<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
            System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>Arrays<span style="color:#f92672">.</span><span style="color:#a6e22e">toString</span><span style="color:#f92672">(</span>anInt<span style="color:#f92672">));</span>
        <span style="color:#f92672">}</span>
    <span style="color:#f92672">}</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>LeetCode算法手记：1781.所有子字符串美丽值之和</title>
            <link>https://Huang-zh.github.io/posts/leetcode1781/</link>
            <pubDate>Sat, 16 Sep 2023 21:33:23 +0800</pubDate>
            
            <guid>https://Huang-zh.github.io/posts/leetcode1781/</guid>
            <description>一个字符串的美丽值定义为：出现频率最高字符与出现频率最低字符的出现次数之差。 比方说，“abaacc” 的美丽值为 3 - 1 = 2 。 给你一个字符串 s ，</description>
            <content type="html"><![CDATA[<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">一个字符串的美丽值定义为：出现频率最高字符与出现频率最低字符的出现次数之差。

比方说，“abaacc” 的美丽值为 3 - 1 = 2 。

给你一个字符串 s ，请你返回它所有子字符串的美丽值之和。

示例 1：
输入：s = “aabcb”
输出：5
解释：美丽值不为零的字符串包括 [“aab”,“aabc”,“aabcb”,“abcb”,“bcb”] ，每一个字符串的美丽值都为 1。

示例 2：
输入：s = “aabcbaa”
输出：17

提示：
1 &lt;= s.length &lt;= 500
s 只包含小写英文字母。
</code></pre></div><h3 id="思路">思路</h3>
<p>通过双指针i，j进行双层循环，能够获得字符串s所有的子字符串。</p>
<p>在每一次第二层循环之前，初始化一个长度为26的数组frequency，记录s[i]-s[j]组成的字符串中各字符出现的频率。</p>
<p>同时维护一个maxNum用于记录当前s[i]-s[j]组成的字符串中最高的字符出现频率。</p>
<p>在每一次子字符串获得后，获取s[i]-s[j]组成的字符串中最低的字符出现频率minNum。将maxNum和minNum的差值累加，最后得到result。</p>
<h4 id="思路递推">思路递推</h4>
<p>以实例一中s=&ldquo;aabcb&quot;为例：</p>
<ul>
<li>初始i = 0,j = 0。</li>
<li>初始化frequency数组，同时当前子字符串为&quot;a&rdquo;。</li>
<li>s[j] = &lsquo;a&rsquo;，frequency[s[j] - &lsquo;a&rsquo;] = frequency[0] = 1，maxNum = 1(a)，minNum = 1(a)，差值为0，result += 0，此时result = 0。</li>
<li>i = 0,j = 1。</li>
<li>当前子字符串为&quot;aa&quot;。</li>
<li>s[j] = &lsquo;a&rsquo;，frequency[s[j] - &lsquo;a&rsquo;] = frequency[0] = 2，maxNum = 2(a)，minNum = 2(a)，差值为0，result += 0，此时result = 0。</li>
<li>i = 0,j = 2。</li>
<li>当前子字符串为&quot;aab&quot;。</li>
<li>s[j] = &lsquo;b&rsquo;，frequency[s[j] - &lsquo;a&rsquo;] = frequency[1] = 1，maxNum = 2(a)，minNum = 1(b)，差值为1，result += 1，此时result = 1。</li>
<li>i = 0,j = 3。</li>
<li>当前子字符串为&quot;aabc&quot;。</li>
<li>s[j] = &lsquo;c&rsquo;，frequency[s[j] - &lsquo;a&rsquo;] = frequency[2] = 1，maxNum = 2(a)，minNum = 1(b/c)，差值为1，result += 1，此时result = 2.</li>
<li>i = 0,j = 4。</li>
<li>当前子字符串为&quot;aabcb&quot;。</li>
<li>s[j] = &lsquo;b&rsquo;，frequency[s[j] - &lsquo;a&rsquo;] = frequency[1] = 2，maxNum = 2(a/b)，minNum = 1(c)，差值为1，result += 1，此时result = 3.</li>
<li>i = 1,j = 1。</li>
<li>初始化frequency数组，同时当前子字符串为&quot;a&quot;。</li>
<li>s[j] = &lsquo;a&rsquo;，frequency[s[j] - &lsquo;a&rsquo;] = frequency[0] = 1，maxNum = 1(a)，minNum = 1(a)，差值为0，result += 0，此时result = 3。</li>
<li>i = 1,j = 2。</li>
<li>当前子字符串为&quot;ab&quot;。</li>
<li>s[j] = &lsquo;b&rsquo;，frequency[s[j] - &lsquo;a&rsquo;] = frequency[1] = 1，maxNum = 1(a)，minNum = 1(a/b)，差值为0，result += 0，此时result = 3。</li>
<li>i = 1,j = 3。</li>
<li>当前子字符串为&quot;abc&quot;。</li>
<li>s[j] = &lsquo;c&rsquo;，frequency[s[j] - &lsquo;a&rsquo;] = frequency[2] = 1，maxNum = 1(a/b/c)，minNum = 1(a/b/c)，差值为0，result += 0，此时result = 3。</li>
<li>i = 1,j = 4。</li>
<li>当前子字符串为&quot;abcb&quot;。</li>
<li>s[j] = &lsquo;b&rsquo;，frequency[s[j] - &lsquo;a&rsquo;] = frequency[1] = 2，maxNum = 2(b)，minNum = 1(a/c)，差值为1，result += 1，此时result = 4。</li>
<li>i = 2,j = 2。</li>
<li>初始化frequency数组，同时当前子字符串为&quot;b&quot;。</li>
<li>s[j] = &lsquo;b&rsquo;，frequency[s[j] - &lsquo;a&rsquo;] = frequency[1] = 1，maxNum = 1(b)，minNum = 1(b)，差值为0，result += 0，此时result = 4。</li>
<li>i = 2,j = 3。</li>
<li>当前子字符串为&quot;bc&quot;。</li>
<li>s[j] = &lsquo;c&rsquo;，frequency[s[j] - &lsquo;a&rsquo;] = frequency[2] = 1，maxNum = 1(b/c)，minNum = 1(b/c)，差值为0，result += 0，此时result = 4。</li>
<li>i = 2,j = 4。</li>
<li>当前子字符串为&quot;bcb&quot;。</li>
<li>s[j] = &lsquo;b&rsquo;，frequency[s[j] - &lsquo;a&rsquo;] = frequency[1] = 2，maxNum = 2(b)，minNum = 1(c)，差值为0，result += 1，此时result = 5。</li>
<li>i = 3,j = 3。</li>
<li>初始化frequency数组，同时当前子字符串为&quot;c&quot;。</li>
<li>s[j] = &lsquo;c&rsquo;，frequency[s[j] - &lsquo;a&rsquo;] = frequency[2] = 1，maxNum = 1(c)，minNum = 1(c)，差值为0，result += 1，此时result = 5。</li>
<li>i = 3,j = 4。</li>
<li>当前子字符串为&quot;cb&quot;。</li>
<li>s[j] = &lsquo;b&rsquo;，frequency[s[j] - &lsquo;a&rsquo;] = frequency[1] = 1，maxNum = 1(b/c)，minNum = 1(b/c)，差值为0，result += 1，此时result = 5。</li>
<li>i = 4,j = 4。</li>
<li>初始化frequency数组，同时当前子字符串为&quot;b&quot;。</li>
<li>s[j] = &lsquo;b&rsquo;，frequency[s[j] - &lsquo;a&rsquo;] = frequency[1] = 1，maxNum = 1(b)，minNum = 1(b)，差值为0，result += 1，此时result = 5。</li>
<li>遍历结束，result最终为5。</li>
</ul>
<h3 id="代码实现">代码实现</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">beautySum</span><span style="color:#f92672">(</span>String s<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">int</span> result <span style="color:#f92672">=</span> 0<span style="color:#f92672">,</span>length <span style="color:#f92672">=</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">();</span>
        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> length<span style="color:#f92672">;</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
            <span style="color:#75715e">// 记录s[i]-s[j]组成的字符串中各字符出现的频率
</span><span style="color:#75715e"></span>            <span style="color:#66d9ef">int</span><span style="color:#f92672">[]</span> frequency <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#66d9ef">int</span><span style="color:#f92672">[</span>26<span style="color:#f92672">];</span>
            <span style="color:#75715e">// 记录s[i]-s[j]组成的字符串中字符出现最多的频率
</span><span style="color:#75715e"></span>            <span style="color:#66d9ef">int</span> maxNum <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span>
            <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> j <span style="color:#f92672">=</span> i<span style="color:#f92672">;</span> j <span style="color:#f92672">&lt;</span> length<span style="color:#f92672">;</span> j<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
                <span style="color:#66d9ef">char</span> c <span style="color:#f92672">=</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">charAt</span><span style="color:#f92672">(</span>j<span style="color:#f92672">);</span>
                <span style="color:#75715e">// 更新频率
</span><span style="color:#75715e"></span>                frequency<span style="color:#f92672">[</span>c <span style="color:#f92672">-</span> <span style="color:#e6db74">&#39;a&#39;</span><span style="color:#f92672">]++;</span>
                <span style="color:#75715e">// 遍历过程中直接选出当前最大的频率
</span><span style="color:#75715e"></span>                maxNum <span style="color:#f92672">=</span> Math<span style="color:#f92672">.</span><span style="color:#a6e22e">max</span><span style="color:#f92672">(</span>maxNum<span style="color:#f92672">,</span>frequency<span style="color:#f92672">[</span>c <span style="color:#f92672">-</span> <span style="color:#e6db74">&#39;a&#39;</span><span style="color:#f92672">]);</span>
                <span style="color:#75715e">// 遍历频率数组，找出最小的频率
</span><span style="color:#75715e"></span>                <span style="color:#66d9ef">int</span> minNum <span style="color:#f92672">=</span> length<span style="color:#f92672">;</span>
                <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> k <span style="color:#f92672">:</span> frequency<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
                    <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>k <span style="color:#f92672">&gt;</span> 0<span style="color:#f92672">){</span>
                        minNum <span style="color:#f92672">=</span> Math<span style="color:#f92672">.</span><span style="color:#a6e22e">min</span><span style="color:#f92672">(</span>minNum<span style="color:#f92672">,</span>k<span style="color:#f92672">);</span>
                    <span style="color:#f92672">}</span>
                <span style="color:#f92672">}</span>
                <span style="color:#75715e">// 差值累加
</span><span style="color:#75715e"></span>                result <span style="color:#f92672">+=</span> maxNum <span style="color:#f92672">-</span> minNum<span style="color:#f92672">;</span>
            <span style="color:#f92672">}</span>
        <span style="color:#f92672">}</span>
        <span style="color:#66d9ef">return</span> result<span style="color:#f92672">;</span>
    <span style="color:#f92672">}</span>

    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">test</span><span style="color:#f92672">(){</span>
        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>beautySum<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;abaacc&#34;</span><span style="color:#f92672">));</span>
        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>beautySum<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;aabcb&#34;</span><span style="color:#f92672">));</span>
        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>beautySum<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;aabcbaa&#34;</span><span style="color:#f92672">));</span>
    <span style="color:#f92672">}</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>LeetCode算法手记：1764.通过连接另一个数组的子数组得到一个数组</title>
            <link>https://Huang-zh.github.io/posts/leetcode1764/</link>
            <pubDate>Sat, 16 Sep 2023 20:35:38 +0800</pubDate>
            
            <guid>https://Huang-zh.github.io/posts/leetcode1764/</guid>
            <description>给你一个长度为 n 的二维整数数组 groups，同时给你一个整数数组 nums 。 你是否可以从 nums 中选出 n 个不相交的子数组，使得第 i 个子数组与 groups[i] （下标从 0 开</description>
            <content type="html"><![CDATA[<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">给你一个长度为 n 的二维整数数组 groups，同时给你一个整数数组 nums 。
你是否可以从 nums 中选出 n 个不相交的子数组，使得第 i 个子数组与 groups[i] （下标从 0 开始）完全相同，且如果 i &gt; 0 ，那么第 (i-1) 个子数组在 nums 中出现的位置在第 i 个子数组前面。（也就是说，这些子数组在 nums 中出现的顺序需要与 groups 顺序相同）
如果你可以找出这样的 n 个子数组，请你返回 true，否则返回 false。
如果不存在下标为 k 的元素 nums[k] 属于不止一个子数组，就称这些子数组是不相交的。子数组指的是原数组中连续元素组成的一个序列。

示例 1：
输入：groups = [[1,-1,-1],[3,-2,0]], nums = [1,-1,0,1,-1,-1,3,-2,0]
输出：true
解释：你可以分别在 nums 中选出第 0 个子数组 [1,-1,-1] 和第 1 个子数组 [3,-2,0] 。
这两个子数组是不相交的，因为它们没有任何共同的元素。

示例 2：
输入：groups = [[10,-2],[1,2,3,4]], nums = [1,2,3,4,10,-2]
输出：false
解释：选择子数组 [1,2,3,4] 和 [10,-2] 是不正确的，因为它们出现的顺序与 groups 中顺序不同。[10,-2] 必须出现在 [1,2,3,4] 之前。

示例 3：
输入：groups = [[1,2,3],[3,4]], nums = [7,7,1,2,3,4,7,7]
输出：false
解释：选择子数组 [1,2,3] 和 [3,4,] 是不正确的，因为它们不是不相交子数组。它们有一个共同的元素 nums[4] （下标从 0 开始）。

提示：
groups.length == n
1 &lt;= n &lt;= 103
1 &lt;= groups[i].length, sum(groups[i].length) &lt;= 103
1 &lt;= nums.length &lt;= 103
-107 &lt;= groups[i][j], nums[k] &lt;= 107
</code></pre></div><h3 id="思路">思路</h3>
<p>定义双指针i和j，分别指向groups[i]和nums[j]，同时注意双指针不可超出其指向的数组边界。
在i和j循环的过程中，有k指针指向groups[i]中第k个元素groups[i][k]，如果nums[j+k]和groups[i][k]不相等，则i原地停留，j往后递进，直到找到和groups[i][k]相等的元素为止。</p>
<p>同时需要注意边界：由于要生成n个不相交的子数组，即保证每一组groups[i]都是子数组，对于j指针而言，如果j+groups[i].length超出了nums[j]的边界，则说明groups[i]以及之后的数组都无法作为nums[j]的子数组。</p>
<p>若groups[i]可以作为子数组，则i往后递进，同时为了确保每一个groups[i]不相交，j要越过当前已匹配的元素，即往后移动的长度为groups[i].length。</p>
<h4 id="思路递推">思路递推</h4>
<p>以实例一：groups = [[1,-1,-1],[3,-2,0]], nums = [1,-1,0,1,-1,-1,3,-2,0]为例</p>
<ul>
<li>初始状态，i = 0,j = 0，nums.length = 9</li>
<li>groups[i] = [1,-1,-1]，nums[j] = 1</li>
<li>j(0)+group[i].length(3) &lt;= nums.length(9)，遍历继续</li>
<li>遍历groups[i]，发现groups[i][2] = -1,nums[j+2] = nums[2] = 0，二者不相等，j往后递进+1.</li>
<li>i = 0,j = 1</li>
<li>groups[i] = [1,-1,-1]，nums[j] = -1</li>
<li>j(1)+group[i].length(3) &lt; nums.length(9)，遍历继续</li>
<li>遍历groups[i]，发现groups[i][0] = 1,nums[j+0] = nums[1] = -1，二者不相等，j往后递进+1.</li>
<li>i = 0,j = 2</li>
<li>groups[i] = [1,-1,-1]，nums[j] = 0</li>
<li>j(2)+group[i].length(3) &lt; nums.length(9)，遍历继续</li>
<li>遍历groups[i]，发现groups[i][0] = 1,nums[j+0] = nums[2] = 0，二者不相等，j往后递进+1.</li>
<li>i = 0,j = 3</li>
<li>groups[i] = [1,-1,-1]，nums[j] = 1</li>
<li>j(3)+group[i].length(3) &lt; nums.length(9)，遍历继续</li>
<li>遍历groups[i]，发现:
<ul>
<li>groups[i][0] = nums[j+0] = nums[3] = 1</li>
<li>groups[i][1] = nums[j+1] = nums[4] = -1</li>
<li>groups[i][2] = nums[j+2] = nums[5] = -1</li>
<li>因此，groups[i]可以作为nums的一个不相交子序列，i往后递进+1，同时为了保证子数组不相交，j往后递进groups[i].length的长度</li>
</ul>
</li>
<li>i = 1,j = 6</li>
<li>groups[i] = [3，-2,0]，nums[j] = 3</li>
<li>j(6)+group[i].length(3) &lt;= nums.length(9)，遍历继续</li>
<li>遍历groups[i]，发现:
<ul>
<li>groups[i][0] = nums[j+0] = nums[6] = 3</li>
<li>groups[i][1] = nums[j+1] = nums[7] = -2</li>
<li>groups[i][2] = nums[j+2] = nums[8] = 0</li>
<li>因此，groups[i]可以作为nums的一个不相交子序列，i往后递进+1，同时为了保证子数组不相交，j往后递进groups[i].length的长度</li>
</ul>
</li>
<li>i = 3，j = 9，二者达到各自的数组边界，结束循环</li>
<li>判断i是否和groups.length相等，只有i到达groups末尾，才能证明groups[0]&hellip;groups[i-1]均可以构成不相交子数组。</li>
</ul>
<h3 id="代码实现">代码实现</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">boolean</span> <span style="color:#a6e22e">canChoose</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span><span style="color:#f92672">[][]</span> groups<span style="color:#f92672">,</span> <span style="color:#66d9ef">int</span><span style="color:#f92672">[]</span> nums<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">int</span> groupLength <span style="color:#f92672">=</span> groups<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">,</span>numLength <span style="color:#f92672">=</span> nums<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">;</span>
        <span style="color:#75715e">// 双指针，分别指向groups[i]和nums[j]
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 0<span style="color:#f92672">,</span>j <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span>
        <span style="color:#66d9ef">while</span> <span style="color:#f92672">(</span>i <span style="color:#f92672">&lt;</span> groupLength <span style="color:#f92672">&amp;&amp;</span> j <span style="color:#f92672">&lt;</span> numLength<span style="color:#f92672">){</span>
            <span style="color:#75715e">// 判断当前groups[i]是否为nums的连续子序列
</span><span style="color:#75715e"></span>            <span style="color:#66d9ef">int</span> currentLength <span style="color:#f92672">=</span> groups<span style="color:#f92672">[</span>i<span style="color:#f92672">].</span><span style="color:#a6e22e">length</span><span style="color:#f92672">;</span>
            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>j <span style="color:#f92672">+</span> currentLength <span style="color:#f92672">&gt;</span> numLength<span style="color:#f92672">)</span>
                <span style="color:#75715e">// 如果当前j加上group[i]的长度若超过nums的总长度，则说明无法生成groupLength个连续子数组
</span><span style="color:#75715e"></span>                <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">;</span>
            <span style="color:#66d9ef">boolean</span> isSub <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span><span style="color:#f92672">;</span>
            <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> k <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span> k <span style="color:#f92672">&lt;</span> currentLength<span style="color:#f92672">;</span> k<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
                <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>groups<span style="color:#f92672">[</span>i<span style="color:#f92672">][</span>k<span style="color:#f92672">]</span> <span style="color:#f92672">!=</span> nums<span style="color:#f92672">[</span>j<span style="color:#f92672">+</span>k<span style="color:#f92672">]){</span>
                    <span style="color:#75715e">// 如果当前group[i]的第k个元素和nums[j+k]的元素不相等，则让j指针往后移动，直到匹配到相等的元素为止
</span><span style="color:#75715e"></span>                    isSub <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">;</span>
                    <span style="color:#66d9ef">break</span><span style="color:#f92672">;</span>
                <span style="color:#f92672">}</span>
            <span style="color:#f92672">}</span>
            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>isSub<span style="color:#f92672">){</span>
                <span style="color:#75715e">// group[i]已完成匹配，转向下一个group子数组
</span><span style="color:#75715e"></span>                i<span style="color:#f92672">++;</span>
                <span style="color:#75715e">// 为了保证不相交，j往后递进group[i]的长度，跳过nums中已匹配的元素
</span><span style="color:#75715e"></span>                j <span style="color:#f92672">+=</span> currentLength<span style="color:#f92672">;</span>
            <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
                <span style="color:#75715e">// 说明当前groups[i]不匹配，i原地停留，j指针往后移动，直到匹配到和group[i]中元素相等的元素为止
</span><span style="color:#75715e"></span>                j<span style="color:#f92672">++;</span>
            <span style="color:#f92672">}</span>
        <span style="color:#f92672">}</span>
        <span style="color:#75715e">// 如果i指向groups末尾，则说明所有的groups[i]均能成为nums的不相交的子数组
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">return</span> i <span style="color:#f92672">==</span> groupLength<span style="color:#f92672">;</span>
    <span style="color:#f92672">}</span>

    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">test</span><span style="color:#f92672">(){</span>
        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>canChoose<span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> <span style="color:#66d9ef">int</span><span style="color:#f92672">[][]{{</span>1<span style="color:#f92672">,-</span>1<span style="color:#f92672">,-</span>1<span style="color:#f92672">},{</span>3<span style="color:#f92672">,-</span>2<span style="color:#f92672">,</span>0<span style="color:#f92672">}},</span><span style="color:#66d9ef">new</span> <span style="color:#66d9ef">int</span><span style="color:#f92672">[]{</span>1<span style="color:#f92672">,-</span>1<span style="color:#f92672">,</span>0<span style="color:#f92672">,</span>1<span style="color:#f92672">,-</span>1<span style="color:#f92672">,-</span>1<span style="color:#f92672">,</span>3<span style="color:#f92672">,-</span>2<span style="color:#f92672">,</span>0<span style="color:#f92672">}));</span>
        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>canChoose<span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> <span style="color:#66d9ef">int</span><span style="color:#f92672">[][]{{</span>10<span style="color:#f92672">,-</span>2<span style="color:#f92672">},{</span>1<span style="color:#f92672">,</span>2<span style="color:#f92672">,</span>3<span style="color:#f92672">,</span>4<span style="color:#f92672">}},</span><span style="color:#66d9ef">new</span> <span style="color:#66d9ef">int</span><span style="color:#f92672">[]{</span>1<span style="color:#f92672">,</span>2<span style="color:#f92672">,</span>3<span style="color:#f92672">,</span>4<span style="color:#f92672">,</span>10<span style="color:#f92672">,-</span>2<span style="color:#f92672">}));</span>
    <span style="color:#f92672">}</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>LeetCode算法手记：807.情感丰富的文字</title>
            <link>https://Huang-zh.github.io/posts/leetcode807/</link>
            <pubDate>Mon, 11 Sep 2023 22:12:46 +0800</pubDate>
            
            <guid>https://Huang-zh.github.io/posts/leetcode807/</guid>
            <description>有时候人们会用重复写一些字母来表示额外的感受，比如 “hello” -&amp;gt; “heeellooo”, “hi” -&amp;gt; “hiii”。我们将相邻字母都相同的一串</description>
            <content type="html"><![CDATA[<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">有时候人们会用重复写一些字母来表示额外的感受，比如 “hello” -&gt; “heeellooo”, “hi” -&gt; “hiii”。我们将相邻字母都相同的一串字符定义为相同字母组，例如：“h”, “eee”, “ll”, “ooo”

对于一个给定的字符串 S ，如果另一个单词能够通过将一些字母组扩张从而使其和 S 相同，我们将这个单词定义为可扩张的（stretchy）。扩张操作定义如下：选择一个字母组（包含字母 c ），然后往其中添加相同的字母 c 使其长度达到 3 或以上

例如，以 “hello” 为例，我们可以对字母组 “o” 扩张得到 “hellooo”，但是无法以同样的方法得到 “helloo” 因为字母组 “oo” 长度小于 3。此外，我们可以进行另一种扩张 “ll” -&gt; “lllll” 以获得 “helllllooo”。如果 S = “helllllooo”，那么查询词 “hello” 是可扩张的，因为可以对它执行这两种扩张操作使得 query = “hello” -&gt; “hellooo” -&gt; “helllllooo” = 输入一组查询单词，输出其中可扩张的单词数量

示例

输入
S = “heeellooo”
words = [“hello”, “hi”, “helo”]
输出：
解释
我们能通过扩张 “hello” 的 “e” 和 “o” 来得到 “heeellooo”
我们不能通过扩张 “helo” 来得到 “heeellooo” 因为 “ll” 的长度小于 3 

提示
0 &lt;= len(S) &lt;= 100
0 &lt;= len(words) &lt;= 100
0 &lt;= len(words[i]) &lt;= 100
S 和所有在 words 中的单词都只由小写字母组成

</code></pre></div><h3 id="思路">思路</h3>
<p>如果s能由word扩展而来，则遵守以下的判断原则：</p>
<ol>
<li>
<p>word中不同字符的相对顺序，和s中这些字符的相对顺序保持一致，也就是说，word中出现的字符必然出现在s中。比如hello可以扩展成heeellooo，因为h、e、l、o四个字符的相对顺序在两个字符串中保持一致。</p>
</li>
<li>
<p>word中相同同字符连续出现的次数repeatWc，必然要小于或等于该字符在s中连续出现的次数repeatSc，同时，repeatSc至少为3。比如helo不可以扩展成heeellooo，虽然h、e、l、o四个字符的相对顺序在两个字符串中保持一致，但此时l字符在word中的repeatWc为1，而l字符在s中的repeatSc为2，虽然满足了repeatWc&lt;=repeatSc的原则，但是repeatSc小于3，所以无法扩展成s字符。</p>
</li>
</ol>
<p>维护双指针i和j，在循环中分别遍历s中的每一个字符s[i]和word中的每一个字符w[j]，并进行如下判断：</p>
<ul>
<li>确保每一次循环中，s[i]和w[j]都相等，原因是能够扩展情况下，w[i]对应的不同字符相对顺序一定和s中这些字符的相对顺序保持一致。如果不相等，表明起码有一个字符在二者的相对顺序中不一致，不能够进行扩展。</li>
<li>s[i]和w[j]相等的情况下，通过指针不断向后统计当前s[i]和w[j]连续重复出现的个数repeatSc和repeatWc，判断repeatSc和repeatWc的大小。</li>
<li>当任意一个指针到达字符串末尾，在循环结束后判断双指针是否均完成对各自字符串中每个字符的搜寻，只有双方都到达末尾，才能证明之前的字符都经过循环中的判断，能够完成扩展转换。</li>
</ul>
<h4 id="思路递推">思路递推</h4>
<p>以题目中的s=&ldquo;heeellooo&rdquo;,words = [“hello”, “hi”, “helo”]为例，遍历words中的每一个字符串word，分别判断是否能够完成扩展：</p>
<ul>
<li>
<p>s=&ldquo;heeellooo&rdquo;,words=&ldquo;hello&rdquo;</p>
<ul>
<li>初始i = 0,j = 0，开始循环。</li>
<li>s[i] = &lsquo;h&rsquo;，w[j] = &lsquo;h&rsquo;，两个字符相等。</li>
<li>找到各自字符连续重复出现的个数，此时repeatSc = 1，repeatWc = 1，双指针分别向后移动当前重复的次数，由于二者相等，不违背规则，进入下一次循环。</li>
<li>i = 1，j = 1，判断第二个字符。</li>
<li>s[i] = &lsquo;e&rsquo;，w[j] = &lsquo;e&rsquo;，两个字符相等。</li>
<li>找到各自字符连续重复出现的个数，此时repeatSc = 3，repeatWc = 1，双指针分别向后移动当前重复的次数，根据规则：repeatSc大于repeatWc并且repeatSc至少为3，不违背规则，进入下一次循环。</li>
<li>i = 4，j = 2，判断第三个字符。</li>
<li>s[i] = &lsquo;l&rsquo;，w[j] = &lsquo;l&rsquo;，两个字符相等。</li>
<li>找到各自字符连续重复出现的个数，此时repeatSc = 2，repeatWc = 2，双指针分别向后移动当前重复的次数，由于二者相等，不违背规则，进入下一次循环。</li>
<li>i = 6，j = 4，判断第四个字符。</li>
<li>s[i] = &lsquo;o&rsquo;，w[j] = &lsquo;o&rsquo;，两个字符相等。</li>
<li>找到各自字符连续重复出现的个数，此时repeatSc = 3，repeatWc = 1，双指针分别向后移动当前重复的次数，根据规则：repeatSc大于repeatWc并且repeatSc至少为3，不违背规则，进入下一次循环。</li>
<li>此时i到达s的最末尾，退出循环。</li>
<li>此时i和j均到达各自字符串的最末尾，所以可以完成扩展转换。</li>
</ul>
</li>
<li>
<p>s=&ldquo;heeellooo&rdquo;,words=&ldquo;hi&rdquo;</p>
<ul>
<li>初始i = 0,j = 0，开始循环。</li>
<li>s[i] = &lsquo;h&rsquo;，w[j] = &lsquo;h&rsquo;，两个字符相等。</li>
<li>找到各自字符连续重复出现的个数，此时repeatSc = 1，repeatWc = 1，双指针分别向后移动当前重复的次数，由于二者相等，不违背规则，进入下一次循环。</li>
<li>i = 1，j = 1，判断第二个字符。</li>
<li>s[i] = &lsquo;e&rsquo;，w[j] = &lsquo;i&rsquo;，两个字符不相等，不满足相对顺序，不可以完成转换。</li>
</ul>
</li>
<li>
<p>s=&ldquo;heeellooo&rdquo;,words=&ldquo;helo&rdquo;</p>
<ul>
<li>初始i = 0,j = 0，开始循环。</li>
<li>s[i] = &lsquo;h&rsquo;，w[j] = &lsquo;h&rsquo;，两个字符相等。</li>
<li>找到各自字符连续重复出现的个数，此时repeatSc = 1，repeatWc = 1，双指针分别向后移动当前重复的次数，由于二者相等，不违背规则，进入下一次循环。</li>
<li>i = 1，j = 1，判断第二个字符。</li>
<li>s[i] = &lsquo;e&rsquo;，w[j] = &lsquo;e&rsquo;，两个字符相等。</li>
<li>找到各自字符连续重复出现的个数，此时repeatSc = 3，repeatWc = 1，双指针分别向后移动当前重复的次数，根据规则：repeatSc大于repeatWc并且repeatSc至少为3，不违背规则，进入下一次循环。</li>
<li>i = 4，j = 2，判断第三个字符。</li>
<li>s[i] = &lsquo;l&rsquo;，w[j] = &lsquo;l&rsquo;，两个字符相等。</li>
<li>找到各自字符连续重复出现的个数，此时repeatSc = 2，repeatWc = 1，双指针分别向后移动当前重复的次数，由于二者相等，根据规则：repeatSc大于repeatWc并且repeatSc至少为3，此时repeatSc = 2，并没有达到3，不满足规则，无法完成扩展转换。</li>
</ul>
</li>
</ul>
<h3 id="代码实现">代码实现</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">expressiveWords</span><span style="color:#f92672">(</span>String s<span style="color:#f92672">,</span> String<span style="color:#f92672">[]</span> words<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">int</span> result <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span>
        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span>String word <span style="color:#f92672">:</span> words<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>canExpand<span style="color:#f92672">(</span>s<span style="color:#f92672">,</span>word<span style="color:#f92672">))</span>
                result<span style="color:#f92672">++;</span>
        <span style="color:#f92672">}</span>
        <span style="color:#66d9ef">return</span> result<span style="color:#f92672">;</span>
    <span style="color:#f92672">}</span>

    <span style="color:#75715e">/**
</span><span style="color:#75715e">     * @Author huang.zh
</span><span style="color:#75715e">     * @Description 判断字符串s是否能由word扩展而来
</span><span style="color:#75715e">     * @Date 9:59 PM 2023/9/11
</span><span style="color:#75715e">     * @Param [s, word]
</span><span style="color:#75715e">     * @return
</span><span style="color:#75715e">     **/</span>
    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">boolean</span> <span style="color:#a6e22e">canExpand</span><span style="color:#f92672">(</span>String s<span style="color:#f92672">,</span>String word<span style="color:#f92672">){</span>
        <span style="color:#75715e">//定义双指针，分别遍历s中的每个字符s[i]和word中的每个字符w[j]
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 0<span style="color:#f92672">,</span>j <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span>
        <span style="color:#66d9ef">int</span> sLength <span style="color:#f92672">=</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">(),</span>wLength <span style="color:#f92672">=</span> word<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">();</span>

        <span style="color:#66d9ef">while</span> <span style="color:#f92672">(</span>i <span style="color:#f92672">&lt;</span> sLength <span style="color:#f92672">&amp;&amp;</span> j <span style="color:#f92672">&lt;</span> wLength<span style="color:#f92672">){</span>
            <span style="color:#75715e">// 如果s能由word扩展而来，则遵守以下的判断原则：
</span><span style="color:#75715e"></span>            <span style="color:#75715e">// 1. word中不同字符的相对顺序，和s中这些字符的相对顺序保持一致，也就是说，word中出现的字符必然出现在s中。
</span><span style="color:#75715e"></span>            <span style="color:#75715e">// 2. word中相同同字符连续出现的次数repeatWc，必然要小于或等于该字符在s中连续出现的次数repeatSc，同时，repeatSc至少为3
</span><span style="color:#75715e"></span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>s<span style="color:#f92672">.</span><span style="color:#a6e22e">charAt</span><span style="color:#f92672">(</span>i<span style="color:#f92672">)</span> <span style="color:#f92672">!=</span> word<span style="color:#f92672">.</span><span style="color:#a6e22e">charAt</span><span style="color:#f92672">(</span>j<span style="color:#f92672">))</span>
                <span style="color:#75715e">// word中出现的字符必然出现在s中，从首字母开始，每一次循环都需要保证s[i]和w[j]相等
</span><span style="color:#75715e"></span>                <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">;</span>
            <span style="color:#75715e">// 此时两个字符相等，找出重复次数
</span><span style="color:#75715e"></span>            <span style="color:#66d9ef">int</span> repeatSc <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span>
            <span style="color:#66d9ef">char</span> repeatS <span style="color:#f92672">=</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">charAt</span><span style="color:#f92672">(</span>i<span style="color:#f92672">);</span>
            <span style="color:#66d9ef">while</span> <span style="color:#f92672">(</span>i <span style="color:#f92672">&lt;</span> sLength <span style="color:#f92672">&amp;&amp;</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">charAt</span><span style="color:#f92672">(</span>i<span style="color:#f92672">)</span> <span style="color:#f92672">==</span> repeatS<span style="color:#f92672">){</span>
                <span style="color:#75715e">//找出字符s[i]连续出现的个数
</span><span style="color:#75715e"></span>                repeatSc<span style="color:#f92672">++;</span>
                i<span style="color:#f92672">++;</span>
            <span style="color:#f92672">}</span>
            <span style="color:#66d9ef">int</span> repeatWc <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span>
            <span style="color:#66d9ef">char</span> repeatW <span style="color:#f92672">=</span> word<span style="color:#f92672">.</span><span style="color:#a6e22e">charAt</span><span style="color:#f92672">(</span>j<span style="color:#f92672">);</span>
            <span style="color:#66d9ef">while</span> <span style="color:#f92672">(</span>j <span style="color:#f92672">&lt;</span> wLength <span style="color:#f92672">&amp;&amp;</span> word<span style="color:#f92672">.</span><span style="color:#a6e22e">charAt</span><span style="color:#f92672">(</span>j<span style="color:#f92672">)</span> <span style="color:#f92672">==</span> repeatW<span style="color:#f92672">){</span>
                <span style="color:#75715e">//找出字符w[j]连续出现的个数
</span><span style="color:#75715e"></span>                repeatWc<span style="color:#f92672">++;</span>
                j<span style="color:#f92672">++;</span>
            <span style="color:#f92672">}</span>
            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>repeatSc <span style="color:#f92672">&lt;</span> repeatWc <span style="color:#f92672">||</span> <span style="color:#f92672">(</span>repeatSc <span style="color:#f92672">!=</span> repeatWc <span style="color:#f92672">&amp;&amp;</span> repeatSc <span style="color:#f92672">&lt;</span> 3<span style="color:#f92672">))</span>
                <span style="color:#75715e">//word中相同同字符连续出现的次数repeatWc，必然要小于或等于该字符在s中连续出现的次数repeatSc，同时，repeatSc至少为3
</span><span style="color:#75715e"></span>                <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">;</span>
        <span style="color:#f92672">}</span>
        <span style="color:#75715e">// 双指针各自走到尽头，代表每一个字符都完成判断
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">return</span> i <span style="color:#f92672">==</span> sLength <span style="color:#f92672">&amp;&amp;</span> j <span style="color:#f92672">==</span> wLength<span style="color:#f92672">;</span>
    <span style="color:#f92672">}</span>

    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">test</span><span style="color:#f92672">(){</span>
        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>expressiveWords<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;heeellooo&#34;</span><span style="color:#f92672">,</span><span style="color:#66d9ef">new</span> String<span style="color:#f92672">[]{</span><span style="color:#e6db74">&#34;hello&#34;</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#34;hi&#34;</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#34;helo&#34;</span><span style="color:#f92672">}));</span>
    <span style="color:#f92672">}</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>LeetCode算法手记：792.匹配子序列的单词数</title>
            <link>https://Huang-zh.github.io/posts/leetcode792/</link>
            <pubDate>Sat, 09 Sep 2023 21:02:25 +0800</pubDate>
            
            <guid>https://Huang-zh.github.io/posts/leetcode792/</guid>
            <description>给定字符串 s 和字符串数组 words, 返回 words[i] 中是 s 的子序列的单词个数。 字符串的子序列是从原始字符串中生成的新字符串，可以从中删去一些字符(可以是 none</description>
            <content type="html"><![CDATA[<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">给定字符串 s 和字符串数组 words, 返回 words[i] 中是 s 的子序列的单词个数。

字符串的子序列是从原始字符串中生成的新字符串，可以从中删去一些字符(可以是 none)，而不改变其余字符的相对顺序。

例如， “ace” 是 “abcde” 的子序列。

示例 1：
输入: s = “abcde”, words = [“a”,“bb”,“acd”,“ace”]
输出: 3
解释: 有三个是 s 的子序列的单词: “a”, “acd”, “ace”。

示例 2：
输入: s = “dsahjpjauf”, words = [“ahjpjau”,“ja”,“ahbwzgqnuk”,“tnmlanowax”]
输出: 2

提示：
1 &lt;= s.length &lt;= 5 * 104
1 &lt;= words.length &lt;= 5000
1 &lt;= words[i].length &lt;= 50
words[i]和 s 都只由小写字母组成。
</code></pre></div><h3 id="思路">思路</h3>
<p>对于字符串s和字符串t，若s为t的子序列，则需要满足以下几点：</p>
<ul>
<li>s中的所有字符的相对顺序，必须和这些字符在t中出现的相对顺序保持一致，例如s为ace，t为abcde，则s为t的子序列，此时a、c、e三个字符在两个字符串中出现的相对顺序保持一致，t可以通过删除b和d两个字符来得到s。</li>
<li>若s由一个或多个相同字符组成，那么该字符在s中出现的次数必然小于等于t中该字符出现的次数，例如字符串a、aa、aaa均为字符串aabade的子序列，但aaaa不是字符串aabade的子序列。</li>
</ul>
<p>那么，维护一个数组，记录下原字符串t中每一个字符t[i]出现的位置i，然后对于要判断子序列的样本s，遍历s的每个字符，判断以下几点：</p>
<ul>
<li>如果对于当前字符s[i]，数组中找不到对应的位置记录，则说明s[i]字符在t中不曾出现，不满足子序列要求。</li>
<li>如果能够找到对应的位置记录，则说明s[i]字符在t中有出现，需要判断s[i]字符在t中出现的个数，如果超过t中出现该字符的个数，不满足子序列要求。</li>
<li>如果对于字符串s，上面两点均满足子序列的要求，则说明当前字符串s在[0,i]位置的字符构成的字符串已满足子序列要求，指针向后遍历下一个s[i+1]字符，同时，由于相对顺序保持一致，将j向后移动，s[i+1]将和t[i+1]进行判断。</li>
</ul>
<h3 id="代码实现">代码实现</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"> <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">numMatchingSubseq</span><span style="color:#f92672">(</span>String s<span style="color:#f92672">,</span> String<span style="color:#f92672">[]</span> words<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">return</span> numMatchingSubseqByLeftBondBinarySearch<span style="color:#f92672">(</span>s<span style="color:#f92672">,</span> words<span style="color:#f92672">);</span>
    <span style="color:#f92672">}</span>

    <span style="color:#75715e">/**
</span><span style="color:#75715e">     * @Author huang.zh
</span><span style="color:#75715e">     * @Description //二分查找解法，判断子序列个数
</span><span style="color:#75715e">     * @Date 10:21 PM 2023/9/9
</span><span style="color:#75715e">     * @Param [s, words]
</span><span style="color:#75715e">     * @return
</span><span style="color:#75715e">     **/</span>
    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">numMatchingSubseqByLeftBondBinarySearch</span><span style="color:#f92672">(</span>String s<span style="color:#f92672">,</span> String<span style="color:#f92672">[]</span> words<span style="color:#f92672">){</span>
        ArrayList<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;[]</span> arrays <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ArrayList<span style="color:#f92672">[</span>26<span style="color:#f92672">];</span>
        <span style="color:#66d9ef">int</span> sLength <span style="color:#f92672">=</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">();</span>
        <span style="color:#75715e">//对原样本进行预处理，记录s中每一个字符出现的下标位置
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> sLength<span style="color:#f92672">;</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
            <span style="color:#66d9ef">int</span> index <span style="color:#f92672">=</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">charAt</span><span style="color:#f92672">(</span>i<span style="color:#f92672">)</span> <span style="color:#f92672">-</span> <span style="color:#e6db74">&#39;a&#39;</span><span style="color:#f92672">;</span>
            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>arrays<span style="color:#f92672">[</span>index<span style="color:#f92672">]</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span>
                arrays<span style="color:#f92672">[</span>index<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ArrayList<span style="color:#f92672">&lt;&gt;();</span>
            <span style="color:#75715e">//记录当前字符s[i]对应的位置i
</span><span style="color:#75715e"></span>            arrays<span style="color:#f92672">[</span>index<span style="color:#f92672">].</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>i<span style="color:#f92672">);</span>
        <span style="color:#f92672">}</span>
        <span style="color:#66d9ef">int</span> result <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span>
        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span>String word <span style="color:#f92672">:</span> words<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>isSubSequence<span style="color:#f92672">(</span>word<span style="color:#f92672">,</span>arrays<span style="color:#f92672">))</span>
                result<span style="color:#f92672">++;</span>
        <span style="color:#f92672">}</span>
        <span style="color:#66d9ef">return</span> result<span style="color:#f92672">;</span>
    <span style="color:#f92672">}</span>

    <span style="color:#75715e">/**
</span><span style="color:#75715e">     * @Author huang.zh
</span><span style="color:#75715e">     * @Description 判断s是否为子序列
</span><span style="color:#75715e">     * @Date 10:31 PM 2023/9/9
</span><span style="color:#75715e">     * @Param [s, arrays]
</span><span style="color:#75715e">     * @return
</span><span style="color:#75715e">     **/</span>
    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">boolean</span> <span style="color:#a6e22e">isSubSequence</span><span style="color:#f92672">(</span>String s<span style="color:#f92672">,</span>ArrayList<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;[]</span> arrays<span style="color:#f92672">){</span>
        <span style="color:#75715e">//定义指针j，在搜寻过程中每找到一个字符就向后移动一位，确保s中每个字符的相对顺序必须和原字符串中一致，才能算作子序列
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">int</span> j <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span>
        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">();</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
            <span style="color:#66d9ef">int</span> index <span style="color:#f92672">=</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">charAt</span><span style="color:#f92672">(</span>i<span style="color:#f92672">)</span> <span style="color:#f92672">-</span> <span style="color:#e6db74">&#39;a&#39;</span><span style="color:#f92672">;</span>
            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>arrays<span style="color:#f92672">[</span>index<span style="color:#f92672">]</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span>
                <span style="color:#75715e">//当前字符在原字符串中没出现过，肯定不是子序列
</span><span style="color:#75715e"></span>                <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">;</span>
            <span style="color:#75715e">//搜寻当前字符在原字符串中第一次出现的位置
</span><span style="color:#75715e"></span>            <span style="color:#75715e">//由于子序列的相对顺序必须和原字符串一致，所以point一定会落在[0,arrays[index].size())内
</span><span style="color:#75715e"></span>            <span style="color:#66d9ef">int</span> point <span style="color:#f92672">=</span> leftBondBinarySearch<span style="color:#f92672">(</span>arrays<span style="color:#f92672">[</span>index<span style="color:#f92672">],</span> j<span style="color:#f92672">);</span>
            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>point <span style="color:#f92672">==</span> arrays<span style="color:#f92672">[</span>index<span style="color:#f92672">].</span><span style="color:#a6e22e">size</span><span style="color:#f92672">())</span>
                <span style="color:#75715e">//防止重复字符超出原字符中同字符的长度上限，比如原字符为aa，s为aaa，显然不符合子序列
</span><span style="color:#75715e"></span>                <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">;</span>
            <span style="color:#75715e">//当前字符满足条件，将j指针往后移动，用于下一个字符判断
</span><span style="color:#75715e"></span>            j <span style="color:#f92672">=</span> arrays<span style="color:#f92672">[</span>index<span style="color:#f92672">].</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span>point<span style="color:#f92672">)+</span>1<span style="color:#f92672">;</span>
        <span style="color:#f92672">}</span>
        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span><span style="color:#f92672">;</span>
    <span style="color:#f92672">}</span>

    <span style="color:#75715e">/**
</span><span style="color:#75715e">     * @Author huang.zh
</span><span style="color:#75715e">     * @Description 找到数组中第一个值为target的元素下标
</span><span style="color:#75715e">     * @Date 10:23 PM 2023/9/9
</span><span style="color:#75715e">     * @Param [list, target]
</span><span style="color:#75715e">     * @return
</span><span style="color:#75715e">     **/</span>
    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">leftBondBinarySearch</span><span style="color:#f92672">(</span>ArrayList<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;</span> list<span style="color:#f92672">,</span><span style="color:#66d9ef">int</span> target<span style="color:#f92672">){</span>
        <span style="color:#75715e">//注意high的取值，代表在左闭右开区间[low,high)中去搜寻第一个符合的元素
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">int</span> low <span style="color:#f92672">=</span> 0<span style="color:#f92672">,</span>high <span style="color:#f92672">=</span> list<span style="color:#f92672">.</span><span style="color:#a6e22e">size</span><span style="color:#f92672">();</span>
        <span style="color:#66d9ef">while</span> <span style="color:#f92672">(</span>low <span style="color:#f92672">&lt;</span> high<span style="color:#f92672">){</span>
            <span style="color:#66d9ef">int</span> mid <span style="color:#f92672">=</span> low <span style="color:#f92672">+</span> <span style="color:#f92672">(</span>high <span style="color:#f92672">-</span> low<span style="color:#f92672">)/</span>2<span style="color:#f92672">;</span>
            Integer value <span style="color:#f92672">=</span> list<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span>mid<span style="color:#f92672">);</span>
            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>value <span style="color:#f92672">==</span> target<span style="color:#f92672">){</span>
                <span style="color:#75715e">//命中，但是要向前搜索第一个元素
</span><span style="color:#75715e"></span>                <span style="color:#75715e">//这里high赋值为mid，代表后续将在左闭右开区间[low,mid)即闭区间[low,mid-1]中搜寻
</span><span style="color:#75715e"></span>                high <span style="color:#f92672">=</span> mid<span style="color:#f92672">;</span>
            <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>value <span style="color:#f92672">&gt;</span> target<span style="color:#f92672">){</span>
                high <span style="color:#f92672">=</span> mid<span style="color:#f92672">;</span>
            <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
                low <span style="color:#f92672">=</span> mid<span style="color:#f92672">+</span>1<span style="color:#f92672">;</span>
            <span style="color:#f92672">}</span>
        <span style="color:#f92672">}</span>
        <span style="color:#66d9ef">return</span> low<span style="color:#f92672">;</span>
    <span style="color:#f92672">}</span>

    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">test</span><span style="color:#f92672">(){</span>
        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>numMatchingSubseq<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;abcde&#34;</span><span style="color:#f92672">,</span><span style="color:#66d9ef">new</span> String<span style="color:#f92672">[]{</span><span style="color:#e6db74">&#34;a&#34;</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#34;bb&#34;</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#34;acd&#34;</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#34;ace&#34;</span><span style="color:#f92672">}));</span>
        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>numMatchingSubseq<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;dsahjpjauf&#34;</span><span style="color:#f92672">,</span><span style="color:#66d9ef">new</span> String<span style="color:#f92672">[]{</span><span style="color:#e6db74">&#34;ahjpjau&#34;</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#34;ja&#34;</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#34;ahbwzgqnuk&#34;</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#34;tnmlanowax&#34;</span><span style="color:#f92672">}));</span>
        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>numMatchingSubseq<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;aa&#34;</span><span style="color:#f92672">,</span><span style="color:#66d9ef">new</span> String<span style="color:#f92672">[]{</span><span style="color:#e6db74">&#34;aaa&#34;</span><span style="color:#f92672">}));</span>
    <span style="color:#f92672">}</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>LeetCode算法手记：777.在LR字符串中交换相邻字符</title>
            <link>https://Huang-zh.github.io/posts/leetcode777/</link>
            <pubDate>Thu, 07 Sep 2023 19:02:25 +0800</pubDate>
            
            <guid>https://Huang-zh.github.io/posts/leetcode777/</guid>
            <description>在一个由 ‘L’ , ‘R’ 和 ‘X’ 三个字符组成的字符串（例如&amp;#34;RXXLRXRXL&amp;#34;）中进行移动操作。 一次移动操作指用一个 “LX”</description>
            <content type="html"><![CDATA[<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">在一个由 ‘L’ , ‘R’ 和 ‘X’ 三个字符组成的字符串（例如&#34;RXXLRXRXL&#34;）中进行移动操作。
一次移动操作指用一个 “LX” 替换一个 “XL”，或者用一个 “XR” 替换一个 “RX”。
现给定起始字符串 start 和结束字符串 end，请编写代码，当且仅当存在一系列移动操作使得 start 可以转换成 end 时， 返回 True。

输入：start = &#34;RXXLRXRXL&#34;, end = &#34;XRLXXRRLX&#34;
输出：True

解释：
我们可以通过以下几步将 start 转换成 end：
RXXLRXRXL -&gt;
XRXLRXRXL -&gt;
XRLXRXRXL -&gt;
XRLXXRRXL -&gt;
XRLXXRRLX

提示：
1 &lt;= len(start) = len(end) &lt;= 10000。
start 和 end 中的字符串仅限于’L’, ‘R’和’X’。
</code></pre></div><h3 id="思路">思路</h3>
<p>如果一个start可以完成到end的转换，那么，两个字符串中L和R的相对位置一定会保持一致。</p>
<p>可以在start和end上分别各自定义指针i和j，跳过X直到第一个L或者R出现，此时判断s[i]和s[j]是否相等，如果不相等则不满足相对顺序，无法完成转换。</p>
<p>XL被LX替换，RX被XR替换，则意味着：</p>
<ul>
<li>如果能完成转换，最终end中第N个L的下标，只能小于或等于start中第N个L的下标，即L只允许左移或原地停留。</li>
<li>如果能完成转换，最终end中第M个R的下标，只能大于或等于start中第M个R的下标，即R只允许右移或原地停留。</li>
</ul>
<h4 id="思路递推">思路递推</h4>
<p>以题目中的start = &ldquo;RXXLRXRXL&rdquo;, end = &ldquo;XRLXXRRLX&quot;为例：</p>
<ul>
<li>找到第一个不为X的下标，此时i=0，j=1。</li>
<li>判断s[i] == s[j]，此时结果为true。</li>
<li>判断i和j的顺序，由于两字符均为R，R只允许右移或原地停留，即j &gt;= i，所以s[i]可以被转换至s[j]，即XR替换RX。</li>
<li>找到第二个不为X的下标，此时i=3,j=2。</li>
<li>判断s[i] == s[j]，此时结果为true。</li>
<li>判断i和j的顺序，由于两字符均为L，L只允许左移或原地停留，即j &lt;= i，所以s[i]可以被转换至s[j]，即LX替换XL。</li>
<li>找到第三个不为X的下标，此时i=4,j=5。</li>
<li>判断s[i] == s[j]，此时结果为true。</li>
<li>判断i和j的顺序，由于两字符均为R，R只允许右移或原地停留，即j &gt;= i，所以s[i]可以被转换至s[j]，即XR替换RX。</li>
<li>找到第四个不为X的下标，此时i=6,j=6。</li>
<li>判断s[i] == s[j]，此时结果为true。</li>
<li>判断i和j的顺序，由于两字符均为R，R只允许右移或原地停留，即j &gt;= i，所以s[i]可以被转换至s[j]，即原地停留。</li>
<li>找到第五个不为X的下标，此时i=8,j=7。</li>
<li>判断s[i] == s[j]，此时结果为true。</li>
<li>判断i和j的顺序，由于两字符均为L，L只允许左移或原地停留，即j &lt;= i，所以s[i]可以被转换至s[j]，即LX替换XL。</li>
<li>此时i到达末尾，完成搜索，判断i是否和j相等，只有两个指针到达同样的位置，才能完成转换。</li>
</ul>
<h3 id="代码实现">代码实现：</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">boolean</span> <span style="color:#a6e22e">canTransform</span><span style="color:#f92672">(</span>String start<span style="color:#f92672">,</span> String end<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">int</span> length <span style="color:#f92672">=</span> start<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">();</span>
        <span style="color:#75715e">//定义双指针i和j，分别指向start和end
</span><span style="color:#75715e"></span>        <span style="color:#75715e">//1.分别找到start和end中第一个不为X的字符s[i]和s[j]
</span><span style="color:#75715e"></span>        <span style="color:#75715e">//2.判断s[i]是否和s[j]相等，若不相等，则不满足相对顺序，无法完成转换
</span><span style="color:#75715e"></span>        <span style="color:#75715e">//3.判断s[j]的顺序：L字符只允许向左转换，R字符只允许向右转换
</span><span style="color:#75715e"></span>        <span style="color:#75715e">//同时需要注意：start和end全由X组成的情况
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 0<span style="color:#f92672">,</span>j <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span>
        <span style="color:#66d9ef">while</span> <span style="color:#f92672">(</span>i <span style="color:#f92672">&lt;</span> length <span style="color:#f92672">||</span> j <span style="color:#f92672">&lt;</span> length<span style="color:#f92672">){</span>
            <span style="color:#66d9ef">while</span> <span style="color:#f92672">(</span>i <span style="color:#f92672">&lt;</span> length <span style="color:#f92672">&amp;&amp;</span> start<span style="color:#f92672">.</span><span style="color:#a6e22e">charAt</span><span style="color:#f92672">(</span>i<span style="color:#f92672">)</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;X&#39;</span><span style="color:#f92672">)</span>
                <span style="color:#75715e">//找到start中第一个不为X的字符位置
</span><span style="color:#75715e"></span>                i<span style="color:#f92672">++;</span>
            <span style="color:#66d9ef">while</span> <span style="color:#f92672">(</span>j <span style="color:#f92672">&lt;</span> length <span style="color:#f92672">&amp;&amp;</span> end<span style="color:#f92672">.</span><span style="color:#a6e22e">charAt</span><span style="color:#f92672">(</span>j<span style="color:#f92672">)</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;X&#39;</span><span style="color:#f92672">)</span>
                <span style="color:#75715e">//找到end中第一个不为X的字符位置
</span><span style="color:#75715e"></span>                j<span style="color:#f92672">++;</span>
            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>i <span style="color:#f92672">==</span> length <span style="color:#f92672">||</span> j <span style="color:#f92672">==</span> length<span style="color:#f92672">)</span>
                <span style="color:#75715e">//任意一边指针到头，说明当前字符串全由X组成，则另一个字符串也应该全由X组成才能完成转换
</span><span style="color:#75715e"></span>                <span style="color:#66d9ef">return</span> i <span style="color:#f92672">==</span> j<span style="color:#f92672">;</span>
            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>start<span style="color:#f92672">.</span><span style="color:#a6e22e">charAt</span><span style="color:#f92672">(</span>i<span style="color:#f92672">)</span> <span style="color:#f92672">!=</span> end<span style="color:#f92672">.</span><span style="color:#a6e22e">charAt</span><span style="color:#f92672">(</span>j<span style="color:#f92672">))</span>
                <span style="color:#75715e">//判断s[i]是否和s[j]相等，若不相等，则不满足相对顺序，无法完成转换
</span><span style="color:#75715e"></span>                <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">;</span>
            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>start<span style="color:#f92672">.</span><span style="color:#a6e22e">charAt</span><span style="color:#f92672">(</span>i<span style="color:#f92672">)</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;L&#39;</span> <span style="color:#f92672">&amp;&amp;</span> i <span style="color:#f92672">&lt;</span> j<span style="color:#f92672">)</span>
                <span style="color:#75715e">//L字符只允许向左转换，即转换后的下标j不应该大于i
</span><span style="color:#75715e"></span>                <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">;</span>
            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>start<span style="color:#f92672">.</span><span style="color:#a6e22e">charAt</span><span style="color:#f92672">(</span>i<span style="color:#f92672">)</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;R&#39;</span> <span style="color:#f92672">&amp;&amp;</span> i <span style="color:#f92672">&gt;</span> j<span style="color:#f92672">)</span>
                <span style="color:#75715e">//R字符只允许向左转换，即转换后的下标j不应该小于i
</span><span style="color:#75715e"></span>                <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">;</span>
            i<span style="color:#f92672">++;</span>
            j<span style="color:#f92672">++;</span>
        <span style="color:#f92672">}</span>
        <span style="color:#66d9ef">return</span> i <span style="color:#f92672">==</span> j<span style="color:#f92672">;</span>
    <span style="color:#f92672">}</span>

    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">test</span><span style="color:#f92672">(){</span>
        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>canTransform<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;RXXLRXRXL&#34;</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#34;XRLXXRRLX&#34;</span><span style="color:#f92672">));</span>
        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>canTransform<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;RXXLRXRXL&#34;</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#34;XRXLXRLLX&#34;</span><span style="color:#f92672">));</span>
    <span style="color:#f92672">}</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>LeetCode算法手记：658.找到 K 个最接近的元素</title>
            <link>https://Huang-zh.github.io/posts/leetcode658/</link>
            <pubDate>Tue, 05 Sep 2023 21:16:44 +0800</pubDate>
            
            <guid>https://Huang-zh.github.io/posts/leetcode658/</guid>
            <description>给定一个排序好的数组 arr ，两个整数 k 和 x ，从数组中找到最靠近 x（两数之差最小）的 k 个数。返回的结果必须要是按升序排好的。 整数 a 比整数 b 更接近 x</description>
            <content type="html"><![CDATA[<blockquote>
<p>给定一个排序好的数组 arr ，两个整数 k 和 x ，从数组中找到最靠近 x（两数之差最小）的 k 个数。返回的结果必须要是按升序排好的。</p>
<p>整数 a 比整数 b 更接近 x 需要满足：</p>
<ul>
<li>
<p>|a - x| &lt; |b - x| 或者</p>
</li>
<li>
<p>|a - x| == |b - x| 且 a &lt; b</p>
</li>
</ul>
<p>示例 1：</p>
<p>输入：arr = [1,2,3,4,5], k = 4, x = 3</p>
<p>输出：[1,2,3,4]</p>
<p>示例 2：</p>
<p>输入：arr = [1,2,3,4,5], k = 4, x = -1</p>
<p>输出：[1,2,3,4]</p>
<p>提示：</p>
<p>1 &lt;= k &lt;= arr.length</p>
<p>1 &lt;= arr.length &lt;= 104</p>
<p>arr 按升序排列</p>
<p>-104 &lt;= arr[i], x &lt;= 104</p>
</blockquote>
<h3 id="思路">思路</h3>
<p>找到数组中从左到右第一次出现x的下标（index），在该下标的左右维护两个指针，分别向左和向右递进来寻找其他更贴近的元素。</p>
<h4 id="思路递推">思路递推</h4>
<p>以[1,2,3,4,5,5,5,6,8]为例，k为4，x为5，即寻找4个最接近5的数字，并由小到大排序返回。可以知道index为4，此时维护left指针为index-1即3，right指针为index即4，开始递进指针，过程如下：</p>
<ol>
<li>left = 3，right = 4，判断此时两指针元素与x的差值，发现right处的差值为0，即差值更小，则将right指针向右递进为5。</li>
<li>left = 3，right = 5，判断此时两指针元素与x的差值，发现right处的差值为0，即差值更小，则将right指针向右递进为6。</li>
<li>left = 3，right = 6，判断此时两指针元素与x的差值，发现right处的差值为0，即差值更小，则将right指针向右递进为7。</li>
<li>left = 3，right = 7，判断此时两指针元素与x的差值，发现两处的差值均为1，即差值相等，根据提议，差值相等时更接近的值需要有更小的下标，则将left指针向左递进为2。</li>
<li>满足4个数字，退出搜寻。</li>
</ol>
<p>此时还要注意几个边界值：</p>
<ul>
<li>左右指针不能够越出数组边界，当一侧到达边界时，即代表该侧无法再获取接近的值，只需要递进另一侧的指针，从另一侧获取更接近的值。</li>
<li>怎么退出搜寻？不难发现可以通过k的递减来实现循环控制，由于right一开始值为index，即代表right指针一开始对应的元素肯定会被纳入结果，所以循环实际上只用进行k-1次。</li>
</ul>
<h3 id="代码实现">代码实现：</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">LeetCode658</span> <span style="color:#f92672">{</span>

    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> List<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">findClosestElements</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span><span style="color:#f92672">[]</span> arr<span style="color:#f92672">,</span> <span style="color:#66d9ef">int</span> k<span style="color:#f92672">,</span> <span style="color:#66d9ef">int</span> x<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#75715e">//找到数组中最左端x对应的下标index
</span><span style="color:#75715e"></span>        <span style="color:#75715e">//在index左右分别维护双指针left和right，其中left指针向左递进，right指针从index向右递进
</span><span style="color:#75715e"></span>        <span style="color:#75715e">//在递进的过程中判断两边的差值，差值较小的一侧表明更接近x，对应侧的指针继续递进寻找下一个更接近的值
</span><span style="color:#75715e"></span>        <span style="color:#75715e">//递进的过程中注意判断是否超出数组边界，若当前侧超出数组边界则另一侧指针递进，直到right-left = k为止
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">int</span> index <span style="color:#f92672">=</span> leftBondBinarySearch<span style="color:#f92672">(</span>arr<span style="color:#f92672">,</span> x<span style="color:#f92672">);</span>
        <span style="color:#66d9ef">int</span> left <span style="color:#f92672">=</span> index <span style="color:#f92672">-</span> 1<span style="color:#f92672">,</span>right <span style="color:#f92672">=</span> index<span style="color:#f92672">;</span>
        List<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;</span> result <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ArrayList<span style="color:#f92672">&lt;&gt;();</span>
        <span style="color:#75715e">//循环只能进行k-1次，因为一开始right下标对应的元素就是本身，即差值为0，肯定会被纳入结果，因此只要再找出k-1个数即可
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">while</span> <span style="color:#f92672">(</span>k<span style="color:#f92672">--</span> <span style="color:#f92672">&gt;</span> 0<span style="color:#f92672">){</span>
            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>left <span style="color:#f92672">&lt;</span> 0<span style="color:#f92672">)</span>
                <span style="color:#75715e">//超出左边界，右侧指针递进
</span><span style="color:#75715e"></span>                right<span style="color:#f92672">++;</span>
            <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>right <span style="color:#f92672">&gt;</span> arr<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> 1<span style="color:#f92672">)</span>
                <span style="color:#75715e">//超出右边界，左侧指针递进
</span><span style="color:#75715e"></span>                left<span style="color:#f92672">--;</span>
            <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>x <span style="color:#f92672">-</span> arr<span style="color:#f92672">[</span>left<span style="color:#f92672">]</span> <span style="color:#f92672">&lt;=</span> arr<span style="color:#f92672">[</span>right<span style="color:#f92672">]</span> <span style="color:#f92672">-</span> x<span style="color:#f92672">)</span>
                <span style="color:#75715e">//两侧差值取小的一侧递进，如果相等则取下标更小的元素
</span><span style="color:#75715e"></span>                left<span style="color:#f92672">--;</span>
            <span style="color:#66d9ef">else</span>
                right<span style="color:#f92672">++;</span>
        <span style="color:#f92672">}</span>
        <span style="color:#75715e">//此时left和right的差值为k+1，从left+1处开始获取第一个元素
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> left<span style="color:#f92672">+</span>1<span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> right<span style="color:#f92672">;</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
            result<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>arr<span style="color:#f92672">[</span>i<span style="color:#f92672">]);</span>
        <span style="color:#f92672">}</span>
        <span style="color:#66d9ef">return</span> result<span style="color:#f92672">;</span>
    <span style="color:#f92672">}</span>

    <span style="color:#75715e">/**
</span><span style="color:#75715e">     * @Author huang.zh
</span><span style="color:#75715e">     * @Description 找到数组中最左端出现的值为target的元素下标，即二分左边界搜索
</span><span style="color:#75715e">     * @Date 9:43 PM 2023/9/5
</span><span style="color:#75715e">     * @Param [arr, target]
</span><span style="color:#75715e">     * @return
</span><span style="color:#75715e">     **/</span>
    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">leftBondBinarySearch</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span><span style="color:#f92672">[]</span> arr<span style="color:#f92672">,</span><span style="color:#66d9ef">int</span> target<span style="color:#f92672">){</span>
        <span style="color:#66d9ef">int</span> left <span style="color:#f92672">=</span> 0<span style="color:#f92672">,</span>right <span style="color:#f92672">=</span> arr<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> 1<span style="color:#f92672">;</span>
        <span style="color:#66d9ef">while</span> <span style="color:#f92672">(</span>left <span style="color:#f92672">&lt;</span> right<span style="color:#f92672">){</span>
            <span style="color:#66d9ef">int</span> mid <span style="color:#f92672">=</span> left <span style="color:#f92672">+</span> <span style="color:#f92672">(</span>right <span style="color:#f92672">-</span> left<span style="color:#f92672">)/</span>2<span style="color:#f92672">;</span>
            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>arr<span style="color:#f92672">[</span>mid<span style="color:#f92672">]</span> <span style="color:#f92672">==</span> target<span style="color:#f92672">){</span>
                <span style="color:#75715e">//命中元素，右指针重置，在[left,mid]中寻找更左端的值为target的元素
</span><span style="color:#75715e"></span>                right <span style="color:#f92672">=</span> mid<span style="color:#f92672">;</span>
            <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>arr<span style="color:#f92672">[</span>mid<span style="color:#f92672">]</span> <span style="color:#f92672">&lt;</span> target<span style="color:#f92672">){</span>
                left <span style="color:#f92672">=</span> mid <span style="color:#f92672">+</span> 1<span style="color:#f92672">;</span>
            <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
                right <span style="color:#f92672">=</span> mid <span style="color:#f92672">-</span> 1<span style="color:#f92672">;</span>
            <span style="color:#f92672">}</span>
        <span style="color:#f92672">}</span>
        <span style="color:#66d9ef">return</span> left<span style="color:#f92672">;</span>
    <span style="color:#f92672">}</span>


    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">test</span><span style="color:#f92672">(){</span>
        List<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;</span> list <span style="color:#f92672">=</span> findClosestElements<span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> <span style="color:#66d9ef">int</span><span style="color:#f92672">[]{</span>1<span style="color:#f92672">,</span> 2<span style="color:#f92672">,</span> 3<span style="color:#f92672">,</span> 4<span style="color:#f92672">,</span> 5<span style="color:#f92672">},</span> 2<span style="color:#f92672">,</span> 4<span style="color:#f92672">);</span>
        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>Arrays<span style="color:#f92672">.</span><span style="color:#a6e22e">toString</span><span style="color:#f92672">(</span>list<span style="color:#f92672">.</span><span style="color:#a6e22e">toArray</span><span style="color:#f92672">()));</span>
    <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Redis存储原理剖析&lt;三&gt;：key的惰性删除--异步删除策略</title>
            <link>https://Huang-zh.github.io/posts/redis3/</link>
            <pubDate>Fri, 01 Sep 2023 10:10:44 +0800</pubDate>
            
            <guid>https://Huang-zh.github.io/posts/redis3/</guid>
            <description>前面我们介绍了key在惰性删除时同步删除过程的实现，具体可见： Redis存储原理剖析&amp;lt;二&amp;gt;：key的惰性删除&amp;ndash;同步删</description>
            <content type="html"><![CDATA[<p>前面我们介绍了key在惰性删除时同步删除过程的实现，具体可见：</p>
<ul>
<li><a href="/posts/redis2">Redis存储原理剖析&lt;二&gt;：key的惰性删除&ndash;同步删除策略</a></li>
</ul>
<p>本篇文章，我们将继续探索惰性删除时，key的异步删除过程的实现。</p>
<h5 id="612-异步删除">6.1.2 异步删除</h5>
<p>直接看异步删除的代码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">#define LAZYFREE_THRESHOLD 64
</span><span style="color:#75715e"></span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">dbAsyncDelete</span>(redisDb <span style="color:#f92672">*</span>db, robj <span style="color:#f92672">*</span>key) {
    <span style="color:#75715e">// 第一步，进行expireDict的删除，仍旧保留dataDict中的dictEntry
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> (dictSize(db<span style="color:#f92672">-&gt;</span>expires) <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>) dictDelete(db<span style="color:#f92672">-&gt;</span>expires,key<span style="color:#f92672">-&gt;</span>ptr);
		<span style="color:#75715e">// 第二步，进行unlink操作，只是简单的把dataDict内部hash桶里的链表解链
</span><span style="color:#75715e"></span>  	<span style="color:#75715e">// 内部调用的dictGenericDelete函数在同步删除代码中分析过，区别是此处nofree传入的值为1，即不进行内存释放
</span><span style="color:#75715e"></span>    dictEntry <span style="color:#f92672">*</span>de <span style="color:#f92672">=</span> dictUnlink(db<span style="color:#f92672">-&gt;</span>dict,key<span style="color:#f92672">-&gt;</span>ptr);
    <span style="color:#66d9ef">if</span> (de) {
        robj <span style="color:#f92672">*</span>val <span style="color:#f92672">=</span> dictGetVal(de);
      	<span style="color:#75715e">// 计算当前释放value内存需要的开销，根据value的类型会得到不同的开销
</span><span style="color:#75715e"></span>        size_t free_effort <span style="color:#f92672">=</span> lazyfreeGetFreeEffort(val);

       	<span style="color:#75715e">// 第三步，如果开销过大，并且当前引用计数为1，添加任务调度进行异步释放value
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">if</span> (free_effort <span style="color:#f92672">&gt;</span> LAZYFREE_THRESHOLD <span style="color:#f92672">&amp;&amp;</span> val<span style="color:#f92672">-&gt;</span>refcount <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>) {
            atomicIncr(lazyfree_objects,<span style="color:#ae81ff">1</span>);
            bioCreateBackgroundJob(BIO_LAZY_FREE,val,NULL,NULL);
            dictSetVal(db<span style="color:#f92672">-&gt;</span>dict,de,NULL);
        }
    }

    <span style="color:#75715e">// 如果此时dictEntry仍未被释放/或是开销不大，触发兜底机制，直接调用dictFreeUnlinkedEntry进行key和value以及dictEntry的释放
</span><span style="color:#75715e"></span>  	<span style="color:#75715e">// dictFreeUnlinkedEntry内部仍旧调用dictFreeKey，dictFreeVal，zfree，在同步删除中已经分析过
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> (de) {
        dictFreeUnlinkedEntry(db<span style="color:#f92672">-&gt;</span>dict,de);
      	<span style="color:#75715e">//集群模式下，寻找对应的slot进行remove操作
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">if</span> (server.cluster_enabled) slotToKeyDel(key);
        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
    } <span style="color:#66d9ef">else</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
    }
}
</code></pre></div><p>可以看到异步删除的过程中,添加异步任务的前置条件仍旧是引用计数,至于添加异步调度任务,核心代码在bioCreateBackgroundJob中,实际上就是调用了操作系统提供的标准库函数加锁,成功加锁后往类型为释放内存的任务队列中添加一个新的任务:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">bioCreateBackgroundJob</span>(<span style="color:#66d9ef">int</span> type, <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>arg1, <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>arg2, <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>arg3) {
  	<span style="color:#75715e">//构造一个job
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">struct</span> bio_job <span style="color:#f92672">*</span>job <span style="color:#f92672">=</span> zmalloc(<span style="color:#66d9ef">sizeof</span>(<span style="color:#f92672">*</span>job));
		<span style="color:#75715e">//为当前的任务设置任务创建时间
</span><span style="color:#75715e"></span>    job<span style="color:#f92672">-&gt;</span>time <span style="color:#f92672">=</span> time(NULL);
    <span style="color:#75715e">//任务参数赋值
</span><span style="color:#75715e"></span>    job<span style="color:#f92672">-&gt;</span>arg1 <span style="color:#f92672">=</span> arg1;
    job<span style="color:#f92672">-&gt;</span>arg2 <span style="color:#f92672">=</span> arg2;
    job<span style="color:#f92672">-&gt;</span>arg3 <span style="color:#f92672">=</span> arg3;
  	<span style="color:#75715e">//获取互斥锁 
</span><span style="color:#75715e"></span>    pthread_mutex_lock(<span style="color:#f92672">&amp;</span>bio_mutex[type]);
  	<span style="color:#75715e">//bio_jobs为二级指针,可以理解为二维数组,由任务类型定位到具体存储的队列,将任务添加至队尾
</span><span style="color:#75715e"></span>    listAddNodeTail(bio_jobs[type],job);
    bio_pending[type]<span style="color:#f92672">++</span>;
  	<span style="color:#75715e">//唤醒阻塞线程,阻塞的线程会从cond_wait队列切换至mutex_lock队列,尝试争抢互斥锁
</span><span style="color:#75715e"></span>    pthread_cond_signal(<span style="color:#f92672">&amp;</span>bio_newjob_cond[type]);
    <span style="color:#75715e">//解锁
</span><span style="color:#75715e"></span>    pthread_mutex_unlock(<span style="color:#f92672">&amp;</span>bio_mutex[type]);
}
</code></pre></div><p>那么，既然调度任务进入队列，就一定会有出队的时候。bioCreateBackgroundJob所在的文件为bio.c，bio全称background io，作为redis的后台io线程，支撑着redis-server运行时所有的异步任务调度。bio.c中存在这样一个函数bioProcessBackgroundJobs，就是它从任务队列中拿出创建的调度任务并执行，这个函数在redis-server启动时就会被调用，redis-server启动的入口，就在server.c中的main函数：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv) {
    ......
    <span style="color:#75715e">// 检查是否启用哨兵模式
</span><span style="color:#75715e"></span>    server.sentinel_mode <span style="color:#f92672">=</span> checkForSentinelMode(argc,argv);
  	<span style="color:#75715e">// 加载配置项
</span><span style="color:#75715e"></span>    initServerConfig();
   	......


  	<span style="color:#75715e">// server初始化，分配hashtable的内存，初始化loop线程
</span><span style="color:#75715e"></span>    initServer();
    ......
    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>server.sentinel_mode) {
      	......
        InitServerLast();
      	<span style="color:#75715e">//从磁盘恢复数据，模式可以为RDB或AOF
</span><span style="color:#75715e"></span>        loadDataFromDisk();
        <span style="color:#66d9ef">if</span> (server.cluster_enabled) {
            <span style="color:#66d9ef">if</span> (verifyClusterConfigWithData() <span style="color:#f92672">==</span> C_ERR) {
                serverLog(LL_WARNING,
                    <span style="color:#e6db74">&#34;You can&#39;t have keys in a DB different than DB 0 when in &#34;</span>
                    <span style="color:#e6db74">&#34;Cluster mode. Exiting.&#34;</span>);
                exit(<span style="color:#ae81ff">1</span>);
            }
        }
        <span style="color:#66d9ef">if</span> (server.ipfd_count <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>)
            serverLog(LL_NOTICE,<span style="color:#e6db74">&#34;Ready to accept connections&#34;</span>);
        <span style="color:#66d9ef">if</span> (server.sofd <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>)
            serverLog(LL_NOTICE,<span style="color:#e6db74">&#34;The server is now ready to accept connections at %s&#34;</span>, server.unixsocket);
    } <span style="color:#66d9ef">else</span> {
        InitServerLast();
        sentinelIsRunning();
    }

    <span style="color:#66d9ef">if</span> (server.maxmemory <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;&amp;</span> server.maxmemory <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">1024</span><span style="color:#f92672">*</span><span style="color:#ae81ff">1024</span>) {
        serverLog(LL_WARNING,<span style="color:#e6db74">&#34;WARNING: You specified a maxmemory value that is less than 1MB (current value is %llu bytes). Are you sure this is what you really want?&#34;</span>, server.maxmemory);
    }

    aeSetBeforeSleepProc(server.el,beforeSleep);
    aeSetAfterSleepProc(server.el,afterSleep);
    aeMain(server.el);
    aeDeleteEventLoop(server.el);
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div><p>不论是单机模式还是哨兵集群模式，都会调用InitServerLast进行server初始化：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">InitServerLast</span>() {
    bioInit();
    server.initial_memory_usage <span style="color:#f92672">=</span> zmalloc_used_memory();
}

<span style="color:#66d9ef">void</span> <span style="color:#a6e22e">bioInit</span>(<span style="color:#66d9ef">void</span>) {
    pthread_attr_t attr;
    pthread_t <span style="color:#66d9ef">thread</span>;
    size_t stacksize;
    <span style="color:#66d9ef">int</span> j;

    <span style="color:#75715e">//BIO_NUM_OPS默认值为3，也就意味着通过pthread孵化了三组调度线程模型，它们分别对应着三种不同类型的调度任务
</span><span style="color:#75715e"></span>  	<span style="color:#75715e">//每一组线程调度模型有着自己的互斥锁、任务队列为空等待条件、线程唤醒条件，分别对应bio_mutex、bio_newjob_cond、bio_step_cond
</span><span style="color:#75715e"></span>  	<span style="color:#75715e">//bio_jobs为具体的任务队列，由listCreate创建的一个含有头尾指针的链表
</span><span style="color:#75715e"></span>  	<span style="color:#75715e">//bio_pending存储每种类型的任务等待处理的数量
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">for</span> (j <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; j <span style="color:#f92672">&lt;</span> BIO_NUM_OPS; j<span style="color:#f92672">++</span>) {
        pthread_mutex_init(<span style="color:#f92672">&amp;</span>bio_mutex[j],NULL);
        pthread_cond_init(<span style="color:#f92672">&amp;</span>bio_newjob_cond[j],NULL);
        pthread_cond_init(<span style="color:#f92672">&amp;</span>bio_step_cond[j],NULL);
        bio_jobs[j] <span style="color:#f92672">=</span> listCreate();
        bio_pending[j] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    }

    ......
      
    <span style="color:#66d9ef">for</span> (j <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; j <span style="color:#f92672">&lt;</span> BIO_NUM_OPS; j<span style="color:#f92672">++</span>) {
        <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>arg <span style="color:#f92672">=</span> (<span style="color:#66d9ef">void</span><span style="color:#f92672">*</span>)(<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">long</span>) j;
      	<span style="color:#75715e">//每种类型创建一个loop线程，调用bioProcessBackgroundJobs进行任务调度
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">if</span> (pthread_create(<span style="color:#f92672">&amp;</span><span style="color:#66d9ef">thread</span>,<span style="color:#f92672">&amp;</span>attr,bioProcessBackgroundJobs,arg) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>) {
            serverLog(LL_WARNING,<span style="color:#e6db74">&#34;Fatal: Can&#39;t initialize Background Jobs.&#34;</span>);
            exit(<span style="color:#ae81ff">1</span>);
        }
        bio_threads[j] <span style="color:#f92672">=</span> <span style="color:#66d9ef">thread</span>;
    }
} 
</code></pre></div><p>到了bioProcessBackgroundJobs这一层，开始真正的任务调度过程：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">bioProcessBackgroundJobs</span>(<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>arg) {
    <span style="color:#66d9ef">struct</span> bio_job <span style="color:#f92672">*</span>job;
  	<span style="color:#75715e">//type为任务的类型
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">long</span> type <span style="color:#f92672">=</span> (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">long</span>) arg;
    sigset_t sigset;

    <span style="color:#75715e">//任务类型校验合法性
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> (type <span style="color:#f92672">&gt;=</span> BIO_NUM_OPS) {
        serverLog(LL_WARNING,
            <span style="color:#e6db74">&#34;Warning: bio thread started with wrong type %lu&#34;</span>,type);
        <span style="color:#66d9ef">return</span> NULL;
    }

  	<span style="color:#75715e">//设置线程属性，让线程可以被中断
</span><span style="color:#75715e"></span>    pthread_setcancelstate(PTHREAD_CANCEL_ENABLE, NULL);
    pthread_setcanceltype(PTHREAD_CANCEL_ASYNCHRONOUS, NULL);
		<span style="color:#75715e">//获取互斥锁
</span><span style="color:#75715e"></span>    pthread_mutex_lock(<span style="color:#f92672">&amp;</span>bio_mutex[type]);

    sigemptyset(<span style="color:#f92672">&amp;</span>sigset);
    sigaddset(<span style="color:#f92672">&amp;</span>sigset, SIGALRM);
    <span style="color:#66d9ef">if</span> (pthread_sigmask(SIG_BLOCK, <span style="color:#f92672">&amp;</span>sigset, NULL))
        serverLog(LL_WARNING,
            <span style="color:#e6db74">&#34;Warning: can&#39;t mask SIGALRM in bio.c thread: %s&#34;</span>, strerror(errno));

    <span style="color:#66d9ef">while</span>(<span style="color:#ae81ff">1</span>) {
        listNode <span style="color:#f92672">*</span>ln;

        
        <span style="color:#66d9ef">if</span> (listLength(bio_jobs[type]) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {
          	<span style="color:#75715e">//如果当前type对应的任务队列为空，当前线程占有互斥锁并等待
</span><span style="color:#75715e"></span>            pthread_cond_wait(<span style="color:#f92672">&amp;</span>bio_newjob_cond[type],<span style="color:#f92672">&amp;</span>bio_mutex[type]);
            <span style="color:#66d9ef">continue</span>;
        }
        <span style="color:#75715e">//直到任务队列不为空，获取头节点，占有互斥锁的线程将在这一步获得job
</span><span style="color:#75715e"></span>        ln <span style="color:#f92672">=</span> listFirst(bio_jobs[type]);
        job <span style="color:#f92672">=</span> ln<span style="color:#f92672">-&gt;</span>value;
        
      	<span style="color:#75715e">//获取到任务后释放互斥锁
</span><span style="color:#75715e"></span>        pthread_mutex_unlock(<span style="color:#f92672">&amp;</span>bio_mutex[type]);

        <span style="color:#75715e">//根据类型处理任务调度，这里我们传入的type为BIO_LAZY_FREE，代表释放内存类型的任务
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">if</span> (type <span style="color:#f92672">==</span> BIO_CLOSE_FILE) {
            close((<span style="color:#66d9ef">long</span>)job<span style="color:#f92672">-&gt;</span>arg1);
        } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (type <span style="color:#f92672">==</span> BIO_AOF_FSYNC) {
            redis_fsync((<span style="color:#66d9ef">long</span>)job<span style="color:#f92672">-&gt;</span>arg1);
        } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (type <span style="color:#f92672">==</span> BIO_LAZY_FREE) {
            <span style="color:#75715e">//根据参数来调用不同的释放函数
</span><span style="color:#75715e"></span>            <span style="color:#66d9ef">if</span> (job<span style="color:#f92672">-&gt;</span>arg1)
              	<span style="color:#75715e">//释放指针指向的对象内存
</span><span style="color:#75715e"></span>                lazyfreeFreeObjectFromBioThread(job<span style="color:#f92672">-&gt;</span>arg1);
            <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (job<span style="color:#f92672">-&gt;</span>arg2 <span style="color:#f92672">&amp;&amp;</span> job<span style="color:#f92672">-&gt;</span>arg3)
              	<span style="color:#75715e">//清除一个dict中的两个hashTable，即dataDict和expireDict，也就是ht[2]
</span><span style="color:#75715e"></span>                lazyfreeFreeDatabaseFromBioThread(job<span style="color:#f92672">-&gt;</span>arg2,job<span style="color:#f92672">-&gt;</span>arg3);
            <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (job<span style="color:#f92672">-&gt;</span>arg3)
              	<span style="color:#75715e">//清除zset的底层实现：skipList
</span><span style="color:#75715e"></span>                lazyfreeFreeSlotsMapFromBioThread(job<span style="color:#f92672">-&gt;</span>arg3);
        } <span style="color:#66d9ef">else</span> {
            serverPanic(<span style="color:#e6db74">&#34;Wrong job type in bioProcessBackgroundJobs().&#34;</span>);
        }
      	<span style="color:#75715e">//释放调度任务占用的内存
</span><span style="color:#75715e"></span>        zfree(job);

        <span style="color:#75715e">//再次获取互斥锁，配合循环中空任务队列等待条件使用
</span><span style="color:#75715e"></span>        pthread_mutex_lock(<span style="color:#f92672">&amp;</span>bio_mutex[type]);
      	<span style="color:#75715e">//任务队列出队
</span><span style="color:#75715e"></span>        listDelNode(bio_jobs[type],ln);
      	<span style="color:#75715e">//正在等待处理的任务数-1
</span><span style="color:#75715e"></span>        bio_pending[type]<span style="color:#f92672">--</span>;

        pthread_cond_broadcast(<span style="color:#f92672">&amp;</span>bio_step_cond[type]);
    }
}
</code></pre></div><p>在异步删除的代码中很明显看到只传入了一个arg1的值：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">bioCreateBackgroundJob(BIO_LAZY_FREE,val,NULL,NULL);
</code></pre></div><p>因此可以推断出在任务调度过程中会调用lazyfreeFreeObjectFromBioThread方法进行内存释放：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">lazyfreeFreeObjectFromBioThread</span>(robj <span style="color:#f92672">*</span>o) {
    decrRefCount(o);
    atomicDecr(lazyfree_objects,<span style="color:#ae81ff">1</span>);
}
</code></pre></div><p>也是调用了decrRefCount，针对不同类型的value值，调用不同的释放内存函数。</p>
<p>所以不论是同步删除还是异步删除的方式，二者都是针对key所在的sds内存释放，和value不同类型的内存释放，底层最终都是会调用zfree进行内存释放，zfree封装了操作系统提供的free接口。</p>
<p>至此，惰性删除的流程，以及底层函数的调用已经分析完毕。</p>
]]></content>
        </item>
        
        <item>
            <title>Redis存储原理剖析&lt;二&gt;：key的惰性删除--同步删除策略</title>
            <link>https://Huang-zh.github.io/posts/redis2/</link>
            <pubDate>Tue, 29 Aug 2023 19:10:44 +0800</pubDate>
            
            <guid>https://Huang-zh.github.io/posts/redis2/</guid>
            <description>6. key删除策略 redis中，对于过期key的淘汰机制，可以分为以下两种： 定期删除：一种主动删除策略，定期去轮询存储了key的过期时间的字典</description>
            <content type="html"><![CDATA[<h3 id="6-key删除策略">6. key删除策略</h3>
<p>redis中，对于过期key的淘汰机制，可以分为以下两种：</p>
<ul>
<li>定期删除：一种主动删除策略，定期去轮询存储了key的过期时间的字典。</li>
<li>惰性删除：在寻找/写入dictEntry的时候判断是否过期，属于被动删除策略。</li>
</ul>
<h4 id="61-惰性删除">6.1 惰性删除</h4>
<p>惰性删除的代码，入口在db.c中的expireIfNeeded，该方法由执行查找命令或写入命令的方法调用，在执行真正的命令之前，做key的删除判断以及删除操作：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">expireIfNeeded</span>(redisDb <span style="color:#f92672">*</span>db, robj <span style="color:#f92672">*</span>key) {
  	<span style="color:#75715e">//设定了过期时间且未过期的key会在这一步直接返回
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>keyIsExpired(db,key)) <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
		<span style="color:#75715e">//当前redis节点过期了，但是存在master节点。
</span><span style="color:#75715e"></span>  	<span style="color:#75715e">//意味着当前属于slave节点，返回1，由master执行删除后同步至slave
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> (server.masterhost <span style="color:#f92672">!=</span> NULL) <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
  	
  	<span style="color:#75715e">//过期key的数量+1
</span><span style="color:#75715e"></span>    server.stat_expiredkeys<span style="color:#f92672">++</span>;
  	
  	<span style="color:#75715e">//把过期的key的消息传播到slave，同时将该key的删除命令写入到aof文件
</span><span style="color:#75715e"></span>    propagateExpire(db,key,server.lazyfree_lazy_expire);
  	<span style="color:#75715e">//通知监听了该key的客户端，通知key的过期事件
</span><span style="color:#75715e"></span>    notifyKeyspaceEvent(NOTIFY_EXPIRED,
        <span style="color:#e6db74">&#34;expired&#34;</span>,key,db<span style="color:#f92672">-&gt;</span>id);
  	<span style="color:#75715e">//根据设定的删除方式，决定采用同步删除还是异步删除
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">return</span> server.lazyfree_lazy_expire <span style="color:#f92672">?</span> dbAsyncDelete(db,key) <span style="color:#f92672">:</span>
                                         dbSyncDelete(db,key);
}

<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">keyIsExpired</span>(redisDb <span style="color:#f92672">*</span>db, robj <span style="color:#f92672">*</span>key) {
  	<span style="color:#75715e">//获得设定的过期时间戳
</span><span style="color:#75715e"></span>    mstime_t when <span style="color:#f92672">=</span> getExpire(db,key);
    mstime_t now;
		<span style="color:#75715e">//如果时间戳小于0，说明没有设置过期时间
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> (when <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>) <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>; 

    <span style="color:#75715e">//loading状态下不允许进行过期判断
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> (server.loading) <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;

    <span style="color:#75715e">//获得系统当前时间
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> (server.lua_caller) {
        now <span style="color:#f92672">=</span> server.lua_time_start;
    }
    <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (server.fixed_time_expire <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>) {
        now <span style="color:#f92672">=</span> server.mstime;
    }
    <span style="color:#66d9ef">else</span> {
        now <span style="color:#f92672">=</span> mstime();
    }

    <span style="color:#75715e">//执行判断
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">return</span> now <span style="color:#f92672">&gt;</span> when;
}

<span style="color:#66d9ef">long</span> <span style="color:#66d9ef">long</span> <span style="color:#a6e22e">getExpire</span>(redisDb <span style="color:#f92672">*</span>db, robj <span style="color:#f92672">*</span>key) {
    dictEntry <span style="color:#f92672">*</span>de;

   	<span style="color:#75715e">//如果存储expireTime的字典为空 或者 当前key没有设置过期时间，返回-1
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> (dictSize(db<span style="color:#f92672">-&gt;</span>expires) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">||</span>
       (de <span style="color:#f92672">=</span> dictFind(db<span style="color:#f92672">-&gt;</span>expires,key<span style="color:#f92672">-&gt;</span>ptr)) <span style="color:#f92672">==</span> NULL) <span style="color:#66d9ef">return</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>;

    <span style="color:#75715e">//安全保护机制，确保存储在expireDict中的key也存在于dataDict中
</span><span style="color:#75715e"></span>    serverAssertWithInfo(NULL,key,dictFind(db<span style="color:#f92672">-&gt;</span>dict,key<span style="color:#f92672">-&gt;</span>ptr) <span style="color:#f92672">!=</span> NULL);
  	<span style="color:#75715e">//取得过期时间戳并返回
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">return</span> dictGetSignedIntegerVal(de);
}
</code></pre></div><p>简略画出这段代码调用的时序图：

<script async type="application/javascript" src="https://cdn.jsdelivr.net/npm/mermaid@9.1.1/dist/mermaid.min.js">
    var config = {
      startOnLoad:true,
      theme:'neutral',
      align:'left'
    };
    mermaid.initialize(config);
  </script>
  
  <div class="mermaid">
    
  sequenceDiagram
　　participant expireIfNeeded
　　participant keyIsExpired
　　participant getExpire
　　participant dictFind
　　expireIfNeeded->>keyIsExpired:invoke
　　keyIsExpired->>getExpire:invoke
　　getExpire->>dictFind:invoke
　　Note OVER dictFind: 从expireDict中获取value
　　dictFind-->>getExpire:return value
　　Note OVER getExpire: 解析value获取过期时间戳
　　getExpire-->>keyIsExpired:return
　　Note OVER keyIsExpired: 将时间戳和系统当前时间比较
　　keyIsExpired-->>expireIfNeeded:return
　　Note OVER expireIfNeeded: 判断是否过期、是否为master节点
　　Note OVER expireIfNeeded: 通知slave节点进行key删除，并将删除命令写入AOF文件
　　Note OVER expireIfNeeded: 向监听了key的客户端发布key过期事件
　　Note OVER expireIfNeeded: 根据预设的删除方式，选择同步或者是异步删除key对应的dictEntry

  </div>
</p>
<p>其中，在使用具体的删除方式时，涉及到一个值lazyfree_lazy_expire，它需要我们在redis.conf文件中进行配置：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">lazyfree-lazy-expire no
</code></pre></div><p>可以看到默认值为no，即代表在删除是会采用同步删除，如果将该项置为yes，则采用异步删除的模式。</p>
<p>接下来，分别来看一下同步删除和异步删除的代码实现。</p>
<h5 id="611-同步删除">6.1.1 同步删除</h5>
<p>同步删除的代码比较简单：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">dbSyncDelete</span>(redisDb <span style="color:#f92672">*</span>db, robj <span style="color:#f92672">*</span>key) {
    <span style="color:#75715e">//如果expireDict大于0，先进行expireDict的删除
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> (dictSize(db<span style="color:#f92672">-&gt;</span>expires) <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>) dictDelete(db<span style="color:#f92672">-&gt;</span>expires,key<span style="color:#f92672">-&gt;</span>ptr);
  	<span style="color:#75715e">//再进行dataDict的删除
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> (dictDelete(db<span style="color:#f92672">-&gt;</span>dict,key<span style="color:#f92672">-&gt;</span>ptr) <span style="color:#f92672">==</span> DICT_OK) {
      	<span style="color:#75715e">//如果当前是集群模式，则定位到具体存储dictEntry的slot，进行remove操作
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">if</span> (server.cluster_enabled) slotToKeyDel(key);
        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
    } <span style="color:#66d9ef">else</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
    }
}

<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">dictDelete</span>(dict <span style="color:#f92672">*</span>ht, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>key) {
    <span style="color:#66d9ef">return</span> dictGenericDelete(ht,key,<span style="color:#ae81ff">0</span>) <span style="color:#f92672">?</span> DICT_OK : DICT_ERR;
}

<span style="color:#66d9ef">static</span> dictEntry <span style="color:#f92672">*</span><span style="color:#a6e22e">dictGenericDelete</span>(dict <span style="color:#f92672">*</span>d, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>key, <span style="color:#66d9ef">int</span> nofree) {
    <span style="color:#66d9ef">uint64_t</span> h, idx;
    dictEntry <span style="color:#f92672">*</span>he, <span style="color:#f92672">*</span>prevHe;
    <span style="color:#66d9ef">int</span> table;
		<span style="color:#75715e">//dataDict和expireDict同时为空的情况下直接返回NULL
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> (d<span style="color:#f92672">-&gt;</span>ht[<span style="color:#ae81ff">0</span>].used <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;&amp;</span> d<span style="color:#f92672">-&gt;</span>ht[<span style="color:#ae81ff">1</span>].used <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) <span style="color:#66d9ef">return</span> NULL;
		<span style="color:#75715e">//判断是否正在扩容，如果正在扩容则帮助推进hashTable的expand过程
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> (dictIsRehashing(d)) _dictRehashStep(d);
  	<span style="color:#75715e">//得到hash值
</span><span style="color:#75715e"></span>    h <span style="color:#f92672">=</span> dictHashKey(d, key);

    <span style="color:#66d9ef">for</span> (table <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; table <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">1</span>; table<span style="color:#f92672">++</span>) {
        idx <span style="color:#f92672">=</span> h <span style="color:#f92672">&amp;</span> d<span style="color:#f92672">-&gt;</span>ht[table].sizemask;
      	<span style="color:#75715e">//定位到存储在hash桶中的链表头节点
</span><span style="color:#75715e"></span>        he <span style="color:#f92672">=</span> d<span style="color:#f92672">-&gt;</span>ht[table].table[idx];
        prevHe <span style="color:#f92672">=</span> NULL;
      	<span style="color:#75715e">//开始从链表的头部开始，依次向后查找
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">while</span>(he) {
            <span style="color:#66d9ef">if</span> (key<span style="color:#f92672">==</span>he<span style="color:#f92672">-&gt;</span>key <span style="color:#f92672">||</span> dictCompareKeys(d, key, he<span style="color:#f92672">-&gt;</span>key)) {
              	<span style="color:#75715e">//链表解链操作
</span><span style="color:#75715e"></span>                <span style="color:#66d9ef">if</span> (prevHe)
                    prevHe<span style="color:#f92672">-&gt;</span>next <span style="color:#f92672">=</span> he<span style="color:#f92672">-&gt;</span>next;
                <span style="color:#66d9ef">else</span>
                    d<span style="color:#f92672">-&gt;</span>ht[table].table[idx] <span style="color:#f92672">=</span> he<span style="color:#f92672">-&gt;</span>next;
                <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>nofree) {
                  	<span style="color:#75715e">//nofree传入的值为0，表示立马释放dictEntry以及其中key和value占用的内存
</span><span style="color:#75715e"></span>                    dictFreeKey(d, he);
                    dictFreeVal(d, he);
                    zfree(he);
                }
                d<span style="color:#f92672">-&gt;</span>ht[table].used<span style="color:#f92672">--</span>;
                <span style="color:#66d9ef">return</span> he;
            }
            prevHe <span style="color:#f92672">=</span> he;
            he <span style="color:#f92672">=</span> he<span style="color:#f92672">-&gt;</span>next;
        }
        <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>dictIsRehashing(d)) <span style="color:#66d9ef">break</span>;
    }
    <span style="color:#66d9ef">return</span> NULL;
}
</code></pre></div><p>其中释放内存主要是三个方法dictFreeKey，dictFreeVal，zfree，前两个方法直接调用key和value的destructor，依次看看key和value的释放过程：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">define dictFreeKey(d, entry) 
    <span style="color:#66d9ef">if</span> ((d)<span style="color:#f92672">-&gt;</span>type<span style="color:#f92672">-&gt;</span>keyDestructor) 
        (d)<span style="color:#f92672">-&gt;</span>type<span style="color:#f92672">-&gt;</span>keyDestructor((d)<span style="color:#f92672">-&gt;</span>privdata, (entry)<span style="color:#f92672">-&gt;</span>key)

define dictFreeVal(d, entry) 
    <span style="color:#66d9ef">if</span> ((d)<span style="color:#f92672">-&gt;</span>type<span style="color:#f92672">-&gt;</span>valDestructor) 
        (d)<span style="color:#f92672">-&gt;</span>type<span style="color:#f92672">-&gt;</span>valDestructor((d)<span style="color:#f92672">-&gt;</span>privdata, (entry)<span style="color:#f92672">-&gt;</span>v.val)
</code></pre></div><p>在server.c中，可以找到对应的keyDestructor和valDestructor的原型：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">dictType dbDictType <span style="color:#f92672">=</span> {
    dictSdsHash,               
    NULL,                       
    NULL,                       
    dictSdsKeyCompare,     
  	<span style="color:#75715e">//负责key的销毁
</span><span style="color:#75715e"></span>    dictSdsDestructor, 
  	<span style="color:#75715e">//负责value的销毁
</span><span style="color:#75715e"></span>    dictObjectDestructor  
};
</code></pre></div><p>可以看到，key的销毁实际上就是释放存储具体key值的sds：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">dictSdsDestructor</span>(<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>privdata, <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>val)
{
    DICT_NOTUSED(privdata);

    sdsfree(val);
}
</code></pre></div><p>但是对于value，就会存在比较多的类型：string、list、set、zset、hash&hellip;，根据redisobj中的type调用不同的free方法，同时value的删除依据就是引用计数法：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">dictObjectDestructor</span>(<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>privdata, <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>val)
{
    DICT_NOTUSED(privdata);

    <span style="color:#66d9ef">if</span> (val <span style="color:#f92672">==</span> NULL) <span style="color:#66d9ef">return</span>;
    decrRefCount(val);
}

<span style="color:#66d9ef">void</span> <span style="color:#a6e22e">decrRefCount</span>(robj <span style="color:#f92672">*</span>o) {
    <span style="color:#66d9ef">if</span> (o<span style="color:#f92672">-&gt;</span>refcount <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>) {
      	<span style="color:#75715e">//使用引用计数法作为依据进行删除
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">switch</span>(o<span style="color:#f92672">-&gt;</span>type) {
        <span style="color:#66d9ef">case</span> OBJ_STRING: freeStringObject(o); <span style="color:#66d9ef">break</span>;
        <span style="color:#66d9ef">case</span> OBJ_LIST: freeListObject(o); <span style="color:#66d9ef">break</span>;
        <span style="color:#66d9ef">case</span> OBJ_SET: freeSetObject(o); <span style="color:#66d9ef">break</span>;
        <span style="color:#66d9ef">case</span> OBJ_ZSET: freeZsetObject(o); <span style="color:#66d9ef">break</span>;
        <span style="color:#66d9ef">case</span> OBJ_HASH: freeHashObject(o); <span style="color:#66d9ef">break</span>;
        <span style="color:#66d9ef">case</span> OBJ_MODULE: freeModuleObject(o); <span style="color:#66d9ef">break</span>;
        <span style="color:#66d9ef">case</span> OBJ_STREAM: freeStreamObject(o); <span style="color:#66d9ef">break</span>;
        <span style="color:#66d9ef">default</span><span style="color:#f92672">:</span> serverPanic(<span style="color:#e6db74">&#34;Unknown object type&#34;</span>); <span style="color:#66d9ef">break</span>;
        }
        zfree(o);
    } <span style="color:#66d9ef">else</span> {
        <span style="color:#66d9ef">if</span> (o<span style="color:#f92672">-&gt;</span>refcount <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">0</span>) serverPanic(<span style="color:#e6db74">&#34;decrRefCount against refcount &lt;= 0&#34;</span>);
        <span style="color:#66d9ef">if</span> (o<span style="color:#f92672">-&gt;</span>refcount <span style="color:#f92672">!=</span> OBJ_SHARED_REFCOUNT) o<span style="color:#f92672">-&gt;</span>refcount<span style="color:#f92672">--</span>;
    }
}
</code></pre></div><p>不同的value类型有着不同的释放内存方法，但是它们都调用了zfree，接下来看看zfree的方法内部实现：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">zfree</span>(<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>ptr) {
  	<span style="color:#75715e">//ptr指针为void类型，可以指向任意数据类型的内存
</span><span style="color:#75715e"></span><span style="color:#75715e">#ifndef HAVE_MALLOC_SIZE
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>realptr;
    size_t oldsize;
<span style="color:#75715e">#endif
</span><span style="color:#75715e"></span>		<span style="color:#75715e">//根据不同的宏定义，释放不同大小的内存，但是都调用了free方法
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> (ptr <span style="color:#f92672">==</span> NULL) <span style="color:#66d9ef">return</span>;
<span style="color:#75715e">#ifdef HAVE_MALLOC_SIZE
</span><span style="color:#75715e"></span>    update_zmalloc_stat_free(zmalloc_size(ptr));
    free(ptr);
<span style="color:#75715e">#else
</span><span style="color:#75715e"></span>    realptr <span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>)ptr<span style="color:#f92672">-</span>PREFIX_SIZE;
    oldsize <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((size_t<span style="color:#f92672">*</span>)realptr);
    update_zmalloc_stat_free(oldsize<span style="color:#f92672">+</span>PREFIX_SIZE);
    free(realptr);
<span style="color:#75715e">#endif
</span><span style="color:#75715e"></span>}
</code></pre></div><p>底层调用了free接口，这属于操作系统提供的标准库函数，以我的macos为例，free函数存在于_malloc.h头文件定义中。一些linux系统可能会定义在stdlib标准库头文件中。</p>
]]></content>
        </item>
        
        <item>
            <title>Redis存储原理剖析&lt;一&gt;：存储模型和基础命令解析</title>
            <link>https://Huang-zh.github.io/posts/redis1/</link>
            <pubDate>Fri, 25 Aug 2023 22:10:44 +0800</pubDate>
            
            <guid>https://Huang-zh.github.io/posts/redis1/</guid>
            <description>1. 前言 2022年，是充满挑战性的一年。 这一年，我选择离开了自己熟悉的信息化领域，把精力投向了互联网金融。 在22年的后半程，鉴于平台和团队所带</description>
            <content type="html"><![CDATA[<h3 id="1-前言">1. 前言</h3>
<blockquote>
<p>2022年，是充满挑战性的一年。</p>
<p>这一年，我选择离开了自己熟悉的信息化领域，把精力投向了互联网金融。</p>
<p>在22年的后半程，鉴于平台和团队所带来的效应，个人也在高频交易业务领域吸收了足够多的知识。过程中，认知的颠覆和自我的怀疑常常是共存。</p>
<p>所幸这些经历最后都能够作为养分，支撑我一步步走到当下。</p>
<p>这个系列的文章，初稿实际上在22年的年底就已经完成。但碍于平日里事务繁忙兼琐事繁多，使得日子一再蹉跎，一直推迟到23年过半，才开始尝试去重新梳理其中的些许细节，并准备将它发表在博客里。</p>
<p>初稿原本诞生于22年在高频交易系统的技术选型、架构搭建和研发过程中。当时和团队里优秀的工程师们对redis尝试不断地深入探索，试图吸收其在架构设计方面的优点，并思考对于交易业务领域可以如何进行二次开发以达到发挥极致性能的目的，从而形成了这份初稿。当然，由于保密机制，文档中原先存在的定制化方案和敏感信息已去除，但对redis架构有兴趣的朋友，仍然可以通过这个系列洞悉redis在设计方面的优点。</p>
<p>过程中难免会因为篇幅原因删除细枝末节的代码，这也是为更好的去掌握主流程，让整个文档脉络更清晰而做的取舍。若对内容有异议，可通过邮箱联系我。</p>
<pre><code>                                        huangzh
                                        2023.08.25
</code></pre>
</blockquote>
<hr>
<h4 id="阅读本文档存在一些门槛不建议新手直接阅读建议大家先掌握以下必要的技能">阅读本文档存在一些门槛，不建议新手直接阅读，建议大家先掌握以下必要的技能：</h4>
<ul>
<li>良好的c语言基础。</li>
<li>掌握多路复用编程网络模型。</li>
<li>对操作系统中io的认知。</li>
<li>学习并调试过其他常用中间件代码的经验。</li>
<li>耐心。</li>
</ul>
<hr>
<p>redis的存储模型，是典型的hash存储。即一个key对应一个或多个值，这在redis支持的数据类型有着明确的体现，redis一共支持五种类型的数据结构存储：</p>
<ul>
<li>string</li>
<li>hash（又称为set）</li>
<li>list</li>
<li>zset</li>
<li>zlist</li>
</ul>
<p>从广义上来看，这五种类型数据的存储都可以用key-value形式去实现，无非是value所对应的值的形式有所不同。</p>
<hr>
<h3 id="2-hash存储引擎">2. hash存储引擎</h3>
<p>提到redis，不得不先提及hash存储引擎的概念，一个典型的hash存储引擎原理如下图所示：</p>
<p><img src="https://s21.ax1x.com/2024/08/29/pAA26XQ.png" alt="hash存储示意"></p>
<p>这种基于hash的存储方式，与传统关系性数据库有着非常大的区别。</p>
<p>在内存中通过一定的hash算法均匀的散列key值，使不同的key均匀的散落在hashtable的不同栏位。</p>
<p>由于相同的key可能对应不同的value，因此hashtable每个栏位实际上采用挂载链表的形式存储每一个value节点。</p>
<p>每个value节点中，包含三个最重要的元素：</p>
<ul>
<li>position：value的起始位置</li>
<li>size：value对应的长度</li>
<li>fileid：value存储的文件标识符</li>
</ul>
<p>当然，节点中当然可以包含其他额外的值，不同软件有着自己的额外添加的元素。</p>
<p>但是，不约而外的，通过这三个必要的元素，可以找到key对应的value究竟存储于哪个文件，以及value在该文件中对应的起始位置和长度。</p>
<p>通过这种方式，实际上可以很方便的查找key-value元素。同时，这种方式将hashtable中每个栏位的写入由随机写（hash值随机）转变为顺序写（每个栏位的数据只需要顺序往该栏位对应的文件中添加即可，通过节点链表顺序连接），大大提高了写入的效率。</p>
<p>同时，使用hash存储引擎还存在以下特点：</p>
<ul>
<li>时间复杂度o(1)。</li>
<li>满足“=”，“IN”条件查询。</li>
<li>不支持范围查询，比如between关键字。</li>
<li>不支持order by关键字排序。</li>
</ul>
<hr>
<h3 id="3-redis数据模型">3. redis数据模型</h3>
<p>我们在描述一种存储类型的中间件时，无论它是缓存类的存储，亦或是传统写入磁盘的关系性数据库存储，都存在它们各自最基础也是最核心的数据存储模型，这里我个人习惯把它叫做数据模型，基于数据模型才能实现上层复杂的结构存储。</p>
<p>redis的数据模型，可以把它看成字典，一种基于key-value存储的数据结构，底层由数组实现的基于hashtable的拉链法存储。</p>
<p>以下是从redis源码中提取的四种以此从外到内的核心数据模型，其中redisDb为最外层，抽丝剥茧之后，不难发现真正的数据存储于底层的dictEntry：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">typedef</span> <span style="color:#66d9ef">struct</span> redisDb {
    dict <span style="color:#f92672">*</span>dict;                 <span style="color:#75715e">/* The keyspace for this DB */</span>
    dict <span style="color:#f92672">*</span>expires;              <span style="color:#75715e">/* Timeout of keys with a timeout set */</span>
    dict <span style="color:#f92672">*</span>blocking_keys;        <span style="color:#75715e">/* Keys with clients waiting for data (BLPOP)*/</span>
    dict <span style="color:#f92672">*</span>ready_keys;           <span style="color:#75715e">/* Blocked keys that received a PUSH */</span>
    dict <span style="color:#f92672">*</span>watched_keys;         <span style="color:#75715e">/* WATCHED keys for MULTI/EXEC CAS */</span>
    <span style="color:#66d9ef">int</span> id;                     <span style="color:#75715e">/* Database ID */</span>
    <span style="color:#66d9ef">long</span> <span style="color:#66d9ef">long</span> avg_ttl;          <span style="color:#75715e">/* Average TTL, just for stats */</span>
    list <span style="color:#f92672">*</span>defrag_later;         <span style="color:#75715e">/* List of key names to attempt to defrag one by one, gradually. */</span>
} redisDb;

<span style="color:#66d9ef">typedef</span> <span style="color:#66d9ef">struct</span> dict {
    dictType <span style="color:#f92672">*</span>type;
    <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>privdata;
    dictht ht[<span style="color:#ae81ff">2</span>];
    <span style="color:#66d9ef">long</span> rehashidx; <span style="color:#75715e">/* rehashing not in progress if rehashidx == -1 */</span>
    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">long</span> iterators; <span style="color:#75715e">/* number of iterators currently running */</span>
} dict;

<span style="color:#66d9ef">typedef</span> <span style="color:#66d9ef">struct</span> dictht {
    dictEntry <span style="color:#f92672">**</span>table;
    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">long</span> size;
    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">long</span> sizemask;
    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">long</span> used;
} dictht;

<span style="color:#66d9ef">typedef</span> <span style="color:#66d9ef">struct</span> dictEntry {
    <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>key;
    <span style="color:#66d9ef">union</span> {
        <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>val;
        <span style="color:#66d9ef">uint64_t</span> u64;
        <span style="color:#66d9ef">int64_t</span> s64;
        <span style="color:#66d9ef">double</span> d;
    } v;
    <span style="color:#66d9ef">struct</span> dictEntry <span style="color:#f92672">*</span>next;
} dictEntry;
</code></pre></div><p>dictEntry是最基本的存储单元，包含了一组key-value元素，key即存储对应的key值，v所对应的union结构存储具体类型对应的value。还有一个next指针指向下一个存储单元，这样就可以构成一个链表。</p>
<p>dictht（全称dicthashtable）包含多条由dictEntry构成的链表，table作为二级指针，表示一组dictEntry，其中每一个dictEntry存储的值是指向具体存储了某个数据的dictEntry的指针，size标识有几条链表存在，used表示所有链表的节点总数。</p>
<p>dict再封装了两个dictht，一个用于存储真实的key-value数据（datatable），一个用于渐进式hash时临时存放原有的数据，我们的redis客户端指令每次对key的查找请求都是去datatable获取数据。</p>
<p>redisDb封装了dict，此外还有带有expire key的字典，即expires，可以理解为expires内部，用hash存储的方式存储了key对应的过期时间戳。</p>
<hr>
<h3 id="4-命令代码执行过程分析">4. 命令代码执行过程分析</h3>
<p>我们从两个最基本的redis命令案例分析源代码，实际上，这个过程不可能面面俱到，但是只要掌握大体的流程，就可以逐步洞悉内部的精髓。</p>
<h4 id="41-expire-key-expire">4.1 expire key expire</h4>
<p>来看一个最基本的命令：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">expire testKey 60
</code></pre></div><p>这个命令表示对值为testKey的key，设置60毫秒的过期时间。来看redis代码中对于该命令的处理：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">void</span> <span style="color:#960050;background-color:#1e0010">ç</span>(client <span style="color:#f92672">*</span>c, redisDb <span style="color:#f92672">*</span>db, robj <span style="color:#f92672">*</span>key, <span style="color:#66d9ef">long</span> <span style="color:#66d9ef">long</span> when) {
    dictEntry <span style="color:#f92672">*</span>kde, <span style="color:#f92672">*</span>de;

    <span style="color:#75715e">// 1.先从redisDb中的dict中获取存储了key-value的dictEntry，由kde指针指向该dictEntry的地址
</span><span style="color:#75715e"></span>    kde <span style="color:#f92672">=</span> dictFind(db<span style="color:#f92672">-&gt;</span>dict,key<span style="color:#f92672">-&gt;</span>ptr);
    serverAssertWithInfo(NULL,key,kde <span style="color:#f92672">!=</span> NULL);
  	<span style="color:#75715e">// 2.从redisDb中的expire字典中寻找存储了具体过期时间戳的dictEntry，由de指针指向该dictEntry的地址
</span><span style="color:#75715e"></span>    de <span style="color:#f92672">=</span> dictAddOrFind(db<span style="color:#f92672">-&gt;</span>expires,dictGetKey(kde));
  	<span style="color:#75715e">// 3.更新de所指向的dictEntry中的过期时间
</span><span style="color:#75715e"></span>    dictSetSignedIntegerVal(de,when);
		<span style="color:#75715e">// 4.触发集群间的同步，保证数据一致性
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">int</span> writable_slave <span style="color:#f92672">=</span> server.masterhost <span style="color:#f92672">&amp;&amp;</span> server.repl_slave_ro <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>;
    <span style="color:#66d9ef">if</span> (c <span style="color:#f92672">&amp;&amp;</span> writable_slave <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">!</span>(c<span style="color:#f92672">-&gt;</span>flags <span style="color:#f92672">&amp;</span> CLIENT_MASTER))
        rememberSlaveKeyWithExpire(db,key);
}
</code></pre></div><p>这里为什么要先从具体存储数据的字典中先查找一遍？个人认为是为了保证数据必须真实存储在字典中，因为redis的过期机制（惰性/LFU/LRU）往往需要cpu花费一些时间片去调度，所以在设计上需要尽可能严格的保证资源的不必要浪费。</p>
<p>dictFind是最基础的查询函数：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">dictEntry <span style="color:#f92672">*</span><span style="color:#a6e22e">dictFind</span>(dict <span style="color:#f92672">*</span>d, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>key)
{
    dictEntry <span style="color:#f92672">*</span>he;
    <span style="color:#66d9ef">uint64_t</span> h, idx, table;
		<span style="color:#75715e">// 1.如果两个dictht的used均为0，说明当前既没有数据存储，也没有发生扩容导致的rehash，直接返回NUll。
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> (d<span style="color:#f92672">-&gt;</span>ht[<span style="color:#ae81ff">0</span>].used <span style="color:#f92672">+</span> d<span style="color:#f92672">-&gt;</span>ht[<span style="color:#ae81ff">1</span>].used <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) <span style="color:#66d9ef">return</span> NULL; 
  	<span style="color:#75715e">// 2.如果当前正在发生扩容，则当前线程帮助推进rehash的过程
</span><span style="color:#75715e"></span>  	<span style="color:#75715e">//   这样做的目的，是将rehash的压力分担到各个操作中去（修改/删除/查询）
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> (dictIsRehashing(d)) _dictRehashStep(d);
  	<span style="color:#75715e">// 3.得到key的hash值
</span><span style="color:#75715e"></span>    h <span style="color:#f92672">=</span> dictHashKey(d, key);
  	<span style="color:#75715e">// 4.hash值模上hashtable的使用栏位数量，得到一个由dictEntry构成的链表
</span><span style="color:#75715e"></span>  	<span style="color:#75715e">//   依次遍历每一个dictEntry，比较key的值，得到最终的entry
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">for</span> (table <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; table <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">1</span>; table<span style="color:#f92672">++</span>) {
        idx <span style="color:#f92672">=</span> h <span style="color:#f92672">&amp;</span> d<span style="color:#f92672">-&gt;</span>ht[table].sizemask;
        he <span style="color:#f92672">=</span> d<span style="color:#f92672">-&gt;</span>ht[table].table[idx];
        <span style="color:#66d9ef">while</span>(he) {
            <span style="color:#66d9ef">if</span> (key<span style="color:#f92672">==</span>he<span style="color:#f92672">-&gt;</span>key <span style="color:#f92672">||</span> dictCompareKeys(d, key, he<span style="color:#f92672">-&gt;</span>key))
                <span style="color:#66d9ef">return</span> he;
            he <span style="color:#f92672">=</span> he<span style="color:#f92672">-&gt;</span>next;
        }
        <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>dictIsRehashing(d)) <span style="color:#66d9ef">return</span> NULL;
    }
    <span style="color:#66d9ef">return</span> NULL;
}
</code></pre></div><p>接下来看看dictAddOrFind，这个方法对key进行查找，如果不存在会新增，否则得到原本就存在的dictEntry。是否符合我们expire命令的逻辑？原先testKey不存在expireTime，我们通过命令设置expireTime的过程就是在expire字典中新增一个dictEntry，然后设置它的value为expireTime对应的时间戳：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">dictEntry <span style="color:#f92672">*</span><span style="color:#a6e22e">dictAddOrFind</span>(dict <span style="color:#f92672">*</span>d, <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>key) {
    dictEntry <span style="color:#f92672">*</span>entry, <span style="color:#f92672">*</span>existing;
    entry <span style="color:#f92672">=</span> dictAddRaw(d,key,<span style="color:#f92672">&amp;</span>existing);
  	<span style="color:#75715e">//如果entry指针的值存在，说明entry指针指向的dictEntry是通过dictAddRaw新增的，否则返回原本存在的existing地址。
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">return</span> entry <span style="color:#f92672">?</span> entry : existing;
}

dictEntry <span style="color:#f92672">*</span><span style="color:#a6e22e">dictAddRaw</span>(dict <span style="color:#f92672">*</span>d, <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>key, dictEntry <span style="color:#f92672">**</span>existing)
{
    <span style="color:#66d9ef">long</span> index;
    dictEntry <span style="color:#f92672">*</span>entry;
    dictht <span style="color:#f92672">*</span>ht;
		<span style="color:#75715e">// 1.如果当前正在发生扩容，则当前线程帮助推进rehash的过程
</span><span style="color:#75715e"></span>  	<span style="color:#75715e">//   这样做的目的，是将rehash的压力分担到各个操作中去（修改/删除/查询）
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> (dictIsRehashing(d)) _dictRehashStep(d);

    <span style="color:#75715e">// 2.如果计算出index为-1，代表原先存在，返回null
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> ((index <span style="color:#f92672">=</span> _dictKeyIndex(d, key, dictHashKey(d,key), existing)) <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
        <span style="color:#66d9ef">return</span> NULL;

    <span style="color:#75715e">// 3.1 原先不存在，判断是否处于rehash状态，如果是就将数据存储于第二个hashtable，否则存储于第一个hashtable
</span><span style="color:#75715e"></span>  	ht <span style="color:#f92672">=</span> dictIsRehashing(d) <span style="color:#f92672">?</span> <span style="color:#f92672">&amp;</span>d<span style="color:#f92672">-&gt;</span>ht[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">:</span> <span style="color:#f92672">&amp;</span>d<span style="color:#f92672">-&gt;</span>ht[<span style="color:#ae81ff">0</span>];
    <span style="color:#75715e">// 3.2 分配需要的内存，将新的dictEntry插入链表的头部
</span><span style="color:#75715e"></span>    entry <span style="color:#f92672">=</span> zmalloc(<span style="color:#66d9ef">sizeof</span>(<span style="color:#f92672">*</span>entry));
    entry<span style="color:#f92672">-&gt;</span>next <span style="color:#f92672">=</span> ht<span style="color:#f92672">-&gt;</span>table[index];
    ht<span style="color:#f92672">-&gt;</span>table[index] <span style="color:#f92672">=</span> entry;
    ht<span style="color:#f92672">-&gt;</span>used<span style="color:#f92672">++</span>;

    <span style="color:#75715e">// 4.为新的dictEntry设置key值
</span><span style="color:#75715e"></span>    dictSetKey(d, entry, key);
    <span style="color:#66d9ef">return</span> entry;
}
</code></pre></div><p>如果觉得不够清晰，可以看一下dictFind的调用时序图：</p>

<script async type="application/javascript" src="https://cdn.jsdelivr.net/npm/mermaid@9.1.1/dist/mermaid.min.js">
    var config = {
      startOnLoad:true,
      theme:'neutral',
      align:'left'
    };
    mermaid.initialize(config);
  </script>
  
  <div class="mermaid">
    
   sequenceDiagram
　　participant dictAddOrFind
　　participant dictAddRaw
　　dictAddOrFind->>dictAddRaw:invoke
　　
　　Note OVER		dictAddRaw: 判断是否触发_dictRehashStep推进rehash
　　Note OVER		dictAddRaw: 计算index，判断是否已存在entry，存在直接返回NULL
　　Note OVER		dictAddRaw: 判断是否处于rehash过程，决定存储于哪个hashtable
　　Note OVER		dictAddRaw: 分配内存，构造dictEntry，插入链表头部
　　Note OVER		dictAddRaw: 为新的dictEntry设置key值
　　
　　dictAddRaw-->>dictAddOrFind:return
　　Note OVER		dictAddOrFind: 已存在返回&existing，否则返回dictEntry *entry

  </div>

<hr>
<h4 id="42-set-key-value">4.2 set key value</h4>
<p>再来看一个命令：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">set name huangzh
</code></pre></div><p>这是最基本的添加数据命令，表示我们可以使用该命令创造一个key为name，value为huangzh的dictEntry。那么，从这个命令进入redis-server端的代码，看看它的执行流程：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">setKey</span>(redisDb <span style="color:#f92672">*</span>db, robj <span style="color:#f92672">*</span>key, robj <span style="color:#f92672">*</span>val) {
  	<span style="color:#75715e">// 1.lookupKeyWrite查找字典中是否存在key，内部实际上仍然调用dictFind基础查询函数
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> (lookupKeyWrite(db,key) <span style="color:#f92672">==</span> NULL) {
      	<span style="color:#75715e">// 2.如果当前key在字典中不存在，新增
</span><span style="color:#75715e"></span>        dbAdd(db,key,val);
    } <span style="color:#66d9ef">else</span> {
      	<span style="color:#75715e">// 3.如果当前key在字典中存在，覆盖
</span><span style="color:#75715e"></span>        dbOverwrite(db,key,val);
    }
  	<span style="color:#75715e">// 4.value的引用计数+1
</span><span style="color:#75715e"></span>    incrRefCount(val);
  	<span style="color:#75715e">// 5.如果原先db中存在key且配置了expireTime，这一步会直接移除存储old key过期时间的dictEntry
</span><span style="color:#75715e"></span>    removeExpire(db,key);
  	<span style="color:#75715e">// 6.通知watch了该key的客户端
</span><span style="color:#75715e"></span>    signalModifiedKey(db,key);
}
</code></pre></div><p>这里我们看到了新的类型robj，它的全称是redisObject，事实上，在dictEntry中，存储的key和value时的传参都是用它作为载体：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">typedef</span> <span style="color:#66d9ef">struct</span> redisObject {
  	<span style="color:#75715e">// 类型，枚举值，对应了redis支持的所有数据类型
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">unsigned</span> type:<span style="color:#ae81ff">4</span>;
  	<span style="color:#75715e">// 编码
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">unsigned</span> encoding:<span style="color:#ae81ff">4</span>;
  	<span style="color:#75715e">// 24位存储，用于LRU或是LFU淘汰机制，在后面会专门描述
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">unsigned</span> lru:LRU_BITS; 
  	<span style="color:#75715e">// 当前引用数
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">int</span> refcount;
  	<span style="color:#75715e">// 指向具体值的指针
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>ptr;
} robj;
</code></pre></div><p>回到setKey的主流程，上面说到，如果当前字典不存在key，则调用dbAdd函数进行新增，我们从这里进入内部的实现：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">dbAdd</span>(redisDb <span style="color:#f92672">*</span>db, robj <span style="color:#f92672">*</span>key, robj <span style="color:#f92672">*</span>val) {
  	<span style="color:#75715e">//sds 全称Simple Dynamic Strings，是redis中提供的简易安全的字符串库
</span><span style="color:#75715e"></span>    sds copy <span style="color:#f92672">=</span> sdsdup(key<span style="color:#f92672">-&gt;</span>ptr);
  	<span style="color:#75715e">// 调用字典的新增方法
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">int</span> retval <span style="color:#f92672">=</span> dictAdd(db<span style="color:#f92672">-&gt;</span>dict, copy, val);

    serverAssertWithInfo(NULL,key,retval <span style="color:#f92672">==</span> DICT_OK);
    <span style="color:#66d9ef">if</span> (val<span style="color:#f92672">-&gt;</span>type <span style="color:#f92672">==</span> OBJ_LIST <span style="color:#f92672">||</span>
        val<span style="color:#f92672">-&gt;</span>type <span style="color:#f92672">==</span> OBJ_ZSET)
        signalKeyAsReady(db, key);
    <span style="color:#66d9ef">if</span> (server.cluster_enabled) slotToKeyAdd(key);
}

<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">dictAdd</span>(dict <span style="color:#f92672">*</span>d, <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>key, <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>val)
{		
  	<span style="color:#75715e">//实际新增在这一步，dictAddRaw已经分析过，不做赘述
</span><span style="color:#75715e"></span>    dictEntry <span style="color:#f92672">*</span>entry <span style="color:#f92672">=</span> dictAddRaw(d,key,NULL);

    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>entry) <span style="color:#66d9ef">return</span> DICT_ERR;
  	<span style="color:#75715e">//为新增的dictEntry填充value
</span><span style="color:#75715e"></span>    dictSetVal(d, entry, val);
    <span style="color:#66d9ef">return</span> DICT_OK;
}
</code></pre></div><p>这里出现了一个结构体叫做sds，全称Simple Dynamic Strings，是redis提供的字符串高效操作库，不是分析的重点，具体可参考https://github.com/antirez/sds。</p>
<p>可以看到实际调用dictAddRaw函数进行新增的时候，传入的是sds，而在之前已经分析过，dictAddRaw会对新增的dictEntry进行key的填充，所以我们可以得出，其实sds才是key作为存储的数据载体，那么来看一下构造sds的过程：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">sds <span style="color:#a6e22e">sdsdup</span>(<span style="color:#66d9ef">const</span> sds s) {
    <span style="color:#66d9ef">return</span> sdsnewlen(s, sdslen(s));
}

sds <span style="color:#a6e22e">sdsnewlen</span>(<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>init, size_t initlen) {
    <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>sh;
    sds s;
  	<span style="color:#75715e">// 根据初始字符串决定构造的动态字符串类型
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">char</span> type <span style="color:#f92672">=</span> sdsReqType(initlen);
    <span style="color:#75715e">// 空串判断
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> (type <span style="color:#f92672">==</span> SDS_TYPE_5 <span style="color:#f92672">&amp;&amp;</span> initlen <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) type <span style="color:#f92672">=</span> SDS_TYPE_8;
    <span style="color:#66d9ef">int</span> hdrlen <span style="color:#f92672">=</span> sdsHdrSize(type);
    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>fp;

    assert(hdrlen<span style="color:#f92672">+</span>initlen<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span> <span style="color:#f92672">&gt;</span> initlen); 
  	<span style="color:#75715e">//分配需要的内存，sds的结构：header的长度+字符串值的初始长度+末尾的空项长度
</span><span style="color:#75715e"></span>    sh <span style="color:#f92672">=</span> s_malloc(hdrlen<span style="color:#f92672">+</span>initlen<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>);
    <span style="color:#66d9ef">if</span> (init<span style="color:#f92672">==</span>SDS_NOINIT)
        init <span style="color:#f92672">=</span> NULL;
    <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>init)
        memset(sh, <span style="color:#ae81ff">0</span>, hdrlen<span style="color:#f92672">+</span>initlen<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>);
    <span style="color:#66d9ef">if</span> (sh <span style="color:#f92672">==</span> NULL) <span style="color:#66d9ef">return</span> NULL;
    s <span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>)sh<span style="color:#f92672">+</span>hdrlen;
  	<span style="color:#75715e">//fp是返回用于读取的实际指针，指向header末尾
</span><span style="color:#75715e"></span>    fp <span style="color:#f92672">=</span> ((<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>)s)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>;
  	<span style="color:#75715e">//根据不同的类型，构造实际的动态字符串
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">switch</span>(type) {
        <span style="color:#66d9ef">case</span> SDS_TYPE_5: {
            <span style="color:#f92672">*</span>fp <span style="color:#f92672">=</span> type <span style="color:#f92672">|</span> (initlen <span style="color:#f92672">&lt;&lt;</span> SDS_TYPE_BITS);
            <span style="color:#66d9ef">break</span>;
        }
        <span style="color:#66d9ef">case</span> SDS_TYPE_8: {
            SDS_HDR_VAR(<span style="color:#ae81ff">8</span>,s);
            sh<span style="color:#f92672">-&gt;</span>len <span style="color:#f92672">=</span> initlen;
            sh<span style="color:#f92672">-&gt;</span>alloc <span style="color:#f92672">=</span> initlen;
            <span style="color:#f92672">*</span>fp <span style="color:#f92672">=</span> type;
            <span style="color:#66d9ef">break</span>;
        }
        <span style="color:#66d9ef">case</span> SDS_TYPE_16: {
            SDS_HDR_VAR(<span style="color:#ae81ff">16</span>,s);
            sh<span style="color:#f92672">-&gt;</span>len <span style="color:#f92672">=</span> initlen;
            sh<span style="color:#f92672">-&gt;</span>alloc <span style="color:#f92672">=</span> initlen;
            <span style="color:#f92672">*</span>fp <span style="color:#f92672">=</span> type;
            <span style="color:#66d9ef">break</span>;
        }
        <span style="color:#66d9ef">case</span> SDS_TYPE_32: {
            SDS_HDR_VAR(<span style="color:#ae81ff">32</span>,s);
            sh<span style="color:#f92672">-&gt;</span>len <span style="color:#f92672">=</span> initlen;
            sh<span style="color:#f92672">-&gt;</span>alloc <span style="color:#f92672">=</span> initlen;
            <span style="color:#f92672">*</span>fp <span style="color:#f92672">=</span> type;
            <span style="color:#66d9ef">break</span>;
        }
        <span style="color:#66d9ef">case</span> SDS_TYPE_64: {
            SDS_HDR_VAR(<span style="color:#ae81ff">64</span>,s);
            sh<span style="color:#f92672">-&gt;</span>len <span style="color:#f92672">=</span> initlen;
            sh<span style="color:#f92672">-&gt;</span>alloc <span style="color:#f92672">=</span> initlen;
            <span style="color:#f92672">*</span>fp <span style="color:#f92672">=</span> type;
            <span style="color:#66d9ef">break</span>;
        }
    }
    <span style="color:#66d9ef">if</span> (initlen <span style="color:#f92672">&amp;&amp;</span> init)
      	<span style="color:#75715e">//拷贝字符串的值到新构造的动态字符串
</span><span style="color:#75715e"></span>        memcpy(s, init, initlen);
  	<span style="color:#75715e">//末尾空项补齐
</span><span style="color:#75715e"></span>    s[initlen] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;\0&#39;</span>;
    <span style="color:#66d9ef">return</span> s;
}
</code></pre></div><p>最后来看一下不同type对应的动态字符串内部结构，可以看到它们都包含了表示长度的len和存储实际字符的数组buf，sdshdr5比较特殊，因为定位其为空串，所以不需要记录长度：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">__attribute__</span> ((__packed__)) sdshdr5 {
    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">char</span> flags; 
    <span style="color:#66d9ef">char</span> buf[];
};
<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">__attribute__</span> ((__packed__)) sdshdr8 {
    <span style="color:#66d9ef">uint8_t</span> len; 
    <span style="color:#66d9ef">uint8_t</span> alloc; 
    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">char</span> flags; 
    <span style="color:#66d9ef">char</span> buf[];
};
<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">__attribute__</span> ((__packed__)) sdshdr16 {
    <span style="color:#66d9ef">uint16_t</span> len; 
    <span style="color:#66d9ef">uint16_t</span> alloc; 
    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">char</span> flags; 
    <span style="color:#66d9ef">char</span> buf[];
};
<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">__attribute__</span> ((__packed__)) sdshdr32 {
    <span style="color:#66d9ef">uint32_t</span> len; 
    <span style="color:#66d9ef">uint32_t</span> alloc; 
    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">char</span> flags;
    <span style="color:#66d9ef">char</span> buf[];
};
<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">__attribute__</span> ((__packed__)) sdshdr64 {
    <span style="color:#66d9ef">uint64_t</span> len; 
    <span style="color:#66d9ef">uint64_t</span> alloc; 
    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">char</span> flags; 
    <span style="color:#66d9ef">char</span> buf[];
};
</code></pre></div><p>接着再回到setKey的主流程，看看removeExpire的内部逻辑：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">removeExpire</span>(redisDb <span style="color:#f92672">*</span>db, robj <span style="color:#f92672">*</span>key) {
    serverAssertWithInfo(NULL,key,dictFind(db<span style="color:#f92672">-&gt;</span>dict,key<span style="color:#f92672">-&gt;</span>ptr) <span style="color:#f92672">!=</span> NULL);
  	<span style="color:#75715e">//从db中的exipre字典删除key对应的dictEntry
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">return</span> dictDelete(db<span style="color:#f92672">-&gt;</span>expires,key<span style="color:#f92672">-&gt;</span>ptr) <span style="color:#f92672">==</span> DICT_OK;
}

<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">dictDelete</span>(dict <span style="color:#f92672">*</span>ht, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>key) {
    <span style="color:#66d9ef">return</span> dictGenericDelete(ht,key,<span style="color:#ae81ff">0</span>) <span style="color:#f92672">?</span> DICT_OK : DICT_ERR;
}

<span style="color:#66d9ef">static</span> dictEntry <span style="color:#f92672">*</span><span style="color:#a6e22e">dictGenericDelete</span>(dict <span style="color:#f92672">*</span>d, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>key, <span style="color:#66d9ef">int</span> nofree) {
    <span style="color:#66d9ef">uint64_t</span> h, idx;
    dictEntry <span style="color:#f92672">*</span>he, <span style="color:#f92672">*</span>prevHe;
    <span style="color:#66d9ef">int</span> table;
		<span style="color:#75715e">//当前没有数据存储，直接返回NULL
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> (d<span style="color:#f92672">-&gt;</span>ht[<span style="color:#ae81ff">0</span>].used <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;&amp;</span> d<span style="color:#f92672">-&gt;</span>ht[<span style="color:#ae81ff">1</span>].used <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) <span style="color:#66d9ef">return</span> NULL;
		<span style="color:#75715e">//如果当前正在rehash，则触发推进rehash的过程
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> (dictIsRehashing(d)) _dictRehashStep(d);
  	<span style="color:#75715e">//计算hash值
</span><span style="color:#75715e"></span>    h <span style="color:#f92672">=</span> dictHashKey(d, key);
		
  	<span style="color:#75715e">//遍历两个hashtable，找到链表中符合key值的dictEntry
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">for</span> (table <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; table <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">1</span>; table<span style="color:#f92672">++</span>) {
        idx <span style="color:#f92672">=</span> h <span style="color:#f92672">&amp;</span> d<span style="color:#f92672">-&gt;</span>ht[table].sizemask;
        he <span style="color:#f92672">=</span> d<span style="color:#f92672">-&gt;</span>ht[table].table[idx];
        prevHe <span style="color:#f92672">=</span> NULL;
        <span style="color:#66d9ef">while</span>(he) {
            <span style="color:#66d9ef">if</span> (key<span style="color:#f92672">==</span>he<span style="color:#f92672">-&gt;</span>key <span style="color:#f92672">||</span> dictCompareKeys(d, key, he<span style="color:#f92672">-&gt;</span>key)) {
                <span style="color:#66d9ef">if</span> (prevHe)
                  	<span style="color:#75715e">//当前节点的前继节点的下一个节点指针直接指向当前节点的后继节点
</span><span style="color:#75715e"></span>                    prevHe<span style="color:#f92672">-&gt;</span>next <span style="color:#f92672">=</span> he<span style="color:#f92672">-&gt;</span>next;
                <span style="color:#66d9ef">else</span>
                  	<span style="color:#75715e">//如果是头节点，则头节点指针改为当前节点的后继节点
</span><span style="color:#75715e"></span>                    d<span style="color:#f92672">-&gt;</span>ht[table].table[idx] <span style="color:#f92672">=</span> he<span style="color:#f92672">-&gt;</span>next;
                <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>nofree) {
                  	<span style="color:#75715e">//释放内存
</span><span style="color:#75715e"></span>                    dictFreeKey(d, he);
                    dictFreeVal(d, he);
                    zfree(he);
                }
              	<span style="color:#75715e">//hashtable的节点使用数-1
</span><span style="color:#75715e"></span>                d<span style="color:#f92672">-&gt;</span>ht[table].used<span style="color:#f92672">--</span>;
                <span style="color:#66d9ef">return</span> he;
            }
            prevHe <span style="color:#f92672">=</span> he;
            he <span style="color:#f92672">=</span> he<span style="color:#f92672">-&gt;</span>next;
        }
        <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>dictIsRehashing(d)) <span style="color:#66d9ef">break</span>;
    }
  	<span style="color:#75715e">//如果没命中key，则返回NULL
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">return</span> NULL; 
}
</code></pre></div><p>那么，来画一个简单的setKey函数执行add key命令时的时序图，省略集群同步和监听通知等步骤后如下：

<script async type="application/javascript" src="https://cdn.jsdelivr.net/npm/mermaid@9.1.1/dist/mermaid.min.js">
    var config = {
      startOnLoad:true,
      theme:'neutral',
      align:'left'
    };
    mermaid.initialize(config);
  </script>
  
  <div class="mermaid">
    
  sequenceDiagram
　　participant setKey
　　participant lookupKeyWrite
　　participant dictFind
　	 participant dbAdd
　	 participant dictAdd
　　setKey->>lookupKeyWrite:invoke
　　
　　lookupKeyWrite->>dictFind:invoke
　　dictFind-->>lookupKeyWrite:return
　　
　　lookupKeyWrite-->>setKey:return
　　Note OVER setKey: 判断dictEntry是否存在，不存在就调用dbAdd新增
		setKey->>dbAdd:invoke
		Note OVER	dbAdd: 创建sds，装载redisObject中的ptr值
		dbAdd->>dictAdd:invoke
		Note OVER dictAdd: 调用dictAddRaw，创建dictEntry，存入hashtable并填充key值
		Note OVER dictAdd: 调用dictSetVal填充value
		dictAdd-->>dbAdd:return
		dbAdd-->>setKey:return
		Note OVER setKey: 调用incrRefCount使value引用计数+1
		Note OVER setKey: 调用removeExpire重置expire过期时间

  </div>
</p>
<p>比起一层层深入的跟踪源码，这种时序图能更直观的反应代码执行时的主体流程，也更考验对代码整体逻辑的总结归纳能力。</p>
<p>至此，通过两个简单案例的分析，由浅入深，可以洞悉redis在存储数据时其字典数据结构的全貌：</p>
<p><img src="https://s21.ax1x.com/2024/08/29/pAA2y6g.png" alt="redis存储数据模型"></p>
<hr>
<h3 id="5-key对内存的影响">5. Key对内存的影响</h3>
<p>实际上，在redis中，一个key往往需要存储在两个hashtable中，一个是存储data的ht，而另一份则是存储了过期时间戳的ht。也就意味着，如果为一个key设置了expireTime，那么在redis会存在两份key，这使得在一些极端情况不得不考虑key的大小对内存占用的影响。</p>
<p>通过上面的分析，已经知道真正存储key的是sds结构体，但是在转化sds之前，需要先经过dictEntry和redisObject的过渡，也就意味着创建dictEntry和redisObject的内存全部都要计入key的存储范围。</p>
<p>我们以64位编译器为例子，先看redisObject的结构：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">typedef</span> <span style="color:#66d9ef">struct</span> redisObject {
    <span style="color:#66d9ef">unsigned</span> type:<span style="color:#ae81ff">4</span>;
    <span style="color:#66d9ef">unsigned</span> encoding:<span style="color:#ae81ff">4</span>;
    <span style="color:#66d9ef">unsigned</span> lru:LRU_BITS; 
    <span style="color:#66d9ef">int</span> refcount;
    <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>ptr;
} robj;
</code></pre></div><p>64位编译器的void指针占用8个字节，int类型占用4个字节。LRU_BITS为24，即24位3个字节。type4位，encoding4位，合计一个字节。所以构成一个redisObject需要16个字节的容量。</p>
<p>再看dictEntry：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">typedef</span> <span style="color:#66d9ef">struct</span> dictEntry {
    <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>key;
    <span style="color:#66d9ef">union</span> {
        <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>val;
        <span style="color:#66d9ef">uint64_t</span> u64;
        <span style="color:#66d9ef">int64_t</span> s64;
        <span style="color:#66d9ef">double</span> d;
    } v;
    <span style="color:#66d9ef">struct</span> dictEntry <span style="color:#f92672">*</span>next;
} dictEntry;
</code></pre></div><p>针对64位编译器void指针还是8个字节，union里所有的类型均占用8个字节，next为结构体指针，因此在64位编译器中也占用8个字节，因此构成一个dictEntry需要24个字节的容量。</p>
<p>最后我们看sds，这里我们使用上面值为testKey作为例子，首先testKey字符串的长度为七个字节，会被分配到的sds类型结构如下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">__attribute__</span> ((__packed__)) sdshdr8 {
    <span style="color:#66d9ef">uint8_t</span> len; 
    <span style="color:#66d9ef">uint8_t</span> alloc; 
    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">char</span> flags; 
    <span style="color:#66d9ef">char</span> buf[];
};
</code></pre></div><p>需要的字节数为1+1+1+7 = 10个字节。</p>
<p>那么，对于调用命令添加一个testKey，所需要的字节总数为16+24+10 = 50。</p>
<p>在设计key的过程中，应当避免key过长。</p>
<p>同时，redis针对这种由于key的字节长度引起的存储容量问题，有着自己的key删除策略和过期淘汰机制。</p>
<p>key删除策略和过期淘汰机制将会在后续的章节中展开分析。</p>
]]></content>
        </item>
        
        <item>
            <title>浮生如梦</title>
            <link>https://Huang-zh.github.io/posts/firstpost/</link>
            <pubDate>Thu, 24 Aug 2023 00:00:00 +0000</pubDate>
            
            <guid>https://Huang-zh.github.io/posts/firstpost/</guid>
            <description>午月间 安逸的人 情不禁的人 得意的人 忘形的人 悻悻而归的人 痴心的人 醉醺醺的人 神隐的人 驾五色龙船的人 将信疑的人 无我的人 喜乐的人 奔波游离的人 失约的人 摇</description>
            <content type="html"><![CDATA[<p>午月间</p>
<p>安逸的人</p>
<p>情不禁的人</p>
<p>得意的人</p>
<p>忘形的人</p>
<p>悻悻而归的人</p>
<p>痴心的人</p>
<p>醉醺醺的人</p>
<p>神隐的人</p>
<p>驾五色龙船的人</p>
<p>将信疑的人</p>
<p>无我的人</p>
<p>喜乐的人</p>
<p>奔波游离的人</p>
<p>失约的人</p>
<p>摇摇晃的人</p>
<p>妙悟的人</p>
<!-- 
<script async type="application/javascript" src="https://cdn.jsdelivr.net/npm/mermaid@9.1.1/dist/mermaid.min.js">
    var config = {
      startOnLoad:true,
      theme:'neutral',
      align:'left'
    };
    mermaid.initialize(config);
  </script>
  
  <div class="mermaid">
    
pie
    title French Words I Know
    "Merde" : 50
    "Oui" : 35
    "Alors" : 10
    "Non" : 5

  </div>
 -->
]]></content>
        </item>
        
    </channel>
</rss>
